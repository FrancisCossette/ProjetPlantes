
DEVICE_EXAMPLE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000704c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000174  20000000  0000704c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007cc  20000174  000071c0  00020174  2**2
                  ALLOC
  3 .stack        00002000  20000940  0000798c  00020174  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d09e  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000667c  00000000  00000000  0006d293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009e2a  00000000  00000000  0007390f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b88  00000000  00000000  0007d739  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fe0  00000000  00000000  0007e2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021367  00000000  00000000  0007f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018135  00000000  00000000  000a0608  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095848  00000000  00000000  000b873d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002104  00000000  00000000  0014df88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
* -------------------------------------------------------------------------------------------------
* Overview: Function write word of data to WM8731
* Input: register address, data
* Output: Nothing
**************************************************************************************************/
void WM8731_CMD(char address, unsigned int cmd){
       0:	40 29 00 20 85 45 00 00 81 45 00 00 81 45 00 00     @). .E...E...E..
	...
		return false;
	}

	for (int i = 0; i < size; i++)
	{
		I2C_SERCOM->I2CM.DATA.reg = data[i];
      2c:	81 45 00 00 00 00 00 00 00 00 00 00 81 45 00 00     .E...........E..

		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));

		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
      3c:	81 45 00 00 81 45 00 00 81 45 00 00 81 45 00 00     .E...E...E...E..
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
      4c:	49 04 00 00 f5 1d 00 00 81 45 00 00 81 45 00 00     I........E...E..
			return false;
		}
	}
	//udi_cdc_putc('B');

	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
      5c:	a9 3d 00 00 81 45 00 00 81 45 00 00 81 45 00 00     .=...E...E...E..
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
      6c:	81 45 00 00 81 45 00 00 81 45 00 00 81 45 00 00     .E...E...E...E..
		udi_cdc_putc('A');
      7c:	81 45 00 00 81 45 00 00 81 45 00 00 25 03 00 00     .E...E...E..%...
			udi_cdc_putc('B');
      8c:	81 45 00 00 81 45 00 00 81 45 00 00 81 45 00 00     .E...E...E...E..
      9c:	81 45 00 00 81 45 00 00 81 45 00 00 81 45 00 00     .E...E...E...E..
      ac:	81 45 00 00 00 00 00 00                             .E......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	0000704c 	.word	0x0000704c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000178 	.word	0x20000178
     108:	0000704c 	.word	0x0000704c
     10c:	0000704c 	.word	0x0000704c
     110:	00000000 	.word	0x00000000

00000114 <TurnLightOn>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     114:	2280      	movs	r2, #128	; 0x80
     116:	05d2      	lsls	r2, r2, #23
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <TurnLightOn+0x10>)
     11a:	615a      	str	r2, [r3, #20]
}

static void TurnLightOn(const struct schedule_cb *evt)
{
	LED_On(LED_0_PIN);
	REG_PORT_OUTSET0 = PORT_PA05;
     11c:	2220      	movs	r2, #32
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <TurnLightOn+0x14>)
     120:	601a      	str	r2, [r3, #0]
}
     122:	4770      	bx	lr
     124:	41004480 	.word	0x41004480
     128:	41004418 	.word	0x41004418

0000012c <TurnLightOff>:
		port_base->OUTSET.reg = pin_mask;
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	05d2      	lsls	r2, r2, #23
     130:	4b02      	ldr	r3, [pc, #8]	; (13c <TurnLightOff+0x10>)
     132:	619a      	str	r2, [r3, #24]

static void TurnLightOff(const struct schedule_cb *evt)
{
	LED_Off(LED_0_PIN);
	REG_PORT_OUTCLR0 = PORT_PA05;
     134:	2220      	movs	r2, #32
     136:	4b02      	ldr	r3, [pc, #8]	; (140 <TurnLightOff+0x14>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	4770      	bx	lr
     13c:	41004480 	.word	0x41004480
     140:	41004414 	.word	0x41004414

00000144 <TurnLightOn1>:
		port_base->OUTCLR.reg = pin_mask;
     144:	2280      	movs	r2, #128	; 0x80
     146:	05d2      	lsls	r2, r2, #23
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <TurnLightOn1+0x10>)
     14a:	615a      	str	r2, [r3, #20]

static void TurnLightOn1(const struct schedule_cb *evt)
{
	LED_On(LED_0_PIN);
	REG_PORT_OUTSET0 = PORT_PA05;
     14c:	2220      	movs	r2, #32
     14e:	4b02      	ldr	r3, [pc, #8]	; (158 <TurnLightOn1+0x14>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	4770      	bx	lr
     154:	41004480 	.word	0x41004480
     158:	41004418 	.word	0x41004418

0000015c <TurnLightOff1>:
		port_base->OUTSET.reg = pin_mask;
     15c:	2280      	movs	r2, #128	; 0x80
     15e:	05d2      	lsls	r2, r2, #23
     160:	4b02      	ldr	r3, [pc, #8]	; (16c <TurnLightOff1+0x10>)
     162:	619a      	str	r2, [r3, #24]

static void TurnLightOff1(const struct schedule_cb *evt)
{
	LED_Off(LED_0_PIN);
	REG_PORT_OUTCLR0 = PORT_PA05;
     164:	2220      	movs	r2, #32
     166:	4b02      	ldr	r3, [pc, #8]	; (170 <TurnLightOff1+0x14>)
     168:	601a      	str	r2, [r3, #0]
}
     16a:	4770      	bx	lr
     16c:	41004480 	.word	0x41004480
     170:	41004414 	.word	0x41004414

00000174 <char2num>:

uint8_t char2num(char in){
	switch(in)
     174:	3830      	subs	r0, #48	; 0x30
     176:	b2c3      	uxtb	r3, r0
     178:	2b09      	cmp	r3, #9
     17a:	d816      	bhi.n	1aa <char2num+0x36>
     17c:	0098      	lsls	r0, r3, #2
     17e:	4b0b      	ldr	r3, [pc, #44]	; (1ac <char2num+0x38>)
     180:	581b      	ldr	r3, [r3, r0]
     182:	469f      	mov	pc, r3
	{
		case '1' :
			return 1;
		break;
		case '2' :
			return 2;
     184:	2002      	movs	r0, #2
     186:	e010      	b.n	1aa <char2num+0x36>
		break;
		case '3' :
			return 3;
		break;
		case '4' :
			return 4;
     188:	2004      	movs	r0, #4
     18a:	e00e      	b.n	1aa <char2num+0x36>
		break;
		case '5' :
			return 5;
     18c:	2005      	movs	r0, #5
     18e:	e00c      	b.n	1aa <char2num+0x36>
		break;
		case '6' :
			return 6;
     190:	2006      	movs	r0, #6
     192:	e00a      	b.n	1aa <char2num+0x36>
		break;
		case '7' :
			return 7;
     194:	2007      	movs	r0, #7
     196:	e008      	b.n	1aa <char2num+0x36>
		break;
		case '8' :
			return 8;
     198:	2008      	movs	r0, #8
     19a:	e006      	b.n	1aa <char2num+0x36>
		break;
		case '9' :
			return 9;
     19c:	2009      	movs	r0, #9
     19e:	e004      	b.n	1aa <char2num+0x36>
		break;
		case '0' :
			return 0;
     1a0:	2000      	movs	r0, #0
     1a2:	e002      	b.n	1aa <char2num+0x36>
			return 1;
     1a4:	2001      	movs	r0, #1
     1a6:	e000      	b.n	1aa <char2num+0x36>
			return 3;
     1a8:	2003      	movs	r0, #3
		break;			
	}
}
     1aa:	4770      	bx	lr
     1ac:	00006d20 	.word	0x00006d20

000001b0 <Get_time>:


void Get_time(){
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	46c6      	mov	lr, r8
     1b4:	b500      	push	{lr}
	uint8_t d1;
	uint8_t d2;
	uint8_t u1;
	uint8_t u2;
	i2cLcdTime();
     1b6:	4b52      	ldr	r3, [pc, #328]	; (300 <Get_time+0x150>)
     1b8:	4798      	blx	r3
	key = 'H';
     1ba:	4f52      	ldr	r7, [pc, #328]	; (304 <Get_time+0x154>)
     1bc:	2348      	movs	r3, #72	; 0x48
     1be:	703b      	strb	r3, [r7, #0]
	i2cLcdPrint(0,27,&key);
     1c0:	003a      	movs	r2, r7
     1c2:	211b      	movs	r1, #27
     1c4:	2000      	movs	r0, #0
     1c6:	4e50      	ldr	r6, [pc, #320]	; (308 <Get_time+0x158>)
     1c8:	47b0      	blx	r6
	i2cLcdPrint(0,28,&key);
     1ca:	003a      	movs	r2, r7
     1cc:	211c      	movs	r1, #28
     1ce:	2000      	movs	r0, #0
     1d0:	47b0      	blx	r6
	key = 'M';
     1d2:	234d      	movs	r3, #77	; 0x4d
     1d4:	703b      	strb	r3, [r7, #0]
	i2cLcdPrint(0,30,&key);
     1d6:	003a      	movs	r2, r7
     1d8:	211e      	movs	r1, #30
     1da:	2000      	movs	r0, #0
     1dc:	47b0      	blx	r6
	i2cLcdPrint(0,31,&key);
     1de:	003a      	movs	r2, r7
     1e0:	211f      	movs	r1, #31
     1e2:	2000      	movs	r0, #0
     1e4:	47b0      	blx	r6
	
	while(keypadScan() == 0xFF){}
     1e6:	4f49      	ldr	r7, [pc, #292]	; (30c <Get_time+0x15c>)
     1e8:	47b8      	blx	r7
     1ea:	28ff      	cmp	r0, #255	; 0xff
     1ec:	d0fc      	beq.n	1e8 <Get_time+0x38>
	while (key != '0' && key != '1' && key != '2')
     1ee:	4f45      	ldr	r7, [pc, #276]	; (304 <Get_time+0x154>)
     1f0:	e019      	b.n	226 <Get_time+0x76>
	{
		key = keypadScan();
     1f2:	4b46      	ldr	r3, [pc, #280]	; (30c <Get_time+0x15c>)
     1f4:	4798      	blx	r3
     1f6:	4b43      	ldr	r3, [pc, #268]	; (304 <Get_time+0x154>)
     1f8:	7018      	strb	r0, [r3, #0]
		d1 = char2num(key);
     1fa:	4b45      	ldr	r3, [pc, #276]	; (310 <Get_time+0x160>)
     1fc:	4798      	blx	r3
     1fe:	0005      	movs	r5, r0
		i2cLcdPrint(0,27,&key);
     200:	4a40      	ldr	r2, [pc, #256]	; (304 <Get_time+0x154>)
     202:	211b      	movs	r1, #27
     204:	2000      	movs	r0, #0
     206:	4b40      	ldr	r3, [pc, #256]	; (308 <Get_time+0x158>)
     208:	4798      	blx	r3

inline void timerDelay(uint16_t ms)
{
	uint16_t cnt;
	
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     20a:	2200      	movs	r2, #0
     20c:	4b41      	ldr	r3, [pc, #260]	; (314 <Get_time+0x164>)
     20e:	821a      	strh	r2, [r3, #16]
     210:	2164      	movs	r1, #100	; 0x64
	
	while(cnt!=ms) // Count the ms till target
	{
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     212:	001a      	movs	r2, r3
     214:	2010      	movs	r0, #16
     216:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     218:	7b93      	ldrb	r3, [r2, #14]
     21a:	06db      	lsls	r3, r3, #27
     21c:	d5fc      	bpl.n	218 <Get_time+0x68>
     21e:	3901      	subs	r1, #1
     220:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     222:	2900      	cmp	r1, #0
     224:	d1f7      	bne.n	216 <Get_time+0x66>
	while (key != '0' && key != '1' && key != '2')
     226:	783b      	ldrb	r3, [r7, #0]
     228:	3b30      	subs	r3, #48	; 0x30
     22a:	2b02      	cmp	r3, #2
     22c:	d8e1      	bhi.n	1f2 <Get_time+0x42>
		timerDelay(100);	
	}
	key = 0xFF;
     22e:	22ff      	movs	r2, #255	; 0xff
     230:	4b34      	ldr	r3, [pc, #208]	; (304 <Get_time+0x154>)
     232:	701a      	strb	r2, [r3, #0]
	while(keypadScan() == 0xFF){}
     234:	4f35      	ldr	r7, [pc, #212]	; (30c <Get_time+0x15c>)
     236:	47b8      	blx	r7
     238:	28ff      	cmp	r0, #255	; 0xff
     23a:	d0fc      	beq.n	236 <Get_time+0x86>
	while (key != '0' && key != '1' && key != '2' && key != '3')
     23c:	4f31      	ldr	r7, [pc, #196]	; (304 <Get_time+0x154>)
     23e:	e019      	b.n	274 <Get_time+0xc4>
	{
		key = keypadScan();
     240:	4b32      	ldr	r3, [pc, #200]	; (30c <Get_time+0x15c>)
     242:	4798      	blx	r3
     244:	4b2f      	ldr	r3, [pc, #188]	; (304 <Get_time+0x154>)
     246:	7018      	strb	r0, [r3, #0]
		u1 = char2num(key);
     248:	4b31      	ldr	r3, [pc, #196]	; (310 <Get_time+0x160>)
     24a:	4798      	blx	r3
     24c:	4680      	mov	r8, r0
		i2cLcdPrint(0,28,&key);
     24e:	4a2d      	ldr	r2, [pc, #180]	; (304 <Get_time+0x154>)
     250:	211c      	movs	r1, #28
     252:	2000      	movs	r0, #0
     254:	4b2c      	ldr	r3, [pc, #176]	; (308 <Get_time+0x158>)
     256:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     258:	2200      	movs	r2, #0
     25a:	4b2e      	ldr	r3, [pc, #184]	; (314 <Get_time+0x164>)
     25c:	821a      	strh	r2, [r3, #16]
     25e:	2164      	movs	r1, #100	; 0x64
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     260:	001a      	movs	r2, r3
     262:	2010      	movs	r0, #16
     264:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     266:	7b93      	ldrb	r3, [r2, #14]
     268:	06db      	lsls	r3, r3, #27
     26a:	d5fc      	bpl.n	266 <Get_time+0xb6>
     26c:	3901      	subs	r1, #1
     26e:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     270:	2900      	cmp	r1, #0
     272:	d1f7      	bne.n	264 <Get_time+0xb4>
	while (key != '0' && key != '1' && key != '2' && key != '3')
     274:	783b      	ldrb	r3, [r7, #0]
     276:	3b30      	subs	r3, #48	; 0x30
     278:	2b03      	cmp	r3, #3
     27a:	d8e1      	bhi.n	240 <Get_time+0x90>
		timerDelay(100);
	}
	hour = (10*d1)+u1;
     27c:	00ab      	lsls	r3, r5, #2
     27e:	18ed      	adds	r5, r5, r3
     280:	006d      	lsls	r5, r5, #1
     282:	4445      	add	r5, r8
     284:	4b24      	ldr	r3, [pc, #144]	; (318 <Get_time+0x168>)
     286:	701d      	strb	r5, [r3, #0]
	key = 0xFF;
     288:	22ff      	movs	r2, #255	; 0xff
     28a:	4b1e      	ldr	r3, [pc, #120]	; (304 <Get_time+0x154>)
     28c:	701a      	strb	r2, [r3, #0]
	while(keypadScan() == 0xFF){}
     28e:	4d1f      	ldr	r5, [pc, #124]	; (30c <Get_time+0x15c>)
     290:	47a8      	blx	r5
     292:	28ff      	cmp	r0, #255	; 0xff
     294:	d0fc      	beq.n	290 <Get_time+0xe0>
	while (key != '0' && key != '1' && key != '2' && key != '3' && key != '4' && key != '5')
     296:	4d1b      	ldr	r5, [pc, #108]	; (304 <Get_time+0x154>)
     298:	e019      	b.n	2ce <Get_time+0x11e>
	{
		key = keypadScan();
     29a:	4b1c      	ldr	r3, [pc, #112]	; (30c <Get_time+0x15c>)
     29c:	4798      	blx	r3
     29e:	4b19      	ldr	r3, [pc, #100]	; (304 <Get_time+0x154>)
     2a0:	7018      	strb	r0, [r3, #0]
		d2 = char2num(key);
     2a2:	4b1b      	ldr	r3, [pc, #108]	; (310 <Get_time+0x160>)
     2a4:	4798      	blx	r3
     2a6:	0004      	movs	r4, r0
		i2cLcdPrint(0,30,&key);
     2a8:	4a16      	ldr	r2, [pc, #88]	; (304 <Get_time+0x154>)
     2aa:	211e      	movs	r1, #30
     2ac:	2000      	movs	r0, #0
     2ae:	4b16      	ldr	r3, [pc, #88]	; (308 <Get_time+0x158>)
     2b0:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     2b2:	2200      	movs	r2, #0
     2b4:	4b17      	ldr	r3, [pc, #92]	; (314 <Get_time+0x164>)
     2b6:	821a      	strh	r2, [r3, #16]
     2b8:	2164      	movs	r1, #100	; 0x64
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     2ba:	001a      	movs	r2, r3
     2bc:	2010      	movs	r0, #16
     2be:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     2c0:	7b93      	ldrb	r3, [r2, #14]
     2c2:	06db      	lsls	r3, r3, #27
     2c4:	d5fc      	bpl.n	2c0 <Get_time+0x110>
     2c6:	3901      	subs	r1, #1
     2c8:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     2ca:	2900      	cmp	r1, #0
     2cc:	d1f7      	bne.n	2be <Get_time+0x10e>
	while (key != '0' && key != '1' && key != '2' && key != '3' && key != '4' && key != '5')
     2ce:	782b      	ldrb	r3, [r5, #0]
     2d0:	3b30      	subs	r3, #48	; 0x30
     2d2:	2b05      	cmp	r3, #5
     2d4:	d8e1      	bhi.n	29a <Get_time+0xea>
		timerDelay(100);
	}
	key = 0xFF;
     2d6:	22ff      	movs	r2, #255	; 0xff
     2d8:	4b0a      	ldr	r3, [pc, #40]	; (304 <Get_time+0x154>)
     2da:	701a      	strb	r2, [r3, #0]
	while(keypadScan() == 0xFF){}
     2dc:	4d0b      	ldr	r5, [pc, #44]	; (30c <Get_time+0x15c>)
     2de:	47a8      	blx	r5
     2e0:	28ff      	cmp	r0, #255	; 0xff
     2e2:	d0fc      	beq.n	2de <Get_time+0x12e>
	while (key = 'A' && key == 'B' && key == 'C' && key == 'D' && key == '*' && key == '#')
     2e4:	2200      	movs	r2, #0
     2e6:	4b07      	ldr	r3, [pc, #28]	; (304 <Get_time+0x154>)
     2e8:	701a      	strb	r2, [r3, #0]
		key = keypadScan();
		u2 = char2num(key);
		i2cLcdPrint(0,31,&key);
		timerDelay(100);
	}
	minute = (10*d2)+u2;
     2ea:	00a3      	lsls	r3, r4, #2
     2ec:	18e4      	adds	r4, r4, r3
     2ee:	0064      	lsls	r4, r4, #1
     2f0:	4b0a      	ldr	r3, [pc, #40]	; (31c <Get_time+0x16c>)
     2f2:	701c      	strb	r4, [r3, #0]
	
	i2cLcdClear();
     2f4:	4b0a      	ldr	r3, [pc, #40]	; (320 <Get_time+0x170>)
     2f6:	4798      	blx	r3
}
     2f8:	bc04      	pop	{r2}
     2fa:	4690      	mov	r8, r2
     2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	000010b9 	.word	0x000010b9
     304:	20000455 	.word	0x20000455
     308:	00000ff9 	.word	0x00000ff9
     30c:	00000e6d 	.word	0x00000e6d
     310:	00000175 	.word	0x00000175
     314:	42003000 	.word	0x42003000
     318:	20000454 	.word	0x20000454
     31c:	2000041e 	.word	0x2000041e
     320:	00000f5d 	.word	0x00000f5d

00000324 <TC3_Handler>:

void TC3_Handler(void)
{
     324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Print Data to LCD screen
	if(TC3->COUNT16.INTFLAG.bit.MC0)
     326:	4b34      	ldr	r3, [pc, #208]	; (3f8 <TC3_Handler+0xd4>)
     328:	7b9b      	ldrb	r3, [r3, #14]
     32a:	06db      	lsls	r3, r3, #27
     32c:	d411      	bmi.n	352 <TC3_Handler+0x2e>
		i2cLcdprintNum(myTime.hour,0,7);
		i2cLcdprintNum(myTime.minute,0,10);
	}
	
	// Chek for bluetooth commands
	if(TC3->COUNT16.INTFLAG.bit.OVF)
     32e:	4b32      	ldr	r3, [pc, #200]	; (3f8 <TC3_Handler+0xd4>)
     330:	7b9b      	ldrb	r3, [r3, #14]
     332:	07db      	lsls	r3, r3, #31
     334:	d50c      	bpl.n	350 <TC3_Handler+0x2c>
	{
		count++;
     336:	4a31      	ldr	r2, [pc, #196]	; (3fc <TC3_Handler+0xd8>)
     338:	7813      	ldrb	r3, [r2, #0]
     33a:	3301      	adds	r3, #1
     33c:	b2db      	uxtb	r3, r3
     33e:	7013      	strb	r3, [r2, #0]
		if(count==10)
     340:	2b0a      	cmp	r3, #10
     342:	d01e      	beq.n	382 <TC3_Handler+0x5e>
		{
			temp1 =  Si7021_GetTemp();
			RH1   =  Si7021_GetRH();
			count = 0;
		}
		uart_data_rx = uart_read();
     344:	4b2e      	ldr	r3, [pc, #184]	; (400 <TC3_Handler+0xdc>)
     346:	4798      	blx	r3
     348:	4b2e      	ldr	r3, [pc, #184]	; (404 <TC3_Handler+0xe0>)
     34a:	7018      	strb	r0, [r3, #0]
		if(uart_data_rx == 'f')
     34c:	2866      	cmp	r0, #102	; 0x66
     34e:	d024      	beq.n	39a <TC3_Handler+0x76>
				break;
			}			
		}
	}
	
}
     350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i2cLcdprintNum(temp1,0,26);
     352:	4b2d      	ldr	r3, [pc, #180]	; (408 <TC3_Handler+0xe4>)
     354:	7818      	ldrb	r0, [r3, #0]
     356:	221a      	movs	r2, #26
     358:	2100      	movs	r1, #0
     35a:	4c2c      	ldr	r4, [pc, #176]	; (40c <TC3_Handler+0xe8>)
     35c:	47a0      	blx	r4
		i2cLcdprintNum(RH1,0,36);
     35e:	4b2c      	ldr	r3, [pc, #176]	; (410 <TC3_Handler+0xec>)
     360:	7818      	ldrb	r0, [r3, #0]
     362:	2224      	movs	r2, #36	; 0x24
     364:	2100      	movs	r1, #0
     366:	47a0      	blx	r4
		rtc_calendar_get_time(&myTime);
     368:	4d2a      	ldr	r5, [pc, #168]	; (414 <TC3_Handler+0xf0>)
     36a:	0028      	movs	r0, r5
     36c:	4b2a      	ldr	r3, [pc, #168]	; (418 <TC3_Handler+0xf4>)
     36e:	4798      	blx	r3
		i2cLcdprintNum(myTime.hour,0,7);
     370:	78a8      	ldrb	r0, [r5, #2]
     372:	2207      	movs	r2, #7
     374:	2100      	movs	r1, #0
     376:	47a0      	blx	r4
		i2cLcdprintNum(myTime.minute,0,10);
     378:	7868      	ldrb	r0, [r5, #1]
     37a:	220a      	movs	r2, #10
     37c:	2100      	movs	r1, #0
     37e:	47a0      	blx	r4
     380:	e7d5      	b.n	32e <TC3_Handler+0xa>
			temp1 =  Si7021_GetTemp();
     382:	4b26      	ldr	r3, [pc, #152]	; (41c <TC3_Handler+0xf8>)
     384:	4798      	blx	r3
     386:	4b20      	ldr	r3, [pc, #128]	; (408 <TC3_Handler+0xe4>)
     388:	6018      	str	r0, [r3, #0]
			RH1   =  Si7021_GetRH();
     38a:	4b25      	ldr	r3, [pc, #148]	; (420 <TC3_Handler+0xfc>)
     38c:	4798      	blx	r3
     38e:	4b20      	ldr	r3, [pc, #128]	; (410 <TC3_Handler+0xec>)
     390:	7018      	strb	r0, [r3, #0]
			count = 0;
     392:	2200      	movs	r2, #0
     394:	4b19      	ldr	r3, [pc, #100]	; (3fc <TC3_Handler+0xd8>)
     396:	701a      	strb	r2, [r3, #0]
     398:	e7d4      	b.n	344 <TC3_Handler+0x20>
			uart_data_rx = uart_read();
     39a:	4b19      	ldr	r3, [pc, #100]	; (400 <TC3_Handler+0xdc>)
     39c:	4798      	blx	r3
     39e:	4a19      	ldr	r2, [pc, #100]	; (404 <TC3_Handler+0xe0>)
     3a0:	7010      	strb	r0, [r2, #0]
			switch(uart_data_rx){
     3a2:	2831      	cmp	r0, #49	; 0x31
     3a4:	d022      	beq.n	3ec <TC3_Handler+0xc8>
     3a6:	2832      	cmp	r0, #50	; 0x32
     3a8:	d1d2      	bne.n	350 <TC3_Handler+0x2c>
					uart_sendBuffer("Temp: ", 6);
     3aa:	2106      	movs	r1, #6
     3ac:	481d      	ldr	r0, [pc, #116]	; (424 <TC3_Handler+0x100>)
     3ae:	4c1e      	ldr	r4, [pc, #120]	; (428 <TC3_Handler+0x104>)
     3b0:	47a0      	blx	r4
					sprintf(str1, "%d", temp1);
     3b2:	4b15      	ldr	r3, [pc, #84]	; (408 <TC3_Handler+0xe4>)
     3b4:	681a      	ldr	r2, [r3, #0]
     3b6:	4f1d      	ldr	r7, [pc, #116]	; (42c <TC3_Handler+0x108>)
     3b8:	4d1d      	ldr	r5, [pc, #116]	; (430 <TC3_Handler+0x10c>)
     3ba:	0039      	movs	r1, r7
     3bc:	0028      	movs	r0, r5
     3be:	4e1d      	ldr	r6, [pc, #116]	; (434 <TC3_Handler+0x110>)
     3c0:	47b0      	blx	r6
					uart_sendBuffer(str1, 2);
     3c2:	2102      	movs	r1, #2
     3c4:	0028      	movs	r0, r5
     3c6:	47a0      	blx	r4
					uart_sendBuffer(" C\n", 3);
     3c8:	2103      	movs	r1, #3
     3ca:	481b      	ldr	r0, [pc, #108]	; (438 <TC3_Handler+0x114>)
     3cc:	47a0      	blx	r4
					uart_sendBuffer("RH: ", 4);
     3ce:	2104      	movs	r1, #4
     3d0:	481a      	ldr	r0, [pc, #104]	; (43c <TC3_Handler+0x118>)
     3d2:	47a0      	blx	r4
					sprintf(str1, "%d", RH1);
     3d4:	4b0e      	ldr	r3, [pc, #56]	; (410 <TC3_Handler+0xec>)
     3d6:	781a      	ldrb	r2, [r3, #0]
     3d8:	0039      	movs	r1, r7
     3da:	0028      	movs	r0, r5
     3dc:	47b0      	blx	r6
					uart_sendBuffer(str1, 2);
     3de:	2102      	movs	r1, #2
     3e0:	0028      	movs	r0, r5
     3e2:	47a0      	blx	r4
					uart_sendBuffer(" %\n", 3);
     3e4:	2103      	movs	r1, #3
     3e6:	4816      	ldr	r0, [pc, #88]	; (440 <TC3_Handler+0x11c>)
     3e8:	47a0      	blx	r4
}
     3ea:	e7b1      	b.n	350 <TC3_Handler+0x2c>
					uart_sendBuffer("Growbox V1.0\n", 14);
     3ec:	210e      	movs	r1, #14
     3ee:	4815      	ldr	r0, [pc, #84]	; (444 <TC3_Handler+0x120>)
     3f0:	4b0d      	ldr	r3, [pc, #52]	; (428 <TC3_Handler+0x104>)
     3f2:	4798      	blx	r3
				break;
     3f4:	e7ac      	b.n	350 <TC3_Handler+0x2c>
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	42002c00 	.word	0x42002c00
     3fc:	20000310 	.word	0x20000310
     400:	00001561 	.word	0x00001561
     404:	2000041c 	.word	0x2000041c
     408:	20000450 	.word	0x20000450
     40c:	0000115d 	.word	0x0000115d
     410:	20000568 	.word	0x20000568
     414:	20000410 	.word	0x20000410
     418:	00001251 	.word	0x00001251
     41c:	00004ad5 	.word	0x00004ad5
     420:	00004b75 	.word	0x00004b75
     424:	00006d58 	.word	0x00006d58
     428:	00001581 	.word	0x00001581
     42c:	00006d60 	.word	0x00006d60
     430:	200004ac 	.word	0x200004ac
     434:	000064f1 	.word	0x000064f1
     438:	00006d64 	.word	0x00006d64
     43c:	00006d68 	.word	0x00006d68
     440:	00006d70 	.word	0x00006d70
     444:	00006d48 	.word	0x00006d48

00000448 <RTC_Handler>:

void RTC_Handler(void)
{
     448:	b510      	push	{r4, lr}
	//Execute task
	myTask1[currentTask].cb(&myTask1[currentTask]);
     44a:	4c10      	ldr	r4, [pc, #64]	; (48c <RTC_Handler+0x44>)
     44c:	7823      	ldrb	r3, [r4, #0]
     44e:	4a10      	ldr	r2, [pc, #64]	; (490 <RTC_Handler+0x48>)
     450:	009b      	lsls	r3, r3, #2
     452:	18d0      	adds	r0, r2, r3
     454:	589b      	ldr	r3, [r3, r2]
     456:	4798      	blx	r3
	
	//Set next alarm for task
	currentTask++;
     458:	7820      	ldrb	r0, [r4, #0]
     45a:	3001      	adds	r0, #1
     45c:	b2c3      	uxtb	r3, r0
     45e:	7023      	strb	r3, [r4, #0]
	rtc_calendar_set_alarm(&(mySchedule[currentTask]));
     460:	0058      	lsls	r0, r3, #1
     462:	18c0      	adds	r0, r0, r3
     464:	0080      	lsls	r0, r0, #2
     466:	4b0b      	ldr	r3, [pc, #44]	; (494 <RTC_Handler+0x4c>)
     468:	18c0      	adds	r0, r0, r3
     46a:	4b0b      	ldr	r3, [pc, #44]	; (498 <RTC_Handler+0x50>)
     46c:	4798      	blx	r3
	
	//if all task completed: go back to first task
	if (currentTask == NUM_SCHEDULED_TASKS)
     46e:	7823      	ldrb	r3, [r4, #0]
     470:	2b04      	cmp	r3, #4
     472:	d003      	beq.n	47c <RTC_Handler+0x34>
		currentTask = 0;	
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));
	}
	
	//clear interupt alarm0 flag
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM0;
     474:	2201      	movs	r2, #1
     476:	4b09      	ldr	r3, [pc, #36]	; (49c <RTC_Handler+0x54>)
     478:	721a      	strb	r2, [r3, #8]
}
     47a:	bd10      	pop	{r4, pc}
		currentTask = 0;	
     47c:	2200      	movs	r2, #0
     47e:	4b03      	ldr	r3, [pc, #12]	; (48c <RTC_Handler+0x44>)
     480:	701a      	strb	r2, [r3, #0]
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));
     482:	4804      	ldr	r0, [pc, #16]	; (494 <RTC_Handler+0x4c>)
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <RTC_Handler+0x50>)
     486:	4798      	blx	r3
     488:	e7f4      	b.n	474 <RTC_Handler+0x2c>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	2000041d 	.word	0x2000041d
     490:	20000190 	.word	0x20000190
     494:	20000420 	.word	0x20000420
     498:	000012c1 	.word	0x000012c1
     49c:	40001400 	.word	0x40001400

000004a0 <Schedule_config>:

void Schedule_config(){
     4a0:	b510      	push	{r4, lr}
	//Configure your schedule here, Use as many tasks as defined NUM_SCHEDULED_TASKS 
	mySchedule[0].hour = 8;
     4a2:	4b0d      	ldr	r3, [pc, #52]	; (4d8 <Schedule_config+0x38>)
     4a4:	2208      	movs	r2, #8
     4a6:	709a      	strb	r2, [r3, #2]
	mySchedule[0].minute = 0;
     4a8:	2100      	movs	r1, #0
     4aa:	7059      	strb	r1, [r3, #1]
	myTask1[index].cb = cb;
     4ac:	4a0b      	ldr	r2, [pc, #44]	; (4dc <Schedule_config+0x3c>)
     4ae:	480c      	ldr	r0, [pc, #48]	; (4e0 <Schedule_config+0x40>)
     4b0:	6010      	str	r0, [r2, #0]
	event_cb_register(TurnLightOn,0);

	mySchedule[1].hour = 10;
     4b2:	200a      	movs	r0, #10
     4b4:	7398      	strb	r0, [r3, #14]
	mySchedule[1].minute = 0;
     4b6:	7359      	strb	r1, [r3, #13]
	myTask1[index].cb = cb;
     4b8:	480a      	ldr	r0, [pc, #40]	; (4e4 <Schedule_config+0x44>)
     4ba:	6050      	str	r0, [r2, #4]
	event_cb_register(TurnLightOff,1);
	
	mySchedule[2].hour = 13;
     4bc:	200d      	movs	r0, #13
     4be:	7698      	strb	r0, [r3, #26]
	mySchedule[2].minute = 0;
     4c0:	7659      	strb	r1, [r3, #25]
	myTask1[index].cb = cb;
     4c2:	4809      	ldr	r0, [pc, #36]	; (4e8 <Schedule_config+0x48>)
     4c4:	6090      	str	r0, [r2, #8]
	event_cb_register(TurnLightOn1,2);

	mySchedule[3].hour = 16;
     4c6:	2410      	movs	r4, #16
     4c8:	2026      	movs	r0, #38	; 0x26
     4ca:	541c      	strb	r4, [r3, r0]
	mySchedule[3].minute = 0;
     4cc:	3801      	subs	r0, #1
     4ce:	5419      	strb	r1, [r3, r0]
	myTask1[index].cb = cb;
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <Schedule_config+0x4c>)
     4d2:	60d3      	str	r3, [r2, #12]
	event_cb_register(TurnLightOff1,3);
}
     4d4:	bd10      	pop	{r4, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	20000420 	.word	0x20000420
     4dc:	20000190 	.word	0x20000190
     4e0:	00000115 	.word	0x00000115
     4e4:	0000012d 	.word	0x0000012d
     4e8:	00000145 	.word	0x00000145
     4ec:	0000015d 	.word	0x0000015d

000004f0 <configApp>:

void configApp(){
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	46d6      	mov	lr, sl
     4f4:	464f      	mov	r7, r9
     4f6:	4646      	mov	r6, r8
     4f8:	b5c0      	push	{r6, r7, lr}
	// initialize keypad
	keypadInit();
     4fa:	4b59      	ldr	r3, [pc, #356]	; (660 <configApp+0x170>)
     4fc:	4798      	blx	r3
	//get current time
	Get_time();
     4fe:	4b59      	ldr	r3, [pc, #356]	; (664 <configApp+0x174>)
     500:	4798      	blx	r3
	//initialize real time counter
	RTC_init();
     502:	4b59      	ldr	r3, [pc, #356]	; (668 <configApp+0x178>)
     504:	4798      	blx	r3
	//set time
	myTime.hour      = hour;
     506:	4c59      	ldr	r4, [pc, #356]	; (66c <configApp+0x17c>)
     508:	4b59      	ldr	r3, [pc, #356]	; (670 <configApp+0x180>)
     50a:	781b      	ldrb	r3, [r3, #0]
     50c:	70a3      	strb	r3, [r4, #2]
	myTime.minute    = minute;
     50e:	4b59      	ldr	r3, [pc, #356]	; (674 <configApp+0x184>)
     510:	781b      	ldrb	r3, [r3, #0]
     512:	7063      	strb	r3, [r4, #1]
	rtc_calendar_set_time(&myTime);	
     514:	0020      	movs	r0, r4
     516:	4b58      	ldr	r3, [pc, #352]	; (678 <configApp+0x188>)
     518:	4798      	blx	r3
	
	//configure Schedule
	Schedule_config();
     51a:	4b58      	ldr	r3, [pc, #352]	; (67c <configApp+0x18c>)
     51c:	4798      	blx	r3
		
	//Find the first task to execute (next scheduled task scheduled within 1 hour of current time)
	currentTask = 255;
     51e:	22ff      	movs	r2, #255	; 0xff
     520:	4b57      	ldr	r3, [pc, #348]	; (680 <configApp+0x190>)
     522:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = (myTime.hour + 1); i <= 24; i++)
     524:	78a0      	ldrb	r0, [r4, #2]
     526:	1c43      	adds	r3, r0, #1
     528:	b2db      	uxtb	r3, r3
     52a:	2b18      	cmp	r3, #24
     52c:	d829      	bhi.n	582 <configApp+0x92>
	{
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
		{	
			if(mySchedule[j].hour == i)
     52e:	4a55      	ldr	r2, [pc, #340]	; (684 <configApp+0x194>)
     530:	7895      	ldrb	r5, [r2, #2]
     532:	7b97      	ldrb	r7, [r2, #14]
     534:	7e96      	ldrb	r6, [r2, #26]
     536:	2126      	movs	r1, #38	; 0x26
     538:	5c51      	ldrb	r1, [r2, r1]
     53a:	2200      	movs	r2, #0
     53c:	4694      	mov	ip, r2
     53e:	32ff      	adds	r2, #255	; 0xff
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     540:	2402      	movs	r4, #2
     542:	46a2      	mov	sl, r4
     544:	3401      	adds	r4, #1
     546:	46a1      	mov	r9, r4
			if(mySchedule[j].hour == i)
     548:	2400      	movs	r4, #0
     54a:	46a0      	mov	r8, r4
     54c:	e00a      	b.n	564 <configApp+0x74>
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     54e:	2201      	movs	r2, #1
     550:	e002      	b.n	558 <configApp+0x68>
     552:	4652      	mov	r2, sl
     554:	e000      	b.n	558 <configApp+0x68>
			if(mySchedule[j].hour == i)
     556:	4642      	mov	r2, r8
			{
				currentTask = j;
				break;
     558:	2401      	movs	r4, #1
     55a:	46a4      	mov	ip, r4
	for(uint8_t i = (myTime.hour + 1); i <= 24; i++)
     55c:	3301      	adds	r3, #1
     55e:	b2db      	uxtb	r3, r3
     560:	2b19      	cmp	r3, #25
     562:	d00b      	beq.n	57c <configApp+0x8c>
			if(mySchedule[j].hour == i)
     564:	429d      	cmp	r5, r3
     566:	d0f6      	beq.n	556 <configApp+0x66>
			}
			if(currentTask!=255)
     568:	2aff      	cmp	r2, #255	; 0xff
     56a:	d1f7      	bne.n	55c <configApp+0x6c>
			if(mySchedule[j].hour == i)
     56c:	42bb      	cmp	r3, r7
     56e:	d0ee      	beq.n	54e <configApp+0x5e>
     570:	42b3      	cmp	r3, r6
     572:	d0ee      	beq.n	552 <configApp+0x62>
     574:	4299      	cmp	r1, r3
     576:	d1f1      	bne.n	55c <configApp+0x6c>
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     578:	464a      	mov	r2, r9
     57a:	e7ed      	b.n	558 <configApp+0x68>
     57c:	4663      	mov	r3, ip
     57e:	2b00      	cmp	r3, #0
     580:	d110      	bne.n	5a4 <configApp+0xb4>
	{
		for(uint8_t i = 0; i <= myTime.hour; i++)
		{
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
			{
				if(mySchedule[j].hour == i)
     582:	4b40      	ldr	r3, [pc, #256]	; (684 <configApp+0x194>)
     584:	789a      	ldrb	r2, [r3, #2]
     586:	493e      	ldr	r1, [pc, #248]	; (680 <configApp+0x190>)
     588:	7809      	ldrb	r1, [r1, #0]
     58a:	7b9c      	ldrb	r4, [r3, #14]
     58c:	7e9d      	ldrb	r5, [r3, #26]
     58e:	2626      	movs	r6, #38	; 0x26
     590:	5d9f      	ldrb	r7, [r3, r6]
     592:	2300      	movs	r3, #0
     594:	469c      	mov	ip, r3
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     596:	3e24      	subs	r6, #36	; 0x24
     598:	46b2      	mov	sl, r6
     59a:	3601      	adds	r6, #1
     59c:	46b1      	mov	r9, r6
				if(mySchedule[j].hour == i)
     59e:	2600      	movs	r6, #0
     5a0:	46b0      	mov	r8, r6
     5a2:	e00f      	b.n	5c4 <configApp+0xd4>
     5a4:	4b36      	ldr	r3, [pc, #216]	; (680 <configApp+0x190>)
     5a6:	701a      	strb	r2, [r3, #0]
	if(currentTask == 255)
     5a8:	2aff      	cmp	r2, #255	; 0xff
     5aa:	d11a      	bne.n	5e2 <configApp+0xf2>
     5ac:	e7e9      	b.n	582 <configApp+0x92>
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     5ae:	2101      	movs	r1, #1
     5b0:	e002      	b.n	5b8 <configApp+0xc8>
     5b2:	4651      	mov	r1, sl
     5b4:	e000      	b.n	5b8 <configApp+0xc8>
				if(mySchedule[j].hour == i)
     5b6:	4641      	mov	r1, r8
				{
					currentTask = j;
					break;
     5b8:	2601      	movs	r6, #1
     5ba:	46b4      	mov	ip, r6
		for(uint8_t i = 0; i <= myTime.hour; i++)
     5bc:	3301      	adds	r3, #1
     5be:	b2db      	uxtb	r3, r3
     5c0:	4298      	cmp	r0, r3
     5c2:	d30b      	bcc.n	5dc <configApp+0xec>
				if(mySchedule[j].hour == i)
     5c4:	429a      	cmp	r2, r3
     5c6:	d0f6      	beq.n	5b6 <configApp+0xc6>
				}
				if(currentTask!=255)
     5c8:	29ff      	cmp	r1, #255	; 0xff
     5ca:	d1f7      	bne.n	5bc <configApp+0xcc>
				if(mySchedule[j].hour == i)
     5cc:	429c      	cmp	r4, r3
     5ce:	d0ee      	beq.n	5ae <configApp+0xbe>
     5d0:	42ab      	cmp	r3, r5
     5d2:	d0ee      	beq.n	5b2 <configApp+0xc2>
     5d4:	429f      	cmp	r7, r3
     5d6:	d1f1      	bne.n	5bc <configApp+0xcc>
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     5d8:	4649      	mov	r1, r9
     5da:	e7ed      	b.n	5b8 <configApp+0xc8>
     5dc:	4663      	mov	r3, ip
     5de:	2b00      	cmp	r3, #0
     5e0:	d13b      	bne.n	65a <configApp+0x16a>
			}
	}
		
	}	
	//set first task to execute
	rtc_calendar_set_alarm(&(mySchedule[currentTask]));	
     5e2:	4b27      	ldr	r3, [pc, #156]	; (680 <configApp+0x190>)
     5e4:	781b      	ldrb	r3, [r3, #0]
     5e6:	0058      	lsls	r0, r3, #1
     5e8:	18c0      	adds	r0, r0, r3
     5ea:	0080      	lsls	r0, r0, #2
     5ec:	4b25      	ldr	r3, [pc, #148]	; (684 <configApp+0x194>)
     5ee:	18c0      	adds	r0, r0, r3
     5f0:	4b25      	ldr	r3, [pc, #148]	; (688 <configApp+0x198>)
     5f2:	4798      	blx	r3

#undef ENABLE

static inline void timerInit1(void)
{
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
     5f4:	4a25      	ldr	r2, [pc, #148]	; (68c <configApp+0x19c>)
     5f6:	6a11      	ldr	r1, [r2, #32]
     5f8:	2380      	movs	r3, #128	; 0x80
     5fa:	011b      	lsls	r3, r3, #4
     5fc:	430b      	orrs	r3, r1
     5fe:	6213      	str	r3, [r2, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC3_GCLK_ID) |
     600:	4a23      	ldr	r2, [pc, #140]	; (690 <configApp+0x1a0>)
     602:	4b24      	ldr	r3, [pc, #144]	; (694 <configApp+0x1a4>)
     604:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(2); // Take from clock generator 2 (8 MHz)

	TC3->COUNT16.CTRLA.reg =
     606:	4b24      	ldr	r3, [pc, #144]	; (698 <configApp+0x1a8>)
     608:	22a9      	movs	r2, #169	; 0xa9
     60a:	0152      	lsls	r2, r2, #5
     60c:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_MODE(TC_CTRLA_MODE_COUNT16_Val) |
	TC_CTRLA_WAVEGEN(TC_CTRLA_WAVEGEN_MFRQ_Val) |
	TC_CTRLA_PRESCALER(TC_CTRLA_PRESCALER_DIV64_Val) |// Divide clock by 64
	TC_CTRLA_PRESCSYNC(TC_CTRLA_PRESCSYNC_PRESC_Val);
	TC3->COUNT16.COUNT.reg = 0;
     60e:	2200      	movs	r2, #0
     610:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = 2125u; // about 60 times per second
     612:	4a22      	ldr	r2, [pc, #136]	; (69c <configApp+0x1ac>)
     614:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.INTENSET.bit.MC0 = 1;
     616:	7b5a      	ldrb	r2, [r3, #13]
     618:	2110      	movs	r1, #16
     61a:	430a      	orrs	r2, r1
     61c:	735a      	strb	r2, [r3, #13]
	TC3->COUNT16.INTENSET.bit.OVF = 1;
     61e:	7b5a      	ldrb	r2, [r3, #13]
     620:	2101      	movs	r1, #1
     622:	430a      	orrs	r2, r1
     624:	735a      	strb	r2, [r3, #13]
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     626:	881a      	ldrh	r2, [r3, #0]
     628:	2102      	movs	r1, #2
     62a:	430a      	orrs	r2, r1
     62c:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     62e:	4b1c      	ldr	r3, [pc, #112]	; (6a0 <configApp+0x1b0>)
     630:	2180      	movs	r1, #128	; 0x80
     632:	02c9      	lsls	r1, r1, #11
     634:	22c0      	movs	r2, #192	; 0xc0
     636:	0052      	lsls	r2, r2, #1
     638:	5099      	str	r1, [r3, r2]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     63a:	20c4      	movs	r0, #196	; 0xc4
     63c:	0080      	lsls	r0, r0, #2
     63e:	581a      	ldr	r2, [r3, r0]
     640:	4c18      	ldr	r4, [pc, #96]	; (6a4 <configApp+0x1b4>)
     642:	4022      	ands	r2, r4
     644:	501a      	str	r2, [r3, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     646:	6019      	str	r1, [r3, #0]
	
	//initialize timer
	timerInit1();
	//Display temp:-- RH:--
	i2cLcdTemp();
     648:	4b17      	ldr	r3, [pc, #92]	; (6a8 <configApp+0x1b8>)
     64a:	4798      	blx	r3
	i2cLcdRH();	
     64c:	4b17      	ldr	r3, [pc, #92]	; (6ac <configApp+0x1bc>)
     64e:	4798      	blx	r3
     650:	bc1c      	pop	{r2, r3, r4}
     652:	4690      	mov	r8, r2
     654:	4699      	mov	r9, r3
     656:	46a2      	mov	sl, r4
     658:	bdf0      	pop	{r4, r5, r6, r7, pc}
     65a:	4b09      	ldr	r3, [pc, #36]	; (680 <configApp+0x190>)
     65c:	7019      	strb	r1, [r3, #0]
     65e:	e7c0      	b.n	5e2 <configApp+0xf2>
     660:	00000ddd 	.word	0x00000ddd
     664:	000001b1 	.word	0x000001b1
     668:	000011a1 	.word	0x000011a1
     66c:	20000410 	.word	0x20000410
     670:	20000454 	.word	0x20000454
     674:	2000041e 	.word	0x2000041e
     678:	000012a1 	.word	0x000012a1
     67c:	000004a1 	.word	0x000004a1
     680:	2000041d 	.word	0x2000041d
     684:	20000420 	.word	0x20000420
     688:	000012c1 	.word	0x000012c1
     68c:	40000400 	.word	0x40000400
     690:	0000421b 	.word	0x0000421b
     694:	40000c00 	.word	0x40000c00
     698:	42002c00 	.word	0x42002c00
     69c:	0000084d 	.word	0x0000084d
     6a0:	e000e100 	.word	0xe000e100
     6a4:	ff00ffff 	.word	0xff00ffff
     6a8:	000010f5 	.word	0x000010f5
     6ac:	0000112d 	.word	0x0000112d

000006b0 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     6b0:	4a02      	ldr	r2, [pc, #8]	; (6bc <udi_cdc_comm_disable+0xc>)
     6b2:	7813      	ldrb	r3, [r2, #0]
     6b4:	3b01      	subs	r3, #1
     6b6:	b2db      	uxtb	r3, r3
     6b8:	7013      	strb	r3, [r2, #0]
}
     6ba:	4770      	bx	lr
     6bc:	200001ab 	.word	0x200001ab

000006c0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     6c0:	2000      	movs	r0, #0
     6c2:	4770      	bx	lr

000006c4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     6c4:	2000      	movs	r0, #0
     6c6:	4770      	bx	lr

000006c8 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
     6c8:	4770      	bx	lr
	...

000006cc <udi_cdc_comm_enable>:
{
     6cc:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
     6ce:	2200      	movs	r2, #0
     6d0:	4b10      	ldr	r3, [pc, #64]	; (714 <udi_cdc_comm_enable+0x48>)
     6d2:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     6d4:	2100      	movs	r1, #0
     6d6:	4b10      	ldr	r3, [pc, #64]	; (718 <udi_cdc_comm_enable+0x4c>)
     6d8:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     6da:	4b10      	ldr	r3, [pc, #64]	; (71c <udi_cdc_comm_enable+0x50>)
     6dc:	20a1      	movs	r0, #161	; 0xa1
     6de:	7018      	strb	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     6e0:	3881      	subs	r0, #129	; 0x81
     6e2:	7058      	strb	r0, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     6e4:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     6e6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     6e8:	381e      	subs	r0, #30
     6ea:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     6ec:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     6ee:	4b0c      	ldr	r3, [pc, #48]	; (720 <udi_cdc_comm_enable+0x54>)
     6f0:	22e1      	movs	r2, #225	; 0xe1
     6f2:	0252      	lsls	r2, r2, #9
     6f4:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     6f6:	7119      	strb	r1, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     6f8:	7159      	strb	r1, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     6fa:	2208      	movs	r2, #8
     6fc:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
     6fe:	2000      	movs	r0, #0
     700:	4b08      	ldr	r3, [pc, #32]	; (724 <udi_cdc_comm_enable+0x58>)
     702:	4798      	blx	r3
     704:	2800      	cmp	r0, #0
     706:	d004      	beq.n	712 <udi_cdc_comm_enable+0x46>
	udi_cdc_nb_comm_enabled++;
     708:	4a02      	ldr	r2, [pc, #8]	; (714 <udi_cdc_comm_enable+0x48>)
     70a:	7813      	ldrb	r3, [r2, #0]
     70c:	3301      	adds	r3, #1
     70e:	b2db      	uxtb	r3, r3
     710:	7013      	strb	r3, [r2, #0]
}
     712:	bd10      	pop	{r4, pc}
     714:	200001ab 	.word	0x200001ab
     718:	20000240 	.word	0x20000240
     71c:	200002d8 	.word	0x200002d8
     720:	200001a4 	.word	0x200001a4
     724:	00004869 	.word	0x00004869

00000728 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     728:	b570      	push	{r4, r5, r6, lr}
     72a:	b084      	sub	sp, #16

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     72c:	4b46      	ldr	r3, [pc, #280]	; (848 <udi_cdc_tx_send+0x120>)
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	2b00      	cmp	r3, #0
     732:	d001      	beq.n	738 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     734:	b004      	add	sp, #16
     736:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
     738:	4b44      	ldr	r3, [pc, #272]	; (84c <udi_cdc_tx_send+0x124>)
     73a:	4798      	blx	r3
     73c:	2800      	cmp	r0, #0
     73e:	d043      	beq.n	7c8 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     740:	4b43      	ldr	r3, [pc, #268]	; (850 <udi_cdc_tx_send+0x128>)
     742:	881c      	ldrh	r4, [r3, #0]
     744:	4b43      	ldr	r3, [pc, #268]	; (854 <udi_cdc_tx_send+0x12c>)
     746:	4798      	blx	r3
     748:	4284      	cmp	r4, r0
     74a:	d0f3      	beq.n	734 <udi_cdc_tx_send+0xc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     74c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     750:	425a      	negs	r2, r3
     752:	4153      	adcs	r3, r2
     754:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     756:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     758:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     75c:	2200      	movs	r2, #0
     75e:	4b3e      	ldr	r3, [pc, #248]	; (858 <udi_cdc_tx_send+0x130>)
     760:	701a      	strb	r2, [r3, #0]
	return flags;
     762:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     764:	4b3d      	ldr	r3, [pc, #244]	; (85c <udi_cdc_tx_send+0x134>)
     766:	781c      	ldrb	r4, [r3, #0]
     768:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     76a:	0062      	lsls	r2, r4, #1
     76c:	4b3c      	ldr	r3, [pc, #240]	; (860 <udi_cdc_tx_send+0x138>)
     76e:	5ad3      	ldrh	r3, [r2, r3]
     770:	2b00      	cmp	r3, #0
     772:	d030      	beq.n	7d6 <udi_cdc_tx_send+0xae>
	sof_zlp_counter = 0;
     774:	2200      	movs	r2, #0
     776:	4b3b      	ldr	r3, [pc, #236]	; (864 <udi_cdc_tx_send+0x13c>)
     778:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     77a:	4b3b      	ldr	r3, [pc, #236]	; (868 <udi_cdc_tx_send+0x140>)
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	2b00      	cmp	r3, #0
     780:	d148      	bne.n	814 <udi_cdc_tx_send+0xec>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     782:	4263      	negs	r3, r4
     784:	4163      	adcs	r3, r4
     786:	b2db      	uxtb	r3, r3
     788:	4a34      	ldr	r2, [pc, #208]	; (85c <udi_cdc_tx_send+0x134>)
     78a:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     78c:	2201      	movs	r2, #1
     78e:	4b2e      	ldr	r3, [pc, #184]	; (848 <udi_cdc_tx_send+0x120>)
     790:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     792:	2d00      	cmp	r5, #0
     794:	d004      	beq.n	7a0 <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
     796:	4b30      	ldr	r3, [pc, #192]	; (858 <udi_cdc_tx_send+0x130>)
     798:	701a      	strb	r2, [r3, #0]
     79a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     79e:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     7a0:	0026      	movs	r6, r4
     7a2:	0063      	lsls	r3, r4, #1
     7a4:	4a2e      	ldr	r2, [pc, #184]	; (860 <udi_cdc_tx_send+0x138>)
     7a6:	5a9b      	ldrh	r3, [r3, r2]
     7a8:	001d      	movs	r5, r3
     7aa:	3d40      	subs	r5, #64	; 0x40
     7ac:	1e6a      	subs	r2, r5, #1
     7ae:	4195      	sbcs	r5, r2
     7b0:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
     7b2:	2b40      	cmp	r3, #64	; 0x40
     7b4:	d037      	beq.n	826 <udi_cdc_tx_send+0xfe>
		if (udd_is_high_speed()) {
     7b6:	4b25      	ldr	r3, [pc, #148]	; (84c <udi_cdc_tx_send+0x124>)
     7b8:	4798      	blx	r3
     7ba:	2800      	cmp	r0, #0
     7bc:	d02e      	beq.n	81c <udi_cdc_tx_send+0xf4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     7be:	4b25      	ldr	r3, [pc, #148]	; (854 <udi_cdc_tx_send+0x12c>)
     7c0:	4798      	blx	r3
     7c2:	4b23      	ldr	r3, [pc, #140]	; (850 <udi_cdc_tx_send+0x128>)
     7c4:	8018      	strh	r0, [r3, #0]
     7c6:	e031      	b.n	82c <udi_cdc_tx_send+0x104>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     7c8:	4b21      	ldr	r3, [pc, #132]	; (850 <udi_cdc_tx_send+0x128>)
     7ca:	881c      	ldrh	r4, [r3, #0]
     7cc:	4b27      	ldr	r3, [pc, #156]	; (86c <udi_cdc_tx_send+0x144>)
     7ce:	4798      	blx	r3
     7d0:	4284      	cmp	r4, r0
     7d2:	d1bb      	bne.n	74c <udi_cdc_tx_send+0x24>
     7d4:	e7ae      	b.n	734 <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
     7d6:	4a23      	ldr	r2, [pc, #140]	; (864 <udi_cdc_tx_send+0x13c>)
     7d8:	8813      	ldrh	r3, [r2, #0]
     7da:	3301      	adds	r3, #1
     7dc:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     7de:	4b1b      	ldr	r3, [pc, #108]	; (84c <udi_cdc_tx_send+0x124>)
     7e0:	4798      	blx	r3
     7e2:	2800      	cmp	r0, #0
     7e4:	d103      	bne.n	7ee <udi_cdc_tx_send+0xc6>
     7e6:	4b1f      	ldr	r3, [pc, #124]	; (864 <udi_cdc_tx_send+0x13c>)
     7e8:	881b      	ldrh	r3, [r3, #0]
     7ea:	2b63      	cmp	r3, #99	; 0x63
     7ec:	d908      	bls.n	800 <udi_cdc_tx_send+0xd8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     7ee:	4b17      	ldr	r3, [pc, #92]	; (84c <udi_cdc_tx_send+0x124>)
     7f0:	4798      	blx	r3
     7f2:	2800      	cmp	r0, #0
     7f4:	d0be      	beq.n	774 <udi_cdc_tx_send+0x4c>
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <udi_cdc_tx_send+0x148>)
     7f8:	4a1a      	ldr	r2, [pc, #104]	; (864 <udi_cdc_tx_send+0x13c>)
     7fa:	8812      	ldrh	r2, [r2, #0]
     7fc:	429a      	cmp	r2, r3
     7fe:	d8b9      	bhi.n	774 <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
     800:	2d00      	cmp	r5, #0
     802:	d100      	bne.n	806 <udi_cdc_tx_send+0xde>
     804:	e796      	b.n	734 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
     806:	2201      	movs	r2, #1
     808:	4b13      	ldr	r3, [pc, #76]	; (858 <udi_cdc_tx_send+0x130>)
     80a:	701a      	strb	r2, [r3, #0]
     80c:	f3bf 8f5f 	dmb	sy
     810:	b662      	cpsie	i
     812:	e78f      	b.n	734 <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     814:	4262      	negs	r2, r4
     816:	4154      	adcs	r4, r2
     818:	b2e4      	uxtb	r4, r4
     81a:	e7b7      	b.n	78c <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     81c:	4b13      	ldr	r3, [pc, #76]	; (86c <udi_cdc_tx_send+0x144>)
     81e:	4798      	blx	r3
     820:	4b0b      	ldr	r3, [pc, #44]	; (850 <udi_cdc_tx_send+0x128>)
     822:	8018      	strh	r0, [r3, #0]
     824:	e002      	b.n	82c <udi_cdc_tx_send+0x104>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     826:	2200      	movs	r2, #0
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <udi_cdc_tx_send+0x128>)
     82a:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     82c:	0076      	lsls	r6, r6, #1
	udd_ep_run( ep,
     82e:	4b0c      	ldr	r3, [pc, #48]	; (860 <udi_cdc_tx_send+0x138>)
     830:	5af3      	ldrh	r3, [r6, r3]
			udi_cdc_tx_buf[port][buf_sel_trans],
     832:	01a4      	lsls	r4, r4, #6
     834:	4a0f      	ldr	r2, [pc, #60]	; (874 <udi_cdc_tx_send+0x14c>)
     836:	1914      	adds	r4, r2, r4
	udd_ep_run( ep,
     838:	4a0f      	ldr	r2, [pc, #60]	; (878 <udi_cdc_tx_send+0x150>)
     83a:	9200      	str	r2, [sp, #0]
     83c:	0022      	movs	r2, r4
     83e:	0029      	movs	r1, r5
     840:	2081      	movs	r0, #129	; 0x81
     842:	4c0e      	ldr	r4, [pc, #56]	; (87c <udi_cdc_tx_send+0x154>)
     844:	47a0      	blx	r4
     846:	e775      	b.n	734 <udi_cdc_tx_send+0xc>
     848:	200002d4 	.word	0x200002d4
     84c:	00003029 	.word	0x00003029
     850:	200002d0 	.word	0x200002d0
     854:	0000303d 	.word	0x0000303d
     858:	2000010c 	.word	0x2000010c
     85c:	200002cc 	.word	0x200002cc
     860:	200002c8 	.word	0x200002c8
     864:	200001a0 	.word	0x200001a0
     868:	20000244 	.word	0x20000244
     86c:	0000302d 	.word	0x0000302d
     870:	0000031f 	.word	0x0000031f
     874:	20000248 	.word	0x20000248
     878:	00000881 	.word	0x00000881
     87c:	00003335 	.word	0x00003335

00000880 <udi_cdc_data_sent>:
{
     880:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     882:	2800      	cmp	r0, #0
     884:	d000      	beq.n	888 <udi_cdc_data_sent+0x8>
}
     886:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     888:	4b07      	ldr	r3, [pc, #28]	; (8a8 <udi_cdc_data_sent+0x28>)
     88a:	781b      	ldrb	r3, [r3, #0]
     88c:	425a      	negs	r2, r3
     88e:	4153      	adcs	r3, r2
     890:	005b      	lsls	r3, r3, #1
     892:	2200      	movs	r2, #0
     894:	4905      	ldr	r1, [pc, #20]	; (8ac <udi_cdc_data_sent+0x2c>)
     896:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     898:	4b05      	ldr	r3, [pc, #20]	; (8b0 <udi_cdc_data_sent+0x30>)
     89a:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     89c:	4b05      	ldr	r3, [pc, #20]	; (8b4 <udi_cdc_data_sent+0x34>)
     89e:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <udi_cdc_data_sent+0x38>)
     8a2:	4798      	blx	r3
     8a4:	e7ef      	b.n	886 <udi_cdc_data_sent+0x6>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	200002cc 	.word	0x200002cc
     8ac:	200002c8 	.word	0x200002c8
     8b0:	20000244 	.word	0x20000244
     8b4:	200002d4 	.word	0x200002d4
     8b8:	00000729 	.word	0x00000729

000008bc <udi_cdc_data_sof_notify>:
{
     8bc:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
     8be:	2000      	movs	r0, #0
     8c0:	4b01      	ldr	r3, [pc, #4]	; (8c8 <udi_cdc_data_sof_notify+0xc>)
     8c2:	4798      	blx	r3
}
     8c4:	bd10      	pop	{r4, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000729 	.word	0x00000729

000008cc <udi_cdc_data_disable>:
{
     8cc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     8ce:	4a06      	ldr	r2, [pc, #24]	; (8e8 <udi_cdc_data_disable+0x1c>)
     8d0:	7813      	ldrb	r3, [r2, #0]
     8d2:	3b01      	subs	r3, #1
     8d4:	b2db      	uxtb	r3, r3
     8d6:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     8d8:	7810      	ldrb	r0, [r2, #0]
     8da:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     8dc:	4b03      	ldr	r3, [pc, #12]	; (8ec <udi_cdc_data_disable+0x20>)
     8de:	4798      	blx	r3
	udi_cdc_data_running = false;
     8e0:	2200      	movs	r2, #0
     8e2:	4b03      	ldr	r3, [pc, #12]	; (8f0 <udi_cdc_data_disable+0x24>)
     8e4:	701a      	strb	r2, [r3, #0]
}
     8e6:	bd10      	pop	{r4, pc}
     8e8:	200001ac 	.word	0x200001ac
     8ec:	00004879 	.word	0x00004879
     8f0:	200001a2 	.word	0x200001a2

000008f4 <udi_cdc_comm_setup>:
{
     8f4:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     8f6:	4b20      	ldr	r3, [pc, #128]	; (978 <udi_cdc_comm_setup+0x84>)
     8f8:	781a      	ldrb	r2, [r3, #0]
     8fa:	b253      	sxtb	r3, r2
     8fc:	2b00      	cmp	r3, #0
     8fe:	db05      	blt.n	90c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     900:	2360      	movs	r3, #96	; 0x60
     902:	4013      	ands	r3, r2
	return false;  // request Not supported
     904:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     906:	2b20      	cmp	r3, #32
     908:	d014      	beq.n	934 <udi_cdc_comm_setup+0x40>
}
     90a:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     90c:	2360      	movs	r3, #96	; 0x60
     90e:	4013      	ands	r3, r2
	return false;  // request Not supported
     910:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     912:	2b20      	cmp	r3, #32
     914:	d1f9      	bne.n	90a <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     916:	4b18      	ldr	r3, [pc, #96]	; (978 <udi_cdc_comm_setup+0x84>)
     918:	785b      	ldrb	r3, [r3, #1]
     91a:	2b21      	cmp	r3, #33	; 0x21
     91c:	d129      	bne.n	972 <udi_cdc_comm_setup+0x7e>
						udd_g_ctrlreq.req.wLength)
     91e:	4b16      	ldr	r3, [pc, #88]	; (978 <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     920:	88db      	ldrh	r3, [r3, #6]
     922:	2b07      	cmp	r3, #7
     924:	d1f1      	bne.n	90a <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     926:	4b14      	ldr	r3, [pc, #80]	; (978 <udi_cdc_comm_setup+0x84>)
     928:	4a14      	ldr	r2, [pc, #80]	; (97c <udi_cdc_comm_setup+0x88>)
     92a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     92c:	2207      	movs	r2, #7
     92e:	819a      	strh	r2, [r3, #12]
				return true;
     930:	3001      	adds	r0, #1
     932:	e7ea      	b.n	90a <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     934:	4b10      	ldr	r3, [pc, #64]	; (978 <udi_cdc_comm_setup+0x84>)
     936:	785b      	ldrb	r3, [r3, #1]
     938:	2b20      	cmp	r3, #32
     93a:	d003      	beq.n	944 <udi_cdc_comm_setup+0x50>
     93c:	2b22      	cmp	r3, #34	; 0x22
     93e:	d00f      	beq.n	960 <udi_cdc_comm_setup+0x6c>
	return false;  // request Not supported
     940:	2000      	movs	r0, #0
     942:	e7e2      	b.n	90a <udi_cdc_comm_setup+0x16>
						udd_g_ctrlreq.req.wLength)
     944:	4b0c      	ldr	r3, [pc, #48]	; (978 <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     946:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     948:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     94a:	2b07      	cmp	r3, #7
     94c:	d1dd      	bne.n	90a <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     94e:	4b0a      	ldr	r3, [pc, #40]	; (978 <udi_cdc_comm_setup+0x84>)
     950:	4a0b      	ldr	r2, [pc, #44]	; (980 <udi_cdc_comm_setup+0x8c>)
     952:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
     954:	4a09      	ldr	r2, [pc, #36]	; (97c <udi_cdc_comm_setup+0x88>)
     956:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     958:	2207      	movs	r2, #7
     95a:	819a      	strh	r2, [r3, #12]
				return true;
     95c:	3001      	adds	r0, #1
     95e:	e7d4      	b.n	90a <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     960:	4b05      	ldr	r3, [pc, #20]	; (978 <udi_cdc_comm_setup+0x84>)
     962:	885b      	ldrh	r3, [r3, #2]
     964:	2101      	movs	r1, #1
     966:	4019      	ands	r1, r3
     968:	2000      	movs	r0, #0
     96a:	4b06      	ldr	r3, [pc, #24]	; (984 <udi_cdc_comm_setup+0x90>)
     96c:	4798      	blx	r3
				return true;
     96e:	2001      	movs	r0, #1
     970:	e7cb      	b.n	90a <udi_cdc_comm_setup+0x16>
	return false;  // request Not supported
     972:	2000      	movs	r0, #0
     974:	e7c9      	b.n	90a <udi_cdc_comm_setup+0x16>
     976:	46c0      	nop			; (mov r8, r8)
     978:	200007e0 	.word	0x200007e0
     97c:	200001a4 	.word	0x200001a4
     980:	000006c9 	.word	0x000006c9
     984:	00004885 	.word	0x00004885

00000988 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     988:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     98a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     98e:	425a      	negs	r2, r3
     990:	4153      	adcs	r3, r2
     992:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     994:	b672      	cpsid	i
     996:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     99a:	2200      	movs	r2, #0
     99c:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <udi_cdc_multi_get_nb_received_data+0x40>)
     99e:	701a      	strb	r2, [r3, #0]
	return flags;
     9a0:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     9a2:	4b0a      	ldr	r3, [pc, #40]	; (9cc <udi_cdc_multi_get_nb_received_data+0x44>)
     9a4:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     9a6:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <udi_cdc_multi_get_nb_received_data+0x48>)
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	005b      	lsls	r3, r3, #1
     9ac:	4809      	ldr	r0, [pc, #36]	; (9d4 <udi_cdc_multi_get_nb_received_data+0x4c>)
     9ae:	5a18      	ldrh	r0, [r3, r0]
     9b0:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
     9b2:	2a00      	cmp	r2, #0
     9b4:	d005      	beq.n	9c2 <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     9b6:	2201      	movs	r2, #1
     9b8:	4b03      	ldr	r3, [pc, #12]	; (9c8 <udi_cdc_multi_get_nb_received_data+0x40>)
     9ba:	701a      	strb	r2, [r3, #0]
     9bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9c0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     9c2:	b002      	add	sp, #8
     9c4:	4770      	bx	lr
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	2000010c 	.word	0x2000010c
     9cc:	20000238 	.word	0x20000238
     9d0:	20000234 	.word	0x20000234
     9d4:	20000230 	.word	0x20000230

000009d8 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     9d8:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <udi_cdc_multi_is_rx_ready+0x10>)
     9dc:	4798      	blx	r3
     9de:	1e43      	subs	r3, r0, #1
     9e0:	4198      	sbcs	r0, r3
     9e2:	b2c0      	uxtb	r0, r0
}
     9e4:	bd10      	pop	{r4, pc}
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	00000989 	.word	0x00000989

000009ec <udi_cdc_rx_start>:
{
     9ec:	b510      	push	{r4, lr}
     9ee:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9f0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9f4:	425a      	negs	r2, r3
     9f6:	4153      	adcs	r3, r2
     9f8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     9fa:	b672      	cpsid	i
     9fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a00:	2200      	movs	r2, #0
     a02:	4b1f      	ldr	r3, [pc, #124]	; (a80 <udi_cdc_rx_start+0x94>)
     a04:	701a      	strb	r2, [r3, #0]
	return flags;
     a06:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     a08:	4a1e      	ldr	r2, [pc, #120]	; (a84 <udi_cdc_rx_start+0x98>)
     a0a:	7814      	ldrb	r4, [r2, #0]
     a0c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     a0e:	4a1e      	ldr	r2, [pc, #120]	; (a88 <udi_cdc_rx_start+0x9c>)
     a10:	7812      	ldrb	r2, [r2, #0]
     a12:	2a00      	cmp	r2, #0
     a14:	d107      	bne.n	a26 <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     a16:	4a1d      	ldr	r2, [pc, #116]	; (a8c <udi_cdc_rx_start+0xa0>)
     a18:	8812      	ldrh	r2, [r2, #0]
     a1a:	0061      	lsls	r1, r4, #1
     a1c:	481c      	ldr	r0, [pc, #112]	; (a90 <udi_cdc_rx_start+0xa4>)
     a1e:	5a09      	ldrh	r1, [r1, r0]
     a20:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     a22:	428a      	cmp	r2, r1
     a24:	d20a      	bcs.n	a3c <udi_cdc_rx_start+0x50>
		return false;
     a26:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     a28:	2b00      	cmp	r3, #0
     a2a:	d005      	beq.n	a38 <udi_cdc_rx_start+0x4c>
		cpu_irq_enable();
     a2c:	2201      	movs	r2, #1
     a2e:	4b14      	ldr	r3, [pc, #80]	; (a80 <udi_cdc_rx_start+0x94>)
     a30:	701a      	strb	r2, [r3, #0]
     a32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a36:	b662      	cpsie	i
}
     a38:	b004      	add	sp, #16
     a3a:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
     a3c:	2100      	movs	r1, #0
     a3e:	4a13      	ldr	r2, [pc, #76]	; (a8c <udi_cdc_rx_start+0xa0>)
     a40:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     a42:	4262      	negs	r2, r4
     a44:	4162      	adcs	r2, r4
     a46:	b2d2      	uxtb	r2, r2
     a48:	490e      	ldr	r1, [pc, #56]	; (a84 <udi_cdc_rx_start+0x98>)
     a4a:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     a4c:	2101      	movs	r1, #1
     a4e:	4a0e      	ldr	r2, [pc, #56]	; (a88 <udi_cdc_rx_start+0x9c>)
     a50:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     a52:	2b00      	cmp	r3, #0
     a54:	d005      	beq.n	a62 <udi_cdc_rx_start+0x76>
		cpu_irq_enable();
     a56:	2201      	movs	r2, #1
     a58:	4b09      	ldr	r3, [pc, #36]	; (a80 <udi_cdc_rx_start+0x94>)
     a5a:	701a      	strb	r2, [r3, #0]
     a5c:	f3bf 8f5f 	dmb	sy
     a60:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     a62:	2000      	movs	r0, #0
     a64:	4b0b      	ldr	r3, [pc, #44]	; (a94 <udi_cdc_rx_start+0xa8>)
     a66:	4798      	blx	r3
			udi_cdc_rx_buf[port][buf_sel_trans],
     a68:	01a4      	lsls	r4, r4, #6
     a6a:	4a0b      	ldr	r2, [pc, #44]	; (a98 <udi_cdc_rx_start+0xac>)
     a6c:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     a6e:	4b0b      	ldr	r3, [pc, #44]	; (a9c <udi_cdc_rx_start+0xb0>)
     a70:	9300      	str	r3, [sp, #0]
     a72:	2340      	movs	r3, #64	; 0x40
     a74:	2101      	movs	r1, #1
     a76:	2002      	movs	r0, #2
     a78:	4c09      	ldr	r4, [pc, #36]	; (aa0 <udi_cdc_rx_start+0xb4>)
     a7a:	47a0      	blx	r4
     a7c:	e7dc      	b.n	a38 <udi_cdc_rx_start+0x4c>
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	2000010c 	.word	0x2000010c
     a84:	20000234 	.word	0x20000234
     a88:	2000023c 	.word	0x2000023c
     a8c:	20000238 	.word	0x20000238
     a90:	20000230 	.word	0x20000230
     a94:	000009d9 	.word	0x000009d9
     a98:	200001b0 	.word	0x200001b0
     a9c:	00000b35 	.word	0x00000b35
     aa0:	00003335 	.word	0x00003335

00000aa4 <udi_cdc_data_enable>:
{
     aa4:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
     aa6:	2400      	movs	r4, #0
     aa8:	4b15      	ldr	r3, [pc, #84]	; (b00 <udi_cdc_data_enable+0x5c>)
     aaa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     aac:	4b15      	ldr	r3, [pc, #84]	; (b04 <udi_cdc_data_enable+0x60>)
     aae:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     ab0:	4b15      	ldr	r3, [pc, #84]	; (b08 <udi_cdc_data_enable+0x64>)
     ab2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     ab4:	4b15      	ldr	r3, [pc, #84]	; (b0c <udi_cdc_data_enable+0x68>)
     ab6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     ab8:	4b15      	ldr	r3, [pc, #84]	; (b10 <udi_cdc_data_enable+0x6c>)
     aba:	2500      	movs	r5, #0
     abc:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     abe:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     ac0:	4b14      	ldr	r3, [pc, #80]	; (b14 <udi_cdc_data_enable+0x70>)
     ac2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     ac4:	2000      	movs	r0, #0
     ac6:	4b14      	ldr	r3, [pc, #80]	; (b18 <udi_cdc_data_enable+0x74>)
     ac8:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     aca:	4b14      	ldr	r3, [pc, #80]	; (b1c <udi_cdc_data_enable+0x78>)
     acc:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     ace:	4b14      	ldr	r3, [pc, #80]	; (b20 <udi_cdc_data_enable+0x7c>)
     ad0:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     ad2:	4b14      	ldr	r3, [pc, #80]	; (b24 <udi_cdc_data_enable+0x80>)
     ad4:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     ad6:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     ad8:	4b13      	ldr	r3, [pc, #76]	; (b28 <udi_cdc_data_enable+0x84>)
     ada:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     adc:	2000      	movs	r0, #0
     ade:	4b13      	ldr	r3, [pc, #76]	; (b2c <udi_cdc_data_enable+0x88>)
     ae0:	4798      	blx	r3
     ae2:	2800      	cmp	r0, #0
     ae4:	d007      	beq.n	af6 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
     ae6:	4a06      	ldr	r2, [pc, #24]	; (b00 <udi_cdc_data_enable+0x5c>)
     ae8:	7813      	ldrb	r3, [r2, #0]
     aea:	3301      	adds	r3, #1
     aec:	b2db      	uxtb	r3, r3
     aee:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     af0:	7813      	ldrb	r3, [r2, #0]
     af2:	2b01      	cmp	r3, #1
     af4:	d000      	beq.n	af8 <udi_cdc_data_enable+0x54>
}
     af6:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
     af8:	2201      	movs	r2, #1
     afa:	4b0d      	ldr	r3, [pc, #52]	; (b30 <udi_cdc_data_enable+0x8c>)
     afc:	701a      	strb	r2, [r3, #0]
     afe:	e7fa      	b.n	af6 <udi_cdc_data_enable+0x52>
     b00:	200001ac 	.word	0x200001ac
     b04:	200002d4 	.word	0x200002d4
     b08:	20000244 	.word	0x20000244
     b0c:	200002cc 	.word	0x200002cc
     b10:	200002c8 	.word	0x200002c8
     b14:	200002d0 	.word	0x200002d0
     b18:	00000729 	.word	0x00000729
     b1c:	2000023c 	.word	0x2000023c
     b20:	20000234 	.word	0x20000234
     b24:	20000230 	.word	0x20000230
     b28:	20000238 	.word	0x20000238
     b2c:	000009ed 	.word	0x000009ed
     b30:	200001a2 	.word	0x200001a2

00000b34 <udi_cdc_data_received>:
{
     b34:	b510      	push	{r4, lr}
     b36:	b082      	sub	sp, #8
     b38:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
     b3a:	2800      	cmp	r0, #0
     b3c:	d110      	bne.n	b60 <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     b3e:	4b0f      	ldr	r3, [pc, #60]	; (b7c <udi_cdc_data_received+0x48>)
     b40:	781a      	ldrb	r2, [r3, #0]
     b42:	4253      	negs	r3, r2
     b44:	415a      	adcs	r2, r3
     b46:	b2d2      	uxtb	r2, r2
	if (!n) {
     b48:	2900      	cmp	r1, #0
     b4a:	d00b      	beq.n	b64 <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     b4c:	b289      	uxth	r1, r1
     b4e:	0052      	lsls	r2, r2, #1
     b50:	4b0b      	ldr	r3, [pc, #44]	; (b80 <udi_cdc_data_received+0x4c>)
     b52:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     b54:	2200      	movs	r2, #0
     b56:	4b0b      	ldr	r3, [pc, #44]	; (b84 <udi_cdc_data_received+0x50>)
     b58:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     b5a:	2000      	movs	r0, #0
     b5c:	4b0a      	ldr	r3, [pc, #40]	; (b88 <udi_cdc_data_received+0x54>)
     b5e:	4798      	blx	r3
}
     b60:	b002      	add	sp, #8
     b62:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     b64:	0192      	lsls	r2, r2, #6
     b66:	4b09      	ldr	r3, [pc, #36]	; (b8c <udi_cdc_data_received+0x58>)
     b68:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     b6a:	4b09      	ldr	r3, [pc, #36]	; (b90 <udi_cdc_data_received+0x5c>)
     b6c:	9300      	str	r3, [sp, #0]
     b6e:	2340      	movs	r3, #64	; 0x40
     b70:	3101      	adds	r1, #1
     b72:	0020      	movs	r0, r4
     b74:	4c07      	ldr	r4, [pc, #28]	; (b94 <udi_cdc_data_received+0x60>)
     b76:	47a0      	blx	r4
		return;
     b78:	e7f2      	b.n	b60 <udi_cdc_data_received+0x2c>
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	20000234 	.word	0x20000234
     b80:	20000230 	.word	0x20000230
     b84:	2000023c 	.word	0x2000023c
     b88:	000009ed 	.word	0x000009ed
     b8c:	200001b0 	.word	0x200001b0
     b90:	00000b35 	.word	0x00000b35
     b94:	00003335 	.word	0x00003335

00000b98 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     b98:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     b9a:	2000      	movs	r0, #0
     b9c:	4b01      	ldr	r3, [pc, #4]	; (ba4 <udi_cdc_is_rx_ready+0xc>)
     b9e:	4798      	blx	r3
}
     ba0:	bd10      	pop	{r4, pc}
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	000009d9 	.word	0x000009d9

00000ba8 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	46d6      	mov	lr, sl
     bac:	464f      	mov	r7, r9
     bae:	4646      	mov	r6, r8
     bb0:	b5c0      	push	{r6, r7, lr}
     bb2:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     bb4:	4b27      	ldr	r3, [pc, #156]	; (c54 <udi_cdc_multi_getc+0xac>)
     bb6:	799b      	ldrb	r3, [r3, #6]
     bb8:	3b09      	subs	r3, #9
     bba:	425a      	negs	r2, r3
     bbc:	4153      	adcs	r3, r2
     bbe:	b2db      	uxtb	r3, r3
     bc0:	4699      	mov	r9, r3
	int rx_data = 0;
     bc2:	2300      	movs	r3, #0
     bc4:	469c      	mov	ip, r3
	cpu_irq_disable();
     bc6:	4b24      	ldr	r3, [pc, #144]	; (c58 <udi_cdc_multi_getc+0xb0>)
     bc8:	4698      	mov	r8, r3
     bca:	2700      	movs	r7, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     bcc:	4e23      	ldr	r6, [pc, #140]	; (c5c <udi_cdc_multi_getc+0xb4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     bce:	4c24      	ldr	r4, [pc, #144]	; (c60 <udi_cdc_multi_getc+0xb8>)
     bd0:	e005      	b.n	bde <udi_cdc_multi_getc+0x36>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     bd2:	428b      	cmp	r3, r1
     bd4:	d329      	bcc.n	c2a <udi_cdc_multi_getc+0x82>
		if (!udi_cdc_data_running) {
     bd6:	4b23      	ldr	r3, [pc, #140]	; (c64 <udi_cdc_multi_getc+0xbc>)
     bd8:	781b      	ldrb	r3, [r3, #0]
     bda:	2b00      	cmp	r3, #0
     bdc:	d01d      	beq.n	c1a <udi_cdc_multi_getc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bde:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     be2:	425a      	negs	r2, r3
     be4:	4153      	adcs	r3, r2
     be6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     be8:	b672      	cpsid	i
     bea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     bee:	4643      	mov	r3, r8
     bf0:	701f      	strb	r7, [r3, #0]
	return flags;
     bf2:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     bf4:	8833      	ldrh	r3, [r6, #0]
     bf6:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     bf8:	7822      	ldrb	r2, [r4, #0]
     bfa:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     bfc:	0055      	lsls	r5, r2, #1
     bfe:	491a      	ldr	r1, [pc, #104]	; (c68 <udi_cdc_multi_getc+0xc0>)
     c00:	5a69      	ldrh	r1, [r5, r1]
     c02:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     c04:	2800      	cmp	r0, #0
     c06:	d0e4      	beq.n	bd2 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
     c08:	2001      	movs	r0, #1
     c0a:	4682      	mov	sl, r0
     c0c:	4812      	ldr	r0, [pc, #72]	; (c58 <udi_cdc_multi_getc+0xb0>)
     c0e:	4655      	mov	r5, sl
     c10:	7005      	strb	r5, [r0, #0]
     c12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c16:	b662      	cpsie	i
     c18:	e7db      	b.n	bd2 <udi_cdc_multi_getc+0x2a>
			return 0;
     c1a:	2500      	movs	r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     c1c:	0028      	movs	r0, r5
     c1e:	b002      	add	sp, #8
     c20:	bc1c      	pop	{r2, r3, r4}
     c22:	4690      	mov	r8, r2
     c24:	4699      	mov	r9, r3
     c26:	46a2      	mov	sl, r4
     c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     c2a:	0192      	lsls	r2, r2, #6
     c2c:	490f      	ldr	r1, [pc, #60]	; (c6c <udi_cdc_multi_getc+0xc4>)
     c2e:	188a      	adds	r2, r1, r2
     c30:	5cd2      	ldrb	r2, [r2, r3]
     c32:	4665      	mov	r5, ip
     c34:	4315      	orrs	r5, r2
	udi_cdc_rx_pos[port] = pos+1;
     c36:	3301      	adds	r3, #1
     c38:	b29b      	uxth	r3, r3
     c3a:	4a08      	ldr	r2, [pc, #32]	; (c5c <udi_cdc_multi_getc+0xb4>)
     c3c:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
     c3e:	2000      	movs	r0, #0
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <udi_cdc_multi_getc+0xc8>)
     c42:	4798      	blx	r3
	if (b_databit_9) {
     c44:	464b      	mov	r3, r9
     c46:	2b00      	cmp	r3, #0
     c48:	d0e8      	beq.n	c1c <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
     c4a:	022b      	lsls	r3, r5, #8
     c4c:	469c      	mov	ip, r3
		b_databit_9 = false;
     c4e:	2300      	movs	r3, #0
     c50:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
     c52:	e7c4      	b.n	bde <udi_cdc_multi_getc+0x36>
     c54:	200001a4 	.word	0x200001a4
     c58:	2000010c 	.word	0x2000010c
     c5c:	20000238 	.word	0x20000238
     c60:	20000234 	.word	0x20000234
     c64:	200001a2 	.word	0x200001a2
     c68:	20000230 	.word	0x20000230
     c6c:	200001b0 	.word	0x200001b0
     c70:	000009ed 	.word	0x000009ed

00000c74 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     c74:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     c76:	2000      	movs	r0, #0
     c78:	4b01      	ldr	r3, [pc, #4]	; (c80 <udi_cdc_getc+0xc>)
     c7a:	4798      	blx	r3
}
     c7c:	bd10      	pop	{r4, pc}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	00000ba9 	.word	0x00000ba9

00000c84 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     c84:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c86:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     c8a:	425a      	negs	r2, r3
     c8c:	4153      	adcs	r3, r2
     c8e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     c90:	b672      	cpsid	i
     c92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c96:	2200      	movs	r2, #0
     c98:	4b14      	ldr	r3, [pc, #80]	; (cec <udi_cdc_multi_get_free_tx_buffer+0x68>)
     c9a:	701a      	strb	r2, [r3, #0]
	return flags;
     c9c:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     c9e:	4b14      	ldr	r3, [pc, #80]	; (cf0 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     ca4:	0058      	lsls	r0, r3, #1
     ca6:	4a13      	ldr	r2, [pc, #76]	; (cf4 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     ca8:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     caa:	2a40      	cmp	r2, #64	; 0x40
     cac:	d00b      	beq.n	cc6 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     cae:	2040      	movs	r0, #64	; 0x40
     cb0:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
     cb2:	2900      	cmp	r1, #0
     cb4:	d005      	beq.n	cc2 <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
     cb6:	2201      	movs	r2, #1
     cb8:	4b0c      	ldr	r3, [pc, #48]	; (cec <udi_cdc_multi_get_free_tx_buffer+0x68>)
     cba:	701a      	strb	r2, [r3, #0]
     cbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     cc0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     cc2:	b002      	add	sp, #8
     cc4:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
     cc6:	480c      	ldr	r0, [pc, #48]	; (cf8 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     cc8:	7800      	ldrb	r0, [r0, #0]
     cca:	2800      	cmp	r0, #0
     ccc:	d1ef      	bne.n	cae <udi_cdc_multi_get_free_tx_buffer+0x2a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     cce:	480b      	ldr	r0, [pc, #44]	; (cfc <udi_cdc_multi_get_free_tx_buffer+0x78>)
     cd0:	7800      	ldrb	r0, [r0, #0]
     cd2:	2800      	cmp	r0, #0
     cd4:	d1eb      	bne.n	cae <udi_cdc_multi_get_free_tx_buffer+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
     cd6:	3001      	adds	r0, #1
     cd8:	4a08      	ldr	r2, [pc, #32]	; (cfc <udi_cdc_multi_get_free_tx_buffer+0x78>)
     cda:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     cdc:	425a      	negs	r2, r3
     cde:	4153      	adcs	r3, r2
     ce0:	b2db      	uxtb	r3, r3
     ce2:	4a03      	ldr	r2, [pc, #12]	; (cf0 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     ce4:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
     ce6:	2200      	movs	r2, #0
     ce8:	e7e1      	b.n	cae <udi_cdc_multi_get_free_tx_buffer+0x2a>
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	2000010c 	.word	0x2000010c
     cf0:	200002cc 	.word	0x200002cc
     cf4:	200002c8 	.word	0x200002c8
     cf8:	200002d4 	.word	0x200002d4
     cfc:	20000244 	.word	0x20000244

00000d00 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     d00:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     d02:	4b03      	ldr	r3, [pc, #12]	; (d10 <udi_cdc_multi_is_tx_ready+0x10>)
     d04:	4798      	blx	r3
     d06:	1e43      	subs	r3, r0, #1
     d08:	4198      	sbcs	r0, r3
     d0a:	b2c0      	uxtb	r0, r0
}
     d0c:	bd10      	pop	{r4, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	00000c85 	.word	0x00000c85

00000d14 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	46de      	mov	lr, fp
     d18:	4657      	mov	r7, sl
     d1a:	464e      	mov	r6, r9
     d1c:	4645      	mov	r5, r8
     d1e:	b5e0      	push	{r5, r6, r7, lr}
     d20:	b083      	sub	sp, #12
     d22:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     d24:	4b22      	ldr	r3, [pc, #136]	; (db0 <udi_cdc_multi_putc+0x9c>)
     d26:	799d      	ldrb	r5, [r3, #6]
     d28:	3d09      	subs	r5, #9
     d2a:	426b      	negs	r3, r5
     d2c:	415d      	adcs	r5, r3
     d2e:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     d30:	4e20      	ldr	r6, [pc, #128]	; (db4 <udi_cdc_multi_putc+0xa0>)
	cpu_irq_disable();
     d32:	4b21      	ldr	r3, [pc, #132]	; (db8 <udi_cdc_multi_putc+0xa4>)
     d34:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     d36:	4b21      	ldr	r3, [pc, #132]	; (dbc <udi_cdc_multi_putc+0xa8>)
     d38:	469a      	mov	sl, r3
     d3a:	e027      	b.n	d8c <udi_cdc_multi_putc+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d3c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     d40:	425a      	negs	r2, r3
     d42:	4153      	adcs	r3, r2
     d44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
     d48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     d4c:	2300      	movs	r3, #0
     d4e:	4642      	mov	r2, r8
     d50:	7013      	strb	r3, [r2, #0]
	return flags;
     d52:	9b01      	ldr	r3, [sp, #4]
     d54:	469b      	mov	fp, r3
     d56:	4653      	mov	r3, sl
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     d5c:	4a18      	ldr	r2, [pc, #96]	; (dc0 <udi_cdc_multi_putc+0xac>)
     d5e:	4694      	mov	ip, r2
     d60:	005f      	lsls	r7, r3, #1
     d62:	5ab9      	ldrh	r1, [r7, r2]
     d64:	1c4a      	adds	r2, r1, #1
     d66:	4660      	mov	r0, ip
     d68:	523a      	strh	r2, [r7, r0]
     d6a:	019b      	lsls	r3, r3, #6
     d6c:	4a15      	ldr	r2, [pc, #84]	; (dc4 <udi_cdc_multi_putc+0xb0>)
     d6e:	18d3      	adds	r3, r2, r3
     d70:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
     d72:	465b      	mov	r3, fp
     d74:	2b00      	cmp	r3, #0
     d76:	d005      	beq.n	d84 <udi_cdc_multi_putc+0x70>
		cpu_irq_enable();
     d78:	2201      	movs	r2, #1
     d7a:	4b0f      	ldr	r3, [pc, #60]	; (db8 <udi_cdc_multi_putc+0xa4>)
     d7c:	701a      	strb	r2, [r3, #0]
     d7e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d82:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     d84:	2d00      	cmp	r5, #0
     d86:	d010      	beq.n	daa <udi_cdc_multi_putc+0x96>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     d88:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     d8a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     d8c:	2000      	movs	r0, #0
     d8e:	47b0      	blx	r6
     d90:	2800      	cmp	r0, #0
     d92:	d1d3      	bne.n	d3c <udi_cdc_multi_putc+0x28>
		if (!udi_cdc_data_running) {
     d94:	4b0c      	ldr	r3, [pc, #48]	; (dc8 <udi_cdc_multi_putc+0xb4>)
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	2b00      	cmp	r3, #0
     d9a:	d1f7      	bne.n	d8c <udi_cdc_multi_putc+0x78>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     d9c:	b003      	add	sp, #12
     d9e:	bc3c      	pop	{r2, r3, r4, r5}
     da0:	4690      	mov	r8, r2
     da2:	4699      	mov	r9, r3
     da4:	46a2      	mov	sl, r4
     da6:	46ab      	mov	fp, r5
     da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     daa:	2001      	movs	r0, #1
     dac:	e7f6      	b.n	d9c <udi_cdc_multi_putc+0x88>
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	200001a4 	.word	0x200001a4
     db4:	00000d01 	.word	0x00000d01
     db8:	2000010c 	.word	0x2000010c
     dbc:	200002cc 	.word	0x200002cc
     dc0:	200002c8 	.word	0x200002c8
     dc4:	20000248 	.word	0x20000248
     dc8:	200001a2 	.word	0x200001a2

00000dcc <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     dcc:	b510      	push	{r4, lr}
     dce:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     dd0:	2000      	movs	r0, #0
     dd2:	4b01      	ldr	r3, [pc, #4]	; (dd8 <udi_cdc_putc+0xc>)
     dd4:	4798      	blx	r3
}
     dd6:	bd10      	pop	{r4, pc}
     dd8:	00000d15 	.word	0x00000d15

00000ddc <keypadInit>:
	'*','0','#','D',
	0xFF
};

	void keypadInit()
	{	
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
		//set rows as outputs
		REG_PORT_DIRSET1 = PORT_ROW1;
     dde:	4a1e      	ldr	r2, [pc, #120]	; (e58 <keypadInit+0x7c>)
     de0:	2120      	movs	r1, #32
     de2:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW1;
     de4:	4b1d      	ldr	r3, [pc, #116]	; (e5c <keypadInit+0x80>)
     de6:	6019      	str	r1, [r3, #0]
		
		REG_PORT_DIRSET1 = PORT_ROW2;
     de8:	3918      	subs	r1, #24
     dea:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW2;
     dec:	6019      	str	r1, [r3, #0]
		
		REG_PORT_DIRSET1 = PORT_ROW3;
     dee:	3178      	adds	r1, #120	; 0x78
     df0:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW3;
     df2:	6019      	str	r1, [r3, #0]
		
		REG_PORT_DIRSET1 = PORT_ROW4;
     df4:	397e      	subs	r1, #126	; 0x7e
     df6:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW4;
     df8:	6019      	str	r1, [r3, #0]
		
		//set cols as inputs
		REG_PORT_DIRCLR1 = PORT_COL1;
     dfa:	4919      	ldr	r1, [pc, #100]	; (e60 <keypadInit+0x84>)
     dfc:	2610      	movs	r6, #16
     dfe:	600e      	str	r6, [r1, #0]
		PORT->Group[GROUP_COL1].PINCFG[PIN_COL1].bit.INEN = 1;
     e00:	4b18      	ldr	r3, [pc, #96]	; (e64 <keypadInit+0x88>)
     e02:	22c4      	movs	r2, #196	; 0xc4
     e04:	5c98      	ldrb	r0, [r3, r2]
     e06:	2402      	movs	r4, #2
     e08:	4320      	orrs	r0, r4
     e0a:	5498      	strb	r0, [r3, r2]
		PORT->Group[GROUP_COL1].PINCFG[PIN_COL1].bit.PULLEN = 1;
     e0c:	5c9d      	ldrb	r5, [r3, r2]
     e0e:	2704      	movs	r7, #4
     e10:	2004      	movs	r0, #4
     e12:	4305      	orrs	r5, r0
     e14:	549d      	strb	r5, [r3, r2]
		REG_PORT_CTRL1 = PORT_COL1;
     e16:	4a14      	ldr	r2, [pc, #80]	; (e68 <keypadInit+0x8c>)
     e18:	6016      	str	r6, [r2, #0]
		
		REG_PORT_DIRCLR1 = PORT_COL2;
     e1a:	600f      	str	r7, [r1, #0]
		PORT->Group[GROUP_COL2].PINCFG[PIN_COL2].bit.INEN = 1;
     e1c:	25c2      	movs	r5, #194	; 0xc2
     e1e:	5d5e      	ldrb	r6, [r3, r5]
     e20:	4326      	orrs	r6, r4
     e22:	555e      	strb	r6, [r3, r5]
		PORT->Group[GROUP_COL2].PINCFG[PIN_COL2].bit.PULLEN = 1;
     e24:	5d5e      	ldrb	r6, [r3, r5]
     e26:	4306      	orrs	r6, r0
     e28:	555e      	strb	r6, [r3, r5]
		REG_PORT_CTRL1 = PORT_COL2;
     e2a:	6017      	str	r7, [r2, #0]
		
		REG_PORT_DIRCLR1 = PORT_COL3;
     e2c:	373c      	adds	r7, #60	; 0x3c
     e2e:	600f      	str	r7, [r1, #0]
		PORT->Group[GROUP_COL3].PINCFG[PIN_COL3].bit.INEN = 1;
     e30:	3504      	adds	r5, #4
     e32:	5d5e      	ldrb	r6, [r3, r5]
     e34:	4326      	orrs	r6, r4
     e36:	555e      	strb	r6, [r3, r5]
		PORT->Group[GROUP_COL3].PINCFG[PIN_COL3].bit.PULLEN = 1;
     e38:	5d5e      	ldrb	r6, [r3, r5]
     e3a:	4306      	orrs	r6, r0
     e3c:	555e      	strb	r6, [r3, r5]
		REG_PORT_CTRL1 = PORT_COL3;
     e3e:	6017      	str	r7, [r2, #0]
		
		REG_PORT_DIRCLR1 = PORT_COL4;
     e40:	2601      	movs	r6, #1
     e42:	600e      	str	r6, [r1, #0]
		PORT->Group[GROUP_COL4].PINCFG[PIN_COL4].bit.INEN = 1;
     e44:	21c0      	movs	r1, #192	; 0xc0
     e46:	5c5d      	ldrb	r5, [r3, r1]
     e48:	432c      	orrs	r4, r5
     e4a:	545c      	strb	r4, [r3, r1]
		PORT->Group[GROUP_COL4].PINCFG[PIN_COL4].bit.PULLEN = 1;
     e4c:	5c5c      	ldrb	r4, [r3, r1]
     e4e:	4320      	orrs	r0, r4
     e50:	5458      	strb	r0, [r3, r1]
		REG_PORT_CTRL1 = PORT_COL4;
     e52:	6016      	str	r6, [r2, #0]
	}
     e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	41004488 	.word	0x41004488
     e5c:	41004494 	.word	0x41004494
     e60:	41004484 	.word	0x41004484
     e64:	41004400 	.word	0x41004400
     e68:	410044a4 	.word	0x410044a4

00000e6c <keypadScan>:
		 //This routine returns the first key found to be pressed during the scan.
		char key = 16;
		

		
		REG_PORT_OUTSET1 = PORT_ROW2;
     e6c:	2208      	movs	r2, #8
     e6e:	4b37      	ldr	r3, [pc, #220]	; (f4c <keypadScan+0xe0>)
     e70:	601a      	str	r2, [r3, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     e72:	4b37      	ldr	r3, [pc, #220]	; (f50 <keypadScan+0xe4>)
     e74:	681a      	ldr	r2, [r3, #0]
		char key = 16;
     e76:	2310      	movs	r3, #16
		if(REG_PORT_IN1&PORT_COL1)
     e78:	06d2      	lsls	r2, r2, #27
     e7a:	d500      	bpl.n	e7e <keypadScan+0x12>
		key = 4;
     e7c:	3b0c      	subs	r3, #12
		if(REG_PORT_IN1&PORT_COL2)
     e7e:	4a34      	ldr	r2, [pc, #208]	; (f50 <keypadScan+0xe4>)
     e80:	6812      	ldr	r2, [r2, #0]
     e82:	0752      	lsls	r2, r2, #29
     e84:	d500      	bpl.n	e88 <keypadScan+0x1c>
		key = 5;
     e86:	2305      	movs	r3, #5
		if(REG_PORT_IN1&PORT_COL3)
     e88:	4a31      	ldr	r2, [pc, #196]	; (f50 <keypadScan+0xe4>)
     e8a:	6812      	ldr	r2, [r2, #0]
     e8c:	0652      	lsls	r2, r2, #25
     e8e:	d500      	bpl.n	e92 <keypadScan+0x26>
		key = 6;
     e90:	2306      	movs	r3, #6
		if(REG_PORT_IN1&PORT_COL4)
     e92:	4a2f      	ldr	r2, [pc, #188]	; (f50 <keypadScan+0xe4>)
     e94:	6812      	ldr	r2, [r2, #0]
     e96:	07d2      	lsls	r2, r2, #31
     e98:	d500      	bpl.n	e9c <keypadScan+0x30>
		key = 7;
     e9a:	2307      	movs	r3, #7

		REG_PORT_OUTCLR1 = PORT_ROW2;
     e9c:	2108      	movs	r1, #8
     e9e:	4a2d      	ldr	r2, [pc, #180]	; (f54 <keypadScan+0xe8>)
     ea0:	6011      	str	r1, [r2, #0]

		REG_PORT_OUTSET1 = PORT_ROW3;
     ea2:	3178      	adds	r1, #120	; 0x78
     ea4:	4a29      	ldr	r2, [pc, #164]	; (f4c <keypadScan+0xe0>)
     ea6:	6011      	str	r1, [r2, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     ea8:	4a29      	ldr	r2, [pc, #164]	; (f50 <keypadScan+0xe4>)
     eaa:	6812      	ldr	r2, [r2, #0]
     eac:	06d2      	lsls	r2, r2, #27
     eae:	d500      	bpl.n	eb2 <keypadScan+0x46>
		key = 8;
     eb0:	2308      	movs	r3, #8
		if(REG_PORT_IN1&PORT_COL2)
     eb2:	4a27      	ldr	r2, [pc, #156]	; (f50 <keypadScan+0xe4>)
     eb4:	6812      	ldr	r2, [r2, #0]
     eb6:	0752      	lsls	r2, r2, #29
     eb8:	d500      	bpl.n	ebc <keypadScan+0x50>
		key = 9;
     eba:	2309      	movs	r3, #9
		if(REG_PORT_IN1&PORT_COL3)
     ebc:	4a24      	ldr	r2, [pc, #144]	; (f50 <keypadScan+0xe4>)
     ebe:	6812      	ldr	r2, [r2, #0]
     ec0:	0652      	lsls	r2, r2, #25
     ec2:	d500      	bpl.n	ec6 <keypadScan+0x5a>
		key = 10;
     ec4:	230a      	movs	r3, #10
		if(REG_PORT_IN1&PORT_COL4)
     ec6:	4a22      	ldr	r2, [pc, #136]	; (f50 <keypadScan+0xe4>)
     ec8:	6812      	ldr	r2, [r2, #0]
     eca:	07d2      	lsls	r2, r2, #31
     ecc:	d500      	bpl.n	ed0 <keypadScan+0x64>
		key = 11;
     ece:	230b      	movs	r3, #11

		REG_PORT_OUTCLR1 = PORT_ROW3;
     ed0:	2180      	movs	r1, #128	; 0x80
     ed2:	4a20      	ldr	r2, [pc, #128]	; (f54 <keypadScan+0xe8>)
     ed4:	6011      	str	r1, [r2, #0]
		
		REG_PORT_OUTSET1 = PORT_ROW4;
     ed6:	397e      	subs	r1, #126	; 0x7e
     ed8:	4a1c      	ldr	r2, [pc, #112]	; (f4c <keypadScan+0xe0>)
     eda:	6011      	str	r1, [r2, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     edc:	4a1c      	ldr	r2, [pc, #112]	; (f50 <keypadScan+0xe4>)
     ede:	6812      	ldr	r2, [r2, #0]
     ee0:	06d2      	lsls	r2, r2, #27
     ee2:	d500      	bpl.n	ee6 <keypadScan+0x7a>
		key = 12;
     ee4:	230c      	movs	r3, #12
		if(REG_PORT_IN1&PORT_COL2)
     ee6:	4a1a      	ldr	r2, [pc, #104]	; (f50 <keypadScan+0xe4>)
     ee8:	6812      	ldr	r2, [r2, #0]
     eea:	0752      	lsls	r2, r2, #29
     eec:	d500      	bpl.n	ef0 <keypadScan+0x84>
		key = 13;
     eee:	230d      	movs	r3, #13
		if(REG_PORT_IN1&PORT_COL3)
     ef0:	4a17      	ldr	r2, [pc, #92]	; (f50 <keypadScan+0xe4>)
     ef2:	6812      	ldr	r2, [r2, #0]
     ef4:	0652      	lsls	r2, r2, #25
     ef6:	d500      	bpl.n	efa <keypadScan+0x8e>
		key = 14;
     ef8:	230e      	movs	r3, #14
		if(REG_PORT_IN1&PORT_COL4)
     efa:	4a15      	ldr	r2, [pc, #84]	; (f50 <keypadScan+0xe4>)
     efc:	6812      	ldr	r2, [r2, #0]
     efe:	07d2      	lsls	r2, r2, #31
     f00:	d500      	bpl.n	f04 <keypadScan+0x98>
		key = 15;
     f02:	230f      	movs	r3, #15

		REG_PORT_OUTCLR1 = PORT_ROW4;	
     f04:	2102      	movs	r1, #2
     f06:	4a13      	ldr	r2, [pc, #76]	; (f54 <keypadScan+0xe8>)
     f08:	6011      	str	r1, [r2, #0]
		
		REG_PORT_OUTSET1 = PORT_ROW1;
     f0a:	311e      	adds	r1, #30
     f0c:	4a0f      	ldr	r2, [pc, #60]	; (f4c <keypadScan+0xe0>)
     f0e:	6011      	str	r1, [r2, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     f10:	4a0f      	ldr	r2, [pc, #60]	; (f50 <keypadScan+0xe4>)
     f12:	6811      	ldr	r1, [r2, #0]
     f14:	2210      	movs	r2, #16
     f16:	400a      	ands	r2, r1
		key = 0;
     f18:	4251      	negs	r1, r2
     f1a:	414a      	adcs	r2, r1
     f1c:	4252      	negs	r2, r2
     f1e:	4013      	ands	r3, r2
		if(REG_PORT_IN1&PORT_COL2)
     f20:	4a0b      	ldr	r2, [pc, #44]	; (f50 <keypadScan+0xe4>)
     f22:	6812      	ldr	r2, [r2, #0]
     f24:	0752      	lsls	r2, r2, #29
     f26:	d500      	bpl.n	f2a <keypadScan+0xbe>
		key = 1;
     f28:	2301      	movs	r3, #1
		if(REG_PORT_IN1&PORT_COL3)
     f2a:	4a09      	ldr	r2, [pc, #36]	; (f50 <keypadScan+0xe4>)
     f2c:	6812      	ldr	r2, [r2, #0]
     f2e:	0652      	lsls	r2, r2, #25
     f30:	d500      	bpl.n	f34 <keypadScan+0xc8>
		key = 2;
     f32:	2302      	movs	r3, #2
		if(REG_PORT_IN1&PORT_COL4)
     f34:	4a06      	ldr	r2, [pc, #24]	; (f50 <keypadScan+0xe4>)
     f36:	6812      	ldr	r2, [r2, #0]
     f38:	07d2      	lsls	r2, r2, #31
     f3a:	d500      	bpl.n	f3e <keypadScan+0xd2>
		key = 3;
     f3c:	2303      	movs	r3, #3

		REG_PORT_OUTCLR1 = PORT_ROW1;	
     f3e:	2120      	movs	r1, #32
     f40:	4a04      	ldr	r2, [pc, #16]	; (f54 <keypadScan+0xe8>)
     f42:	6011      	str	r1, [r2, #0]
		
		return keyPadMatrix[key];
     f44:	4a04      	ldr	r2, [pc, #16]	; (f58 <keypadScan+0xec>)
     f46:	5cd0      	ldrb	r0, [r2, r3]
	}
     f48:	4770      	bx	lr
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	41004498 	.word	0x41004498
     f50:	410044a0 	.word	0x410044a0
     f54:	41004494 	.word	0x41004494
     f58:	20000028 	.word	0x20000028

00000f5c <i2cLcdClear>:
	LCD_write_buffer[2] = iRows;
	i2c_write(LCD_write_buffer,3,LCD_SLAVE_ADDR);
    timerDelay(5);
}
      
void i2cLcdClear() {
     f5c:	b510      	push	{r4, lr}
	LCD_write_buffer[0] = 0x02;
     f5e:	2302      	movs	r3, #2
     f60:	4a21      	ldr	r2, [pc, #132]	; (fe8 <i2cLcdClear+0x8c>)
     f62:	7013      	strb	r3, [r2, #0]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     f64:	4a21      	ldr	r2, [pc, #132]	; (fec <i2cLcdClear+0x90>)
     f66:	6253      	str	r3, [r2, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     f68:	0011      	movs	r1, r2
     f6a:	2201      	movs	r2, #1
     f6c:	7e0b      	ldrb	r3, [r1, #24]
     f6e:	4213      	tst	r3, r2
     f70:	d0fc      	beq.n	f6c <i2cLcdClear+0x10>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f72:	4b1e      	ldr	r3, [pc, #120]	; (fec <i2cLcdClear+0x90>)
     f74:	8b5b      	ldrh	r3, [r3, #26]
     f76:	075b      	lsls	r3, r3, #29
     f78:	d421      	bmi.n	fbe <i2cLcdClear+0x62>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     f7a:	2102      	movs	r1, #2
     f7c:	2328      	movs	r3, #40	; 0x28
     f7e:	4a1b      	ldr	r2, [pc, #108]	; (fec <i2cLcdClear+0x90>)
     f80:	54d1      	strb	r1, [r2, r3]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     f82:	0011      	movs	r1, r2
     f84:	2201      	movs	r2, #1
     f86:	7e0b      	ldrb	r3, [r1, #24]
     f88:	4213      	tst	r3, r2
     f8a:	d0fc      	beq.n	f86 <i2cLcdClear+0x2a>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f8c:	4b17      	ldr	r3, [pc, #92]	; (fec <i2cLcdClear+0x90>)
     f8e:	8b5b      	ldrh	r3, [r3, #26]
     f90:	075b      	lsls	r3, r3, #29
     f92:	d41e      	bmi.n	fd2 <i2cLcdClear+0x76>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f94:	4a15      	ldr	r2, [pc, #84]	; (fec <i2cLcdClear+0x90>)
     f96:	6851      	ldr	r1, [r2, #4]
     f98:	23c0      	movs	r3, #192	; 0xc0
     f9a:	029b      	lsls	r3, r3, #10
     f9c:	430b      	orrs	r3, r1
     f9e:	6053      	str	r3, [r2, #4]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     fa0:	2200      	movs	r2, #0
     fa2:	4b13      	ldr	r3, [pc, #76]	; (ff0 <i2cLcdClear+0x94>)
     fa4:	821a      	strh	r2, [r3, #16]
     fa6:	2103      	movs	r1, #3
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     fa8:	001a      	movs	r2, r3
     faa:	2010      	movs	r0, #16
     fac:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     fae:	7b93      	ldrb	r3, [r2, #14]
     fb0:	06db      	lsls	r3, r3, #27
     fb2:	d5fc      	bpl.n	fae <i2cLcdClear+0x52>
     fb4:	3901      	subs	r1, #1
     fb6:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     fb8:	2900      	cmp	r1, #0
     fba:	d1f7      	bne.n	fac <i2cLcdClear+0x50>
	i2c_write(LCD_write_buffer,1,LCD_SLAVE_ADDR);
	timerDelay(3);
    }
     fbc:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     fbe:	4a0b      	ldr	r2, [pc, #44]	; (fec <i2cLcdClear+0x90>)
     fc0:	6851      	ldr	r1, [r2, #4]
     fc2:	23c0      	movs	r3, #192	; 0xc0
     fc4:	029b      	lsls	r3, r3, #10
     fc6:	430b      	orrs	r3, r1
     fc8:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
     fca:	2041      	movs	r0, #65	; 0x41
     fcc:	4b09      	ldr	r3, [pc, #36]	; (ff4 <i2cLcdClear+0x98>)
     fce:	4798      	blx	r3
     fd0:	e7e6      	b.n	fa0 <i2cLcdClear+0x44>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     fd2:	4a06      	ldr	r2, [pc, #24]	; (fec <i2cLcdClear+0x90>)
     fd4:	6851      	ldr	r1, [r2, #4]
     fd6:	23c0      	movs	r3, #192	; 0xc0
     fd8:	029b      	lsls	r3, r3, #10
     fda:	430b      	orrs	r3, r1
     fdc:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
     fde:	2042      	movs	r0, #66	; 0x42
     fe0:	4b04      	ldr	r3, [pc, #16]	; (ff4 <i2cLcdClear+0x98>)
     fe2:	4798      	blx	r3
     fe4:	e7dc      	b.n	fa0 <i2cLcdClear+0x44>
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	200002e4 	.word	0x200002e4
     fec:	42001000 	.word	0x42001000
     ff0:	42003000 	.word	0x42003000
     ff4:	00000dcd 	.word	0x00000dcd

00000ff8 <i2cLcdPrint>:
	Wire.send(iRow);
	Wire.endTransmission();
}
*/
      
void i2cLcdPrint(uint8_t iRows, uint8_t iCols, char s[]) {
     ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LCD_write_buffer[0] = 0x04;
     ffa:	4b2b      	ldr	r3, [pc, #172]	; (10a8 <i2cLcdPrint+0xb0>)
     ffc:	2404      	movs	r4, #4
     ffe:	701c      	strb	r4, [r3, #0]
	LCD_write_buffer[1] = iCols;
    1000:	7059      	strb	r1, [r3, #1]
	LCD_write_buffer[2] = iRows;
    1002:	7098      	strb	r0, [r3, #2]
	int i = 0;
	char *p = s;
	while (*p) {
    1004:	7811      	ldrb	r1, [r2, #0]
    1006:	2900      	cmp	r1, #0
    1008:	d038      	beq.n	107c <i2cLcdPrint+0x84>
    100a:	2300      	movs	r3, #0
		i++;
		LCD_write_buffer[2+i] = *p++;
    100c:	4c26      	ldr	r4, [pc, #152]	; (10a8 <i2cLcdPrint+0xb0>)
		i++;
    100e:	3301      	adds	r3, #1
		LCD_write_buffer[2+i] = *p++;
    1010:	18e0      	adds	r0, r4, r3
    1012:	7081      	strb	r1, [r0, #2]
	while (*p) {
    1014:	5cd1      	ldrb	r1, [r2, r3]
    1016:	2900      	cmp	r1, #0
    1018:	d1f9      	bne.n	100e <i2cLcdPrint+0x16>
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    101a:	2102      	movs	r1, #2
    101c:	4a23      	ldr	r2, [pc, #140]	; (10ac <i2cLcdPrint+0xb4>)
    101e:	6251      	str	r1, [r2, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    1020:	0010      	movs	r0, r2
    1022:	3901      	subs	r1, #1
    1024:	7e02      	ldrb	r2, [r0, #24]
    1026:	420a      	tst	r2, r1
    1028:	d0fc      	beq.n	1024 <i2cLcdPrint+0x2c>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    102a:	4a20      	ldr	r2, [pc, #128]	; (10ac <i2cLcdPrint+0xb4>)
    102c:	8b52      	ldrh	r2, [r2, #26]
    102e:	0752      	lsls	r2, r2, #29
    1030:	d426      	bmi.n	1080 <i2cLcdPrint+0x88>
	}
	i2c_write(LCD_write_buffer,3+i,LCD_SLAVE_ADDR);
    1032:	1cd9      	adds	r1, r3, #3
    1034:	000a      	movs	r2, r1
	for (int i = 0; i < size; i++)
    1036:	2400      	movs	r4, #0
    1038:	2900      	cmp	r1, #0
    103a:	dd0f      	ble.n	105c <i2cLcdPrint+0x64>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    103c:	4f1a      	ldr	r7, [pc, #104]	; (10a8 <i2cLcdPrint+0xb0>)
    103e:	491b      	ldr	r1, [pc, #108]	; (10ac <i2cLcdPrint+0xb4>)
    1040:	2628      	movs	r6, #40	; 0x28
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    1042:	2001      	movs	r0, #1
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1044:	2504      	movs	r5, #4
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    1046:	5de3      	ldrb	r3, [r4, r7]
    1048:	558b      	strb	r3, [r1, r6]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    104a:	7e0b      	ldrb	r3, [r1, #24]
    104c:	4203      	tst	r3, r0
    104e:	d0fc      	beq.n	104a <i2cLcdPrint+0x52>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1050:	8b4b      	ldrh	r3, [r1, #26]
    1052:	422b      	tst	r3, r5
    1054:	d11e      	bne.n	1094 <i2cLcdPrint+0x9c>
	for (int i = 0; i < size; i++)
    1056:	3401      	adds	r4, #1
    1058:	42a2      	cmp	r2, r4
    105a:	d1f4      	bne.n	1046 <i2cLcdPrint+0x4e>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    105c:	4a13      	ldr	r2, [pc, #76]	; (10ac <i2cLcdPrint+0xb4>)
    105e:	6851      	ldr	r1, [r2, #4]
    1060:	23c0      	movs	r3, #192	; 0xc0
    1062:	029b      	lsls	r3, r3, #10
    1064:	430b      	orrs	r3, r1
    1066:	6053      	str	r3, [r2, #4]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    1068:	4b11      	ldr	r3, [pc, #68]	; (10b0 <i2cLcdPrint+0xb8>)
    106a:	2200      	movs	r2, #0
    106c:	821a      	strh	r2, [r3, #16]
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    106e:	3210      	adds	r2, #16
    1070:	739a      	strb	r2, [r3, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    1072:	001a      	movs	r2, r3
    1074:	7b93      	ldrb	r3, [r2, #14]
    1076:	06db      	lsls	r3, r3, #27
    1078:	d5fc      	bpl.n	1074 <i2cLcdPrint+0x7c>
	timerDelay(1);
}
    107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int i = 0;
    107c:	2300      	movs	r3, #0
    107e:	e7cc      	b.n	101a <i2cLcdPrint+0x22>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1080:	4a0a      	ldr	r2, [pc, #40]	; (10ac <i2cLcdPrint+0xb4>)
    1082:	6851      	ldr	r1, [r2, #4]
    1084:	23c0      	movs	r3, #192	; 0xc0
    1086:	029b      	lsls	r3, r3, #10
    1088:	430b      	orrs	r3, r1
    108a:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    108c:	2041      	movs	r0, #65	; 0x41
    108e:	4b09      	ldr	r3, [pc, #36]	; (10b4 <i2cLcdPrint+0xbc>)
    1090:	4798      	blx	r3
    1092:	e7e9      	b.n	1068 <i2cLcdPrint+0x70>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1094:	4a05      	ldr	r2, [pc, #20]	; (10ac <i2cLcdPrint+0xb4>)
    1096:	6851      	ldr	r1, [r2, #4]
    1098:	23c0      	movs	r3, #192	; 0xc0
    109a:	029b      	lsls	r3, r3, #10
    109c:	430b      	orrs	r3, r1
    109e:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    10a0:	2042      	movs	r0, #66	; 0x42
    10a2:	4b04      	ldr	r3, [pc, #16]	; (10b4 <i2cLcdPrint+0xbc>)
    10a4:	4798      	blx	r3
    10a6:	e7df      	b.n	1068 <i2cLcdPrint+0x70>
    10a8:	200002e4 	.word	0x200002e4
    10ac:	42001000 	.word	0x42001000
    10b0:	42003000 	.word	0x42003000
    10b4:	00000dcd 	.word	0x00000dcd

000010b8 <i2cLcdTime>:
void i2cLcdTime() {
    10b8:	b510      	push	{r4, lr}
	str4[0] = 'E';
    10ba:	4a0c      	ldr	r2, [pc, #48]	; (10ec <i2cLcdTime+0x34>)
    10bc:	2345      	movs	r3, #69	; 0x45
    10be:	7013      	strb	r3, [r2, #0]
	str4[1] = 'n';
    10c0:	3329      	adds	r3, #41	; 0x29
    10c2:	7053      	strb	r3, [r2, #1]
	str4[2] = 't';
    10c4:	3306      	adds	r3, #6
    10c6:	7093      	strb	r3, [r2, #2]
	str4[3] = 'e';
    10c8:	3b0f      	subs	r3, #15
    10ca:	70d3      	strb	r3, [r2, #3]
	str4[4] = 'r';
    10cc:	2172      	movs	r1, #114	; 0x72
    10ce:	7111      	strb	r1, [r2, #4]
	str4[5] = ' ';
    10d0:	3952      	subs	r1, #82	; 0x52
    10d2:	7151      	strb	r1, [r2, #5]
	str4[6] = 'T';
    10d4:	3134      	adds	r1, #52	; 0x34
    10d6:	7191      	strb	r1, [r2, #6]
	str4[7] = 'i';
    10d8:	3115      	adds	r1, #21
    10da:	71d1      	strb	r1, [r2, #7]
	str4[8] = 'm';
    10dc:	3104      	adds	r1, #4
    10de:	7211      	strb	r1, [r2, #8]
	str4[9] = 'e';
    10e0:	7253      	strb	r3, [r2, #9]
	i2cLcdPrint(0, 5, str4);
    10e2:	3968      	subs	r1, #104	; 0x68
    10e4:	2000      	movs	r0, #0
    10e6:	4b02      	ldr	r3, [pc, #8]	; (10f0 <i2cLcdTime+0x38>)
    10e8:	4798      	blx	r3
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	2000045c 	.word	0x2000045c
    10f0:	00000ff9 	.word	0x00000ff9

000010f4 <i2cLcdTemp>:
void i2cLcdTemp() {
    10f4:	b510      	push	{r4, lr}
	str1[0] = 'T';
    10f6:	4a0b      	ldr	r2, [pc, #44]	; (1124 <i2cLcdTemp+0x30>)
    10f8:	2354      	movs	r3, #84	; 0x54
    10fa:	7013      	strb	r3, [r2, #0]
	str1[1] = 'e';
    10fc:	3311      	adds	r3, #17
    10fe:	7053      	strb	r3, [r2, #1]
	str1[2] = 'm';
    1100:	3308      	adds	r3, #8
    1102:	7093      	strb	r3, [r2, #2]
	str1[3] = 'p';
    1104:	3303      	adds	r3, #3
    1106:	70d3      	strb	r3, [r2, #3]
	str1[4] = ':';
    1108:	3b36      	subs	r3, #54	; 0x36
    110a:	7113      	strb	r3, [r2, #4]
	str1[5] = ' ';
    110c:	3b1a      	subs	r3, #26
    110e:	7153      	strb	r3, [r2, #5]
	str1[6] = ' ';
    1110:	7193      	strb	r3, [r2, #6]
	str1[7] = ' ';
    1112:	71d3      	strb	r3, [r2, #7]
	str1[8] = ' ';
    1114:	7213      	strb	r3, [r2, #8]
	str1[9] = 'C';
    1116:	3323      	adds	r3, #35	; 0x23
    1118:	7253      	strb	r3, [r2, #9]
	i2cLcdPrint(0, 20, str1);
    111a:	2114      	movs	r1, #20
    111c:	2000      	movs	r0, #0
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <i2cLcdTemp+0x34>)
    1120:	4798      	blx	r3
}
    1122:	bd10      	pop	{r4, pc}
    1124:	200004ac 	.word	0x200004ac
    1128:	00000ff9 	.word	0x00000ff9

0000112c <i2cLcdRH>:
void i2cLcdRH() {
    112c:	b510      	push	{r4, lr}
	str2[0] = 'R';
    112e:	4a09      	ldr	r2, [pc, #36]	; (1154 <i2cLcdRH+0x28>)
    1130:	2352      	movs	r3, #82	; 0x52
    1132:	7013      	strb	r3, [r2, #0]
	str2[1] = 'H';
    1134:	3b0a      	subs	r3, #10
    1136:	7053      	strb	r3, [r2, #1]
	str2[2] = ':';
    1138:	3b0e      	subs	r3, #14
    113a:	7093      	strb	r3, [r2, #2]
	str2[3] = ' ';
    113c:	3b1a      	subs	r3, #26
    113e:	70d3      	strb	r3, [r2, #3]
	str2[4] = ' ';
    1140:	7113      	strb	r3, [r2, #4]
	str2[5] = ' ';
    1142:	7153      	strb	r3, [r2, #5]
	str2[6] = '%';
    1144:	3305      	adds	r3, #5
    1146:	7193      	strb	r3, [r2, #6]
	i2cLcdPrint(0, 32, str2);	
    1148:	2120      	movs	r1, #32
    114a:	2000      	movs	r0, #0
    114c:	4b02      	ldr	r3, [pc, #8]	; (1158 <i2cLcdRH+0x2c>)
    114e:	4798      	blx	r3
}
    1150:	bd10      	pop	{r4, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	200004d4 	.word	0x200004d4
    1158:	00000ff9 	.word	0x00000ff9

0000115c <i2cLcdprintNum>:
{
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	b083      	sub	sp, #12
    1160:	0007      	movs	r7, r0
    1162:	9101      	str	r1, [sp, #4]
    1164:	0016      	movs	r6, r2
	str3[0] = (d + '0');
    1166:	4c0a      	ldr	r4, [pc, #40]	; (1190 <i2cLcdprintNum+0x34>)
	d = in / ((int) pow(10, 1)) % 10;
    1168:	210a      	movs	r1, #10
    116a:	4b0a      	ldr	r3, [pc, #40]	; (1194 <i2cLcdprintNum+0x38>)
    116c:	4798      	blx	r3
    116e:	4d0a      	ldr	r5, [pc, #40]	; (1198 <i2cLcdprintNum+0x3c>)
    1170:	210a      	movs	r1, #10
    1172:	47a8      	blx	r5
	str3[0] = (d + '0');
    1174:	3130      	adds	r1, #48	; 0x30
    1176:	7021      	strb	r1, [r4, #0]
	u = in / ((int) pow(10, 0)) % 10;
    1178:	210a      	movs	r1, #10
    117a:	0038      	movs	r0, r7
    117c:	47a8      	blx	r5
	str3[1] = (u + '0');
    117e:	3130      	adds	r1, #48	; 0x30
    1180:	7061      	strb	r1, [r4, #1]
	i2cLcdPrint(Col,Row,str3);
    1182:	0022      	movs	r2, r4
    1184:	0031      	movs	r1, r6
    1186:	9801      	ldr	r0, [sp, #4]
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <i2cLcdprintNum+0x40>)
    118a:	4798      	blx	r3
}
    118c:	b003      	add	sp, #12
    118e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1190:	20000484 	.word	0x20000484
    1194:	00004cf9 	.word	0x00004cf9
    1198:	00004ec5 	.word	0x00004ec5
    119c:	00000ff9 	.word	0x00000ff9

000011a0 <RTC_init>:
#include "RTC.h"

void RTC_init(void)
{
	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_RTC;
    11a0:	4a12      	ldr	r2, [pc, #72]	; (11ec <RTC_init+0x4c>)
    11a2:	6993      	ldr	r3, [r2, #24]
    11a4:	2120      	movs	r1, #32
    11a6:	430b      	orrs	r3, r1
    11a8:	6193      	str	r3, [r2, #24]
	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    11aa:	4a11      	ldr	r2, [pc, #68]	; (11f0 <RTC_init+0x50>)
    11ac:	4b11      	ldr	r3, [pc, #68]	; (11f4 <RTC_init+0x54>)
    11ae:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(4);
	
	RTC->MODE2.CTRL.reg = RTC_MODE2_CTRL_MODE(2) | RTC_CALENDAR_PRESCALER_DIV_1;//
    11b0:	4b11      	ldr	r3, [pc, #68]	; (11f8 <RTC_init+0x58>)
    11b2:	3918      	subs	r1, #24
    11b4:	8019      	strh	r1, [r3, #0]
	
	/* Set continuously mode. */
	RTC->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    11b6:	885a      	ldrh	r2, [r3, #2]
    11b8:	2080      	movs	r0, #128	; 0x80
    11ba:	01c0      	lsls	r0, r0, #7
    11bc:	4302      	orrs	r2, r0
    11be:	805a      	strh	r2, [r3, #2]
	
	RTC->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM0;
    11c0:	2201      	movs	r2, #1
    11c2:	71da      	strb	r2, [r3, #7]
	
	/* Enable RTC module. */
	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_MODE(2) | RTC_CALENDAR_PRESCALER_DIV_1;
    11c4:	881a      	ldrh	r2, [r3, #0]
    11c6:	2008      	movs	r0, #8
    11c8:	4302      	orrs	r2, r0
    11ca:	801a      	strh	r2, [r3, #0]
	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    11cc:	881a      	ldrh	r2, [r3, #0]
    11ce:	3806      	subs	r0, #6
    11d0:	4302      	orrs	r2, r0
    11d2:	801a      	strh	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    11d4:	4a09      	ldr	r2, [pc, #36]	; (11fc <RTC_init+0x5c>)
    11d6:	23c0      	movs	r3, #192	; 0xc0
    11d8:	005b      	lsls	r3, r3, #1
    11da:	50d1      	str	r1, [r2, r3]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    11dc:	20c0      	movs	r0, #192	; 0xc0
    11de:	0080      	lsls	r0, r0, #2
    11e0:	5813      	ldr	r3, [r2, r0]
    11e2:	021b      	lsls	r3, r3, #8
    11e4:	0a1b      	lsrs	r3, r3, #8
    11e6:	5013      	str	r3, [r2, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    11e8:	6011      	str	r1, [r2, #0]
	
	NVIC_ClearPendingIRQ(RTC_IRQn); 
	NVIC_SetPriority(RTC_IRQn, 100);
	NVIC_EnableIRQ(RTC_IRQn);
}
    11ea:	4770      	bx	lr
    11ec:	40000400 	.word	0x40000400
    11f0:	00004404 	.word	0x00004404
    11f4:	40000c00 	.word	0x40000c00
    11f8:	40001400 	.word	0x40001400
    11fc:	e000e100 	.word	0xe000e100

00001200 <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time1->year - time1->year_init_value) <<
    1200:	88c2      	ldrh	r2, [r0, #6]
    1202:	8903      	ldrh	r3, [r0, #8]
    1204:	1ad2      	subs	r2, r2, r3
    1206:	0692      	lsls	r2, r2, #26
	RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time1->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1208:	7943      	ldrb	r3, [r0, #5]
    120a:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time1->day << RTC_MODE2_CLOCK_DAY_Pos);
    120c:	7901      	ldrb	r1, [r0, #4]
    120e:	0449      	lsls	r1, r1, #17

	/* Set minute value into register_value. */
	register_value |= (time1->minute << RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into register_value. */
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1210:	430b      	orrs	r3, r1
    1212:	7801      	ldrb	r1, [r0, #0]
    1214:	430b      	orrs	r3, r1
	register_value |= (time1->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1216:	7881      	ldrb	r1, [r0, #2]
    1218:	0309      	lsls	r1, r1, #12
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
    121a:	430b      	orrs	r3, r1
	register_value |= (time1->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    121c:	7840      	ldrb	r0, [r0, #1]
    121e:	0180      	lsls	r0, r0, #6
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1220:	4318      	orrs	r0, r3
    1222:	4310      	orrs	r0, r2
	

	return register_value;
}
    1224:	4770      	bx	lr

00001226 <rtc_calendar_register_value_to_time>:

void rtc_calendar_register_value_to_time(uint32_t register_value, struct rtc_calendar_time *time1)
{
	/* Set year plus value of initial year. */
	time1->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1226:	0e83      	lsrs	r3, r0, #26
	RTC_MODE2_CLOCK_YEAR_Pos) + time1->year_init_value;
    1228:	890a      	ldrh	r2, [r1, #8]
    122a:	189b      	adds	r3, r3, r2
	time1->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    122c:	80cb      	strh	r3, [r1, #6]

	/* Set month value into time struct. */
	time1->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    122e:	0183      	lsls	r3, r0, #6
    1230:	0f1b      	lsrs	r3, r3, #28
    1232:	714b      	strb	r3, [r1, #5]
	RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time1->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1234:	0c42      	lsrs	r2, r0, #17
    1236:	231f      	movs	r3, #31
    1238:	401a      	ands	r2, r3
    123a:	710a      	strb	r2, [r1, #4]
	RTC_MODE2_CLOCK_DAY_Pos);

	time1->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    123c:	0b02      	lsrs	r2, r0, #12
    123e:	4013      	ands	r3, r2
    1240:	708b      	strb	r3, [r1, #2]
	RTC_MODE2_CLOCK_HOUR_Pos);

	/* Set minute value into time struct. */
	time1->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1242:	0982      	lsrs	r2, r0, #6
    1244:	233f      	movs	r3, #63	; 0x3f
    1246:	401a      	ands	r2, r3
    1248:	704a      	strb	r2, [r1, #1]
	RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time1->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    124a:	4018      	ands	r0, r3
    124c:	7008      	strb	r0, [r1, #0]
	RTC_MODE2_CLOCK_SECOND_Pos);	
}
    124e:	4770      	bx	lr

00001250 <rtc_calendar_get_time>:
{
    1250:	b510      	push	{r4, lr}
    1252:	0001      	movs	r1, r0
	if (!(time1->continuously_update)) {
    1254:	7ac3      	ldrb	r3, [r0, #11]
    1256:	2b00      	cmp	r3, #0
    1258:	d10c      	bne.n	1274 <rtc_calendar_get_time+0x24>
		RTC->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    125a:	4a0e      	ldr	r2, [pc, #56]	; (1294 <rtc_calendar_get_time+0x44>)
    125c:	4b0e      	ldr	r3, [pc, #56]	; (1298 <rtc_calendar_get_time+0x48>)
    125e:	805a      	strh	r2, [r3, #2]
		while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1260:	001a      	movs	r2, r3
    1262:	7a93      	ldrb	r3, [r2, #10]
    1264:	b25b      	sxtb	r3, r3
    1266:	2b00      	cmp	r3, #0
    1268:	dbfb      	blt.n	1262 <rtc_calendar_get_time+0x12>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <rtc_calendar_get_time+0x48>)
    126c:	6918      	ldr	r0, [r3, #16]
	rtc_calendar_register_value_to_time(register_value, time1);
    126e:	4b0b      	ldr	r3, [pc, #44]	; (129c <rtc_calendar_get_time+0x4c>)
    1270:	4798      	blx	r3
}
    1272:	bd10      	pop	{r4, pc}
	} else if (!(RTC->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1274:	4b08      	ldr	r3, [pc, #32]	; (1298 <rtc_calendar_get_time+0x48>)
    1276:	885b      	ldrh	r3, [r3, #2]
    1278:	045b      	lsls	r3, r3, #17
    127a:	d4f6      	bmi.n	126a <rtc_calendar_get_time+0x1a>
		RTC->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    127c:	4a06      	ldr	r2, [pc, #24]	; (1298 <rtc_calendar_get_time+0x48>)
    127e:	8853      	ldrh	r3, [r2, #2]
    1280:	20c0      	movs	r0, #192	; 0xc0
    1282:	0200      	lsls	r0, r0, #8
    1284:	4303      	orrs	r3, r0
    1286:	8053      	strh	r3, [r2, #2]
		while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1288:	7a93      	ldrb	r3, [r2, #10]
    128a:	b25b      	sxtb	r3, r3
    128c:	2b00      	cmp	r3, #0
    128e:	dbfb      	blt.n	1288 <rtc_calendar_get_time+0x38>
    1290:	e7eb      	b.n	126a <rtc_calendar_get_time+0x1a>
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	ffff8000 	.word	0xffff8000
    1298:	40001400 	.word	0x40001400
    129c:	00001227 	.word	0x00001227

000012a0 <rtc_calendar_set_time>:

void rtc_calendar_set_time (struct rtc_calendar_time *time1)
{
    12a0:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_calendar_time_to_register_value(time1);
    12a2:	4b05      	ldr	r3, [pc, #20]	; (12b8 <rtc_calendar_set_time+0x18>)
    12a4:	4798      	blx	r3

	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    12a6:	4a05      	ldr	r2, [pc, #20]	; (12bc <rtc_calendar_set_time+0x1c>)
    12a8:	7a93      	ldrb	r3, [r2, #10]
    12aa:	b25b      	sxtb	r3, r3
    12ac:	2b00      	cmp	r3, #0
    12ae:	dbfb      	blt.n	12a8 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	RTC->MODE2.CLOCK.reg = register_value;
    12b0:	4b02      	ldr	r3, [pc, #8]	; (12bc <rtc_calendar_set_time+0x1c>)
    12b2:	6118      	str	r0, [r3, #16]
}
    12b4:	bd10      	pop	{r4, pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	00001201 	.word	0x00001201
    12bc:	40001400 	.word	0x40001400

000012c0 <rtc_calendar_set_alarm>:

void rtc_calendar_set_alarm(struct rtc_calendar_time *time1)
{
    12c0:	b510      	push	{r4, lr}
	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    12c2:	4a08      	ldr	r2, [pc, #32]	; (12e4 <rtc_calendar_set_alarm+0x24>)
    12c4:	7a93      	ldrb	r3, [r2, #10]
    12c6:	b25b      	sxtb	r3, r3
    12c8:	2b00      	cmp	r3, #0
    12ca:	dbfb      	blt.n	12c4 <rtc_calendar_set_alarm+0x4>
		/* Wait for synchronization */
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(time1);
    12cc:	4b06      	ldr	r3, [pc, #24]	; (12e8 <rtc_calendar_set_alarm+0x28>)
    12ce:	4798      	blx	r3

	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    12d0:	4a04      	ldr	r2, [pc, #16]	; (12e4 <rtc_calendar_set_alarm+0x24>)
    12d2:	7a93      	ldrb	r3, [r2, #10]
    12d4:	b25b      	sxtb	r3, r3
    12d6:	2b00      	cmp	r3, #0
    12d8:	dbfb      	blt.n	12d2 <rtc_calendar_set_alarm+0x12>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	RTC->MODE2.Mode2Alarm[0].ALARM.reg = register_value;
    12da:	4b02      	ldr	r3, [pc, #8]	; (12e4 <rtc_calendar_set_alarm+0x24>)
    12dc:	6198      	str	r0, [r3, #24]

	/* Set alarm mask */
	RTC->MODE2.Mode2Alarm[0].MASK.reg = RTC_MODE2_MASK_SEL_HHMMSS;
    12de:	2203      	movs	r2, #3
    12e0:	771a      	strb	r2, [r3, #28]

	return STATUS_OK;
    12e2:	bd10      	pop	{r4, pc}
    12e4:	40001400 	.word	0x40001400
    12e8:	00001201 	.word	0x00001201

000012ec <test_components>:
uint32_t NVM_i = 0;
int n;

void printNum(uint8_t in, uint8_t Col, uint8_t Row);

void test_components(void){			
    12ec:	b570      	push	{r4, r5, r6, lr}
	
			/* Data ready to be sent */
			if (udi_cdc_is_rx_ready()) {
    12ee:	4b56      	ldr	r3, [pc, #344]	; (1448 <test_components+0x15c>)
    12f0:	4798      	blx	r3
    12f2:	2800      	cmp	r0, #0
    12f4:	d109      	bne.n	130a <test_components+0x1e>
				rx_data = udi_cdc_getc();
			}
		switch(rx_data){
    12f6:	4b55      	ldr	r3, [pc, #340]	; (144c <test_components+0x160>)
    12f8:	781b      	ldrb	r3, [r3, #0]
    12fa:	3b50      	subs	r3, #80	; 0x50
    12fc:	b2da      	uxtb	r2, r3
    12fe:	2a27      	cmp	r2, #39	; 0x27
    1300:	d810      	bhi.n	1324 <test_components+0x38>
    1302:	0093      	lsls	r3, r2, #2
    1304:	4a52      	ldr	r2, [pc, #328]	; (1450 <test_components+0x164>)
    1306:	58d3      	ldr	r3, [r2, r3]
    1308:	469f      	mov	pc, r3
				rx_data = udi_cdc_getc();
    130a:	4b52      	ldr	r3, [pc, #328]	; (1454 <test_components+0x168>)
    130c:	4798      	blx	r3
    130e:	4b4f      	ldr	r3, [pc, #316]	; (144c <test_components+0x160>)
    1310:	7018      	strb	r0, [r3, #0]
    1312:	e7f0      	b.n	12f6 <test_components+0xa>
			case 'l' :
				OPT3001_data = OPT3001_read();
    1314:	4b50      	ldr	r3, [pc, #320]	; (1458 <test_components+0x16c>)
    1316:	4798      	blx	r3
    1318:	4b50      	ldr	r3, [pc, #320]	; (145c <test_components+0x170>)
    131a:	6018      	str	r0, [r3, #0]
				udi_cdc_putc(OPT3001_data[0] + '0');
    131c:	7800      	ldrb	r0, [r0, #0]
    131e:	3030      	adds	r0, #48	; 0x30
    1320:	4b4f      	ldr	r3, [pc, #316]	; (1460 <test_components+0x174>)
    1322:	4798      	blx	r3
				//uart_data_tx1 ++;				
				
			break;				
		}
			
			rx_data = 0;
    1324:	2200      	movs	r2, #0
    1326:	4b49      	ldr	r3, [pc, #292]	; (144c <test_components+0x160>)
    1328:	701a      	strb	r2, [r3, #0]
}
    132a:	bd70      	pop	{r4, r5, r6, pc}
				temp1 =  Si7021_GetTemp();
    132c:	4b4d      	ldr	r3, [pc, #308]	; (1464 <test_components+0x178>)
    132e:	4798      	blx	r3
    1330:	4b4d      	ldr	r3, [pc, #308]	; (1468 <test_components+0x17c>)
    1332:	6018      	str	r0, [r3, #0]
				i2cLcdprintNum(temp1,0,26);
    1334:	221a      	movs	r2, #26
    1336:	2100      	movs	r1, #0
    1338:	4b4c      	ldr	r3, [pc, #304]	; (146c <test_components+0x180>)
    133a:	4798      	blx	r3
				break;
    133c:	e7f2      	b.n	1324 <test_components+0x38>
				RH1 = Si7021_GetRH();
    133e:	4b4c      	ldr	r3, [pc, #304]	; (1470 <test_components+0x184>)
    1340:	4798      	blx	r3
    1342:	4b4c      	ldr	r3, [pc, #304]	; (1474 <test_components+0x188>)
    1344:	6018      	str	r0, [r3, #0]
				i2cLcdprintNum(RH1,0,36);
    1346:	2224      	movs	r2, #36	; 0x24
    1348:	2100      	movs	r1, #0
    134a:	4b48      	ldr	r3, [pc, #288]	; (146c <test_components+0x180>)
    134c:	4798      	blx	r3
			break;
    134e:	e7e9      	b.n	1324 <test_components+0x38>
					error_code = nvm_read_buffer(
    1350:	4e49      	ldr	r6, [pc, #292]	; (1478 <test_components+0x18c>)
    1352:	4d4a      	ldr	r5, [pc, #296]	; (147c <test_components+0x190>)
    1354:	4c4a      	ldr	r4, [pc, #296]	; (1480 <test_components+0x194>)
    1356:	2240      	movs	r2, #64	; 0x40
    1358:	0031      	movs	r1, r6
    135a:	20fa      	movs	r0, #250	; 0xfa
    135c:	0240      	lsls	r0, r0, #9
    135e:	47a8      	blx	r5
    1360:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1362:	2805      	cmp	r0, #5
    1364:	d0f7      	beq.n	1356 <test_components+0x6a>
    1366:	4c44      	ldr	r4, [pc, #272]	; (1478 <test_components+0x18c>)
    1368:	0026      	movs	r6, r4
    136a:	3640      	adds	r6, #64	; 0x40
					udi_cdc_putc(page_buffer[i] + '0');
    136c:	4d3c      	ldr	r5, [pc, #240]	; (1460 <test_components+0x174>)
    136e:	7820      	ldrb	r0, [r4, #0]
    1370:	3030      	adds	r0, #48	; 0x30
    1372:	47a8      	blx	r5
    1374:	3401      	adds	r4, #1
				for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    1376:	42a6      	cmp	r6, r4
    1378:	d1f9      	bne.n	136e <test_components+0x82>
    137a:	e7d3      	b.n	1324 <test_components+0x38>
		switch(rx_data){
    137c:	2300      	movs	r3, #0
					page_buffer[i] = i;
    137e:	4a3e      	ldr	r2, [pc, #248]	; (1478 <test_components+0x18c>)
    1380:	54d3      	strb	r3, [r2, r3]
				for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    1382:	3301      	adds	r3, #1
    1384:	2b40      	cmp	r3, #64	; 0x40
    1386:	d1fb      	bne.n	1380 <test_components+0x94>
					error_code = nvm_erase_row(
    1388:	26fa      	movs	r6, #250	; 0xfa
    138a:	0276      	lsls	r6, r6, #9
    138c:	4d3d      	ldr	r5, [pc, #244]	; (1484 <test_components+0x198>)
    138e:	4c3c      	ldr	r4, [pc, #240]	; (1480 <test_components+0x194>)
    1390:	0030      	movs	r0, r6
    1392:	47a8      	blx	r5
    1394:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1396:	2805      	cmp	r0, #5
    1398:	d0fa      	beq.n	1390 <test_components+0xa4>
					error_code = nvm_write_buffer(
    139a:	4e37      	ldr	r6, [pc, #220]	; (1478 <test_components+0x18c>)
    139c:	4d3a      	ldr	r5, [pc, #232]	; (1488 <test_components+0x19c>)
    139e:	4c38      	ldr	r4, [pc, #224]	; (1480 <test_components+0x194>)
    13a0:	2240      	movs	r2, #64	; 0x40
    13a2:	0031      	movs	r1, r6
    13a4:	20fa      	movs	r0, #250	; 0xfa
    13a6:	0240      	lsls	r0, r0, #9
    13a8:	47a8      	blx	r5
    13aa:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    13ac:	2805      	cmp	r0, #5
    13ae:	d0f7      	beq.n	13a0 <test_components+0xb4>
    13b0:	e7b8      	b.n	1324 <test_components+0x38>
					error_code = nvm_erase_row(
    13b2:	26fa      	movs	r6, #250	; 0xfa
    13b4:	0276      	lsls	r6, r6, #9
    13b6:	4d33      	ldr	r5, [pc, #204]	; (1484 <test_components+0x198>)
    13b8:	4c31      	ldr	r4, [pc, #196]	; (1480 <test_components+0x194>)
    13ba:	0030      	movs	r0, r6
    13bc:	47a8      	blx	r5
    13be:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    13c0:	2805      	cmp	r0, #5
    13c2:	d0fa      	beq.n	13ba <test_components+0xce>
    13c4:	e7ae      	b.n	1324 <test_components+0x38>
				REG_PORT_OUTSET0 = PORT_PA27;
    13c6:	2280      	movs	r2, #128	; 0x80
    13c8:	0512      	lsls	r2, r2, #20
    13ca:	4b30      	ldr	r3, [pc, #192]	; (148c <test_components+0x1a0>)
    13cc:	601a      	str	r2, [r3, #0]
				break;
    13ce:	e7a9      	b.n	1324 <test_components+0x38>
				rtc_calendar_get_time(&mytime);
    13d0:	4c2f      	ldr	r4, [pc, #188]	; (1490 <test_components+0x1a4>)
    13d2:	0020      	movs	r0, r4
    13d4:	4b2f      	ldr	r3, [pc, #188]	; (1494 <test_components+0x1a8>)
    13d6:	4798      	blx	r3
				i2cLcdprintNum(mytime.hour,0,4);
    13d8:	78a0      	ldrb	r0, [r4, #2]
    13da:	2204      	movs	r2, #4
    13dc:	2100      	movs	r1, #0
    13de:	4d23      	ldr	r5, [pc, #140]	; (146c <test_components+0x180>)
    13e0:	47a8      	blx	r5
				i2cLcdprintNum(mytime.minute,0,7);
    13e2:	7860      	ldrb	r0, [r4, #1]
    13e4:	2207      	movs	r2, #7
    13e6:	2100      	movs	r1, #0
    13e8:	47a8      	blx	r5
				i2cLcdprintNum(mytime.second, 0, 10);
    13ea:	7820      	ldrb	r0, [r4, #0]
    13ec:	220a      	movs	r2, #10
    13ee:	2100      	movs	r1, #0
    13f0:	47a8      	blx	r5
				if(mytime.pm)
    13f2:	78e3      	ldrb	r3, [r4, #3]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d009      	beq.n	140c <test_components+0x120>
					str[0]='A';
    13f8:	4a27      	ldr	r2, [pc, #156]	; (1498 <test_components+0x1ac>)
    13fa:	2341      	movs	r3, #65	; 0x41
    13fc:	7013      	strb	r3, [r2, #0]
					str[1]='M';
    13fe:	330c      	adds	r3, #12
    1400:	7053      	strb	r3, [r2, #1]
					i2cLcdPrint(0,14,str);
    1402:	210e      	movs	r1, #14
    1404:	2000      	movs	r0, #0
    1406:	4b25      	ldr	r3, [pc, #148]	; (149c <test_components+0x1b0>)
    1408:	4798      	blx	r3
    140a:	e78b      	b.n	1324 <test_components+0x38>
					str[0]='P';
    140c:	4a22      	ldr	r2, [pc, #136]	; (1498 <test_components+0x1ac>)
    140e:	2350      	movs	r3, #80	; 0x50
    1410:	7013      	strb	r3, [r2, #0]
					str[1]='M';
    1412:	3b03      	subs	r3, #3
    1414:	7053      	strb	r3, [r2, #1]
					i2cLcdPrint(0,14,str);					
    1416:	210e      	movs	r1, #14
    1418:	2000      	movs	r0, #0
    141a:	4b20      	ldr	r3, [pc, #128]	; (149c <test_components+0x1b0>)
    141c:	4798      	blx	r3
    141e:	e781      	b.n	1324 <test_components+0x38>
				uart_sendBuffer(string1, sizeof(string1));
    1420:	210d      	movs	r1, #13
    1422:	481f      	ldr	r0, [pc, #124]	; (14a0 <test_components+0x1b4>)
    1424:	4b1f      	ldr	r3, [pc, #124]	; (14a4 <test_components+0x1b8>)
    1426:	4798      	blx	r3
				while(uart_data_rx1 != 'f'){
    1428:	4b1f      	ldr	r3, [pc, #124]	; (14a8 <test_components+0x1bc>)
    142a:	781b      	ldrb	r3, [r3, #0]
    142c:	2b66      	cmp	r3, #102	; 0x66
    142e:	d005      	beq.n	143c <test_components+0x150>
					uart_data_rx1 = uart_read();	
    1430:	4d1e      	ldr	r5, [pc, #120]	; (14ac <test_components+0x1c0>)
    1432:	4c1d      	ldr	r4, [pc, #116]	; (14a8 <test_components+0x1bc>)
    1434:	47a8      	blx	r5
    1436:	7020      	strb	r0, [r4, #0]
				while(uart_data_rx1 != 'f'){
    1438:	2866      	cmp	r0, #102	; 0x66
    143a:	d1fb      	bne.n	1434 <test_components+0x148>
				i2cLcdPrint(0,14,&uart_data_rx1);
    143c:	4a1a      	ldr	r2, [pc, #104]	; (14a8 <test_components+0x1bc>)
    143e:	210e      	movs	r1, #14
    1440:	2000      	movs	r0, #0
    1442:	4b16      	ldr	r3, [pc, #88]	; (149c <test_components+0x1b0>)
    1444:	4798      	blx	r3
			break;				
    1446:	e76d      	b.n	1324 <test_components+0x38>
    1448:	00000b99 	.word	0x00000b99
    144c:	2000030c 	.word	0x2000030c
    1450:	00006d74 	.word	0x00006d74
    1454:	00000c75 	.word	0x00000c75
    1458:	000048a1 	.word	0x000048a1
    145c:	20000500 	.word	0x20000500
    1460:	00000dcd 	.word	0x00000dcd
    1464:	00004ad5 	.word	0x00004ad5
    1468:	20000450 	.word	0x20000450
    146c:	0000115d 	.word	0x0000115d
    1470:	00004b75 	.word	0x00004b75
    1474:	20000568 	.word	0x20000568
    1478:	20000510 	.word	0x20000510
    147c:	00002129 	.word	0x00002129
    1480:	20000564 	.word	0x20000564
    1484:	00002195 	.word	0x00002195
    1488:	00002081 	.word	0x00002081
    148c:	41004418 	.word	0x41004418
    1490:	20000558 	.word	0x20000558
    1494:	00001251 	.word	0x00001251
    1498:	20000458 	.word	0x20000458
    149c:	00000ff9 	.word	0x00000ff9
    14a0:	2000003c 	.word	0x2000003c
    14a4:	00001581 	.word	0x00001581
    14a8:	20000550 	.word	0x20000550
    14ac:	00001561 	.word	0x00001561

000014b0 <pin_set_peripheral_function>:
#define UART_SERCOM_APBCMASK  PM_APBCMASK_SERCOM4
#define PINMUX_PAD2_TX        PINMUX_PB08D_SERCOM4_PAD0
#define PINMUX_PAD3_RX        PINMUX_PB09D_SERCOM4_PAD1

void pin_set_peripheral_function(uint32_t pinmux)
{
    14b0:	b570      	push	{r4, r5, r6, lr}
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    14b2:	0c02      	lsrs	r2, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    14b4:	b2d4      	uxtb	r4, r2
    14b6:	211f      	movs	r1, #31
    14b8:	4021      	ands	r1, r4
    uint8_t port = pad >> 5;        // get port
    14ba:	0952      	lsrs	r2, r2, #5
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    14bc:	b2d3      	uxtb	r3, r2
    14be:	01db      	lsls	r3, r3, #7
    14c0:	4a0d      	ldr	r2, [pc, #52]	; (14f8 <pin_set_peripheral_function+0x48>)
    14c2:	4694      	mov	ip, r2
    14c4:	4463      	add	r3, ip
    14c6:	185a      	adds	r2, r3, r1
    14c8:	3240      	adds	r2, #64	; 0x40
    14ca:	7815      	ldrb	r5, [r2, #0]
    14cc:	2601      	movs	r6, #1
    14ce:	4335      	orrs	r5, r6
    14d0:	7015      	strb	r5, [r2, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    14d2:	0849      	lsrs	r1, r1, #1
    14d4:	185b      	adds	r3, r3, r1
    14d6:	3330      	adds	r3, #48	; 0x30
    14d8:	7819      	ldrb	r1, [r3, #0]
    14da:	2201      	movs	r2, #1
    14dc:	4022      	ands	r2, r4
    14de:	0092      	lsls	r2, r2, #2
    14e0:	240f      	movs	r4, #15
    14e2:	4094      	lsls	r4, r2
    14e4:	43a1      	bics	r1, r4
    14e6:	7019      	strb	r1, [r3, #0]
                    //          
    // set new values
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    14e8:	7819      	ldrb	r1, [r3, #0]
    14ea:	0400      	lsls	r0, r0, #16
    14ec:	0c00      	lsrs	r0, r0, #16
    14ee:	4090      	lsls	r0, r2
    14f0:	4308      	orrs	r0, r1
    14f2:	b2c0      	uxtb	r0, r0
    14f4:	7018      	strb	r0, [r3, #0]
}
    14f6:	bd70      	pop	{r4, r5, r6, pc}
    14f8:	41004400 	.word	0x41004400

000014fc <uart_init>:


void uart_init(void)
{
    14fc:	b510      	push	{r4, lr}
	pin_set_peripheral_function(PINMUX_PAD2_TX);
    14fe:	480f      	ldr	r0, [pc, #60]	; (153c <uart_init+0x40>)
    1500:	4c0f      	ldr	r4, [pc, #60]	; (1540 <uart_init+0x44>)
    1502:	47a0      	blx	r4
	pin_set_peripheral_function(PINMUX_PAD3_RX);  
    1504:	480f      	ldr	r0, [pc, #60]	; (1544 <uart_init+0x48>)
    1506:	47a0      	blx	r4

	PM->APBCMASK.reg |= UART_SERCOM_APBCMASK;
    1508:	4a0f      	ldr	r2, [pc, #60]	; (1548 <uart_init+0x4c>)
    150a:	6a13      	ldr	r3, [r2, #32]
    150c:	2140      	movs	r1, #64	; 0x40
    150e:	430b      	orrs	r3, r1
    1510:	6213      	str	r3, [r2, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(UART_SERCOM_GCLK_ID) |
    1512:	4a0e      	ldr	r2, [pc, #56]	; (154c <uart_init+0x50>)
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <uart_init+0x54>)
    1516:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(UART_SERCOM_CLK_GEN);

	UART_SERCOM->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    1518:	22c0      	movs	r2, #192	; 0xc0
    151a:	0292      	lsls	r2, r2, #10
    151c:	4b0d      	ldr	r3, [pc, #52]	; (1554 <uart_init+0x58>)
    151e:	605a      	str	r2, [r3, #4]
	while (UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
    1520:	001a      	movs	r2, r3
    1522:	69d3      	ldr	r3, [r2, #28]
    1524:	075b      	lsls	r3, r3, #29
    1526:	d4fc      	bmi.n	1522 <uart_init+0x26>
	
	UART_SERCOM->USART.BAUD.reg = SERCOM_USART_BAUD_BAUD(64278);//60503 = 38400 baud rate & 64278 = 9600 baud rate
    1528:	4b0a      	ldr	r3, [pc, #40]	; (1554 <uart_init+0x58>)
    152a:	4a0b      	ldr	r2, [pc, #44]	; (1558 <uart_init+0x5c>)
    152c:	819a      	strh	r2, [r3, #12]
	
	UART_SERCOM->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE(1) | SERCOM_USART_CTRLA_DORD |
    152e:	4a0b      	ldr	r2, [pc, #44]	; (155c <uart_init+0x60>)
    1530:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_RXPO(1) | SERCOM_USART_CTRLA_TXPO(0) | SERCOM_USART_CTRLA_SAMPR(0) |
	SERCOM_USART_CTRLA_ENABLE;
	while (UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
    1532:	001a      	movs	r2, r3
    1534:	69d3      	ldr	r3, [r2, #28]
    1536:	079b      	lsls	r3, r3, #30
    1538:	d4fc      	bmi.n	1534 <uart_init+0x38>

}
    153a:	bd10      	pop	{r4, pc}
    153c:	00280003 	.word	0x00280003
    1540:	000014b1 	.word	0x000014b1
    1544:	00290003 	.word	0x00290003
    1548:	40000400 	.word	0x40000400
    154c:	00004218 	.word	0x00004218
    1550:	40000c00 	.word	0x40000c00
    1554:	42001800 	.word	0x42001800
    1558:	fffffb16 	.word	0xfffffb16
    155c:	40100006 	.word	0x40100006

00001560 <uart_read>:
}

uint8_t uart_read()
{
	/* Check if USART has new data */
	if(!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <uart_read+0x1c>)
    1562:	7e1b      	ldrb	r3, [r3, #24]
	{
		return 0;
    1564:	2000      	movs	r0, #0
	if(!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))
    1566:	075b      	lsls	r3, r3, #29
    1568:	d506      	bpl.n	1578 <uart_read+0x18>
	}
	else
	{
		/* Wait until synchronization is complete */
		while (UART_SERCOM->USART.SYNCBUSY.reg);
    156a:	4a04      	ldr	r2, [pc, #16]	; (157c <uart_read+0x1c>)
    156c:	69d3      	ldr	r3, [r2, #28]
    156e:	2b00      	cmp	r3, #0
    1570:	d1fc      	bne.n	156c <uart_read+0xc>
		/* Read data from USART module */
		return UART_SERCOM->USART.DATA.reg;
    1572:	4b02      	ldr	r3, [pc, #8]	; (157c <uart_read+0x1c>)
    1574:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1576:	b2c0      	uxtb	r0, r0
	}
}
    1578:	4770      	bx	lr
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	42001800 	.word	0x42001800

00001580 <uart_sendBuffer>:

void uart_sendBuffer(const uint8_t *tx_data, uint16_t length)
{
    1580:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	/* Wait until synchronization is complete */
	while (UART_SERCOM->USART.SYNCBUSY.reg);
    1582:	4a19      	ldr	r2, [pc, #100]	; (15e8 <uart_sendBuffer+0x68>)
    1584:	69d3      	ldr	r3, [r2, #28]
    1586:	2b00      	cmp	r3, #0
    1588:	d1fc      	bne.n	1584 <uart_sendBuffer+0x4>
    158a:	0007      	movs	r7, r0
    158c:	1841      	adds	r1, r0, r1
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    158e:	4a16      	ldr	r2, [pc, #88]	; (15e8 <uart_sendBuffer+0x68>)
    1590:	2501      	movs	r5, #1
		while (UART_SERCOM->USART.SYNCBUSY.reg);

			/* Write data to USART module */
			UART_SERCOM->USART.DATA.reg = data_to_send;

			while (!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1592:	2602      	movs	r6, #2
    1594:	e008      	b.n	15a8 <uart_sendBuffer+0x28>
		uint16_t data_to_send = tx_data[tx_pos++];
    1596:	7838      	ldrb	r0, [r7, #0]
		while (UART_SERCOM->USART.SYNCBUSY.reg);
    1598:	69d3      	ldr	r3, [r2, #28]
    159a:	2b00      	cmp	r3, #0
    159c:	d1fc      	bne.n	1598 <uart_sendBuffer+0x18>
			UART_SERCOM->USART.DATA.reg = data_to_send;
    159e:	8510      	strh	r0, [r2, #40]	; 0x28
			while (!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    15a0:	7e13      	ldrb	r3, [r2, #24]
    15a2:	4233      	tst	r3, r6
    15a4:	d0fc      	beq.n	15a0 <uart_sendBuffer+0x20>
    15a6:	3701      	adds	r7, #1
	while (length--) {
    15a8:	428f      	cmp	r7, r1
    15aa:	d00c      	beq.n	15c6 <uart_sendBuffer+0x46>
			if (UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    15ac:	7e13      	ldrb	r3, [r2, #24]
    15ae:	422b      	tst	r3, r5
    15b0:	d1f1      	bne.n	1596 <uart_sendBuffer+0x16>
    15b2:	4b0e      	ldr	r3, [pc, #56]	; (15ec <uart_sendBuffer+0x6c>)
    15b4:	7e14      	ldrb	r4, [r2, #24]
    15b6:	422c      	tst	r4, r5
    15b8:	d1ed      	bne.n	1596 <uart_sendBuffer+0x16>
			} else if (i == USART_TIMEOUT) {
    15ba:	2b01      	cmp	r3, #1
    15bc:	d012      	beq.n	15e4 <uart_sendBuffer+0x64>
    15be:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    15c0:	2b00      	cmp	r3, #0
    15c2:	d1f7      	bne.n	15b4 <uart_sendBuffer+0x34>
    15c4:	e7e7      	b.n	1596 <uart_sendBuffer+0x16>
			}
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    15c6:	4b08      	ldr	r3, [pc, #32]	; (15e8 <uart_sendBuffer+0x68>)
    15c8:	7e1b      	ldrb	r3, [r3, #24]
    15ca:	079b      	lsls	r3, r3, #30
    15cc:	d40a      	bmi.n	15e4 <uart_sendBuffer+0x64>
    15ce:	4b07      	ldr	r3, [pc, #28]	; (15ec <uart_sendBuffer+0x6c>)
    15d0:	4805      	ldr	r0, [pc, #20]	; (15e8 <uart_sendBuffer+0x68>)
    15d2:	2102      	movs	r1, #2
    15d4:	7e02      	ldrb	r2, [r0, #24]
    15d6:	420a      	tst	r2, r1
    15d8:	d104      	bne.n	15e4 <uart_sendBuffer+0x64>
			break;
		} else if (i == USART_TIMEOUT) {
    15da:	2b01      	cmp	r3, #1
    15dc:	d002      	beq.n	15e4 <uart_sendBuffer+0x64>
    15de:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    15e0:	2b00      	cmp	r3, #0
    15e2:	d1f7      	bne.n	15d4 <uart_sendBuffer+0x54>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    15e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	42001800 	.word	0x42001800
    15ec:	0000ffff 	.word	0x0000ffff

000015f0 <ui_powerdown>:
    15f0:	2280      	movs	r2, #128	; 0x80
    15f2:	05d2      	lsls	r2, r2, #23
    15f4:	4b01      	ldr	r3, [pc, #4]	; (15fc <ui_powerdown+0xc>)
    15f6:	619a      	str	r2, [r3, #24]
}

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    15f8:	4770      	bx	lr
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	41004480 	.word	0x41004480

00001600 <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
    1600:	b510      	push	{r4, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1602:	2100      	movs	r1, #0
    1604:	200f      	movs	r0, #15
    1606:	4b01      	ldr	r3, [pc, #4]	; (160c <ui_wakeup_enable+0xc>)
    1608:	4798      	blx	r3
}
    160a:	bd10      	pop	{r4, pc}
    160c:	00001db5 	.word	0x00001db5

00001610 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    1610:	b510      	push	{r4, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1612:	2100      	movs	r1, #0
    1614:	200f      	movs	r0, #15
    1616:	4b01      	ldr	r3, [pc, #4]	; (161c <ui_wakeup_disable+0xc>)
    1618:	4798      	blx	r3
}
    161a:	bd10      	pop	{r4, pc}
    161c:	00001dd5 	.word	0x00001dd5

00001620 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    1620:	2280      	movs	r2, #128	; 0x80
    1622:	05d2      	lsls	r2, r2, #23
    1624:	4b01      	ldr	r3, [pc, #4]	; (162c <ui_wakeup+0xc>)
    1626:	615a      	str	r2, [r3, #20]
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    1628:	4770      	bx	lr
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	41004480 	.word	0x41004480

00001630 <ui_com_open>:


void ui_com_open(uint8_t port)
{
	UNUSED(port);
}
    1630:	4770      	bx	lr

00001632 <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
    1632:	4770      	bx	lr

00001634 <ui_process>:
{

}

void ui_process(uint16_t framenumber)
{
    1634:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
    1636:	21fa      	movs	r1, #250	; 0xfa
    1638:	0089      	lsls	r1, r1, #2
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <ui_process+0x2c>)
    163c:	4798      	blx	r3
    163e:	b289      	uxth	r1, r1
    1640:	2900      	cmp	r1, #0
    1642:	d104      	bne.n	164e <ui_process+0x1a>
    1644:	2280      	movs	r2, #128	; 0x80
    1646:	05d2      	lsls	r2, r2, #23
    1648:	4b06      	ldr	r3, [pc, #24]	; (1664 <ui_process+0x30>)
    164a:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
    164c:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
    164e:	23fa      	movs	r3, #250	; 0xfa
    1650:	005b      	lsls	r3, r3, #1
    1652:	4299      	cmp	r1, r3
    1654:	d1fa      	bne.n	164c <ui_process+0x18>
		port_base->OUTSET.reg = pin_mask;
    1656:	2280      	movs	r2, #128	; 0x80
    1658:	05d2      	lsls	r2, r2, #23
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <ui_process+0x30>)
    165c:	619a      	str	r2, [r3, #24]
}
    165e:	e7f5      	b.n	164c <ui_process+0x18>
    1660:	00004cf1 	.word	0x00004cf1
    1664:	41004480 	.word	0x41004480

00001668 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1668:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    166a:	4b11      	ldr	r3, [pc, #68]	; (16b0 <udc_next_desc_in_iface+0x48>)
    166c:	681b      	ldr	r3, [r3, #0]
    166e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1670:	7894      	ldrb	r4, [r2, #2]
    1672:	78d3      	ldrb	r3, [r2, #3]
    1674:	021b      	lsls	r3, r3, #8
    1676:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1678:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    167a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    167c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    167e:	4290      	cmp	r0, r2
    1680:	d210      	bcs.n	16a4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1682:	7843      	ldrb	r3, [r0, #1]
    1684:	2b04      	cmp	r3, #4
    1686:	d00f      	beq.n	16a8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1688:	428b      	cmp	r3, r1
    168a:	d00a      	beq.n	16a2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    168c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    168e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1690:	4290      	cmp	r0, r2
    1692:	d205      	bcs.n	16a0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1694:	7843      	ldrb	r3, [r0, #1]
    1696:	2b04      	cmp	r3, #4
    1698:	d008      	beq.n	16ac <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    169a:	428b      	cmp	r3, r1
    169c:	d1f6      	bne.n	168c <udc_next_desc_in_iface+0x24>
    169e:	e000      	b.n	16a2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    16a0:	2000      	movs	r0, #0
}
    16a2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    16a4:	2000      	movs	r0, #0
    16a6:	e7fc      	b.n	16a2 <udc_next_desc_in_iface+0x3a>
    16a8:	2000      	movs	r0, #0
    16aa:	e7fa      	b.n	16a2 <udc_next_desc_in_iface+0x3a>
    16ac:	2000      	movs	r0, #0
    16ae:	e7f8      	b.n	16a2 <udc_next_desc_in_iface+0x3a>
    16b0:	20000320 	.word	0x20000320

000016b4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    16b4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    16b6:	4b03      	ldr	r3, [pc, #12]	; (16c4 <udc_valid_address+0x10>)
    16b8:	885b      	ldrh	r3, [r3, #2]
    16ba:	207f      	movs	r0, #127	; 0x7f
    16bc:	4018      	ands	r0, r3
    16be:	4b02      	ldr	r3, [pc, #8]	; (16c8 <udc_valid_address+0x14>)
    16c0:	4798      	blx	r3
}
    16c2:	bd10      	pop	{r4, pc}
    16c4:	200007e0 	.word	0x200007e0
    16c8:	0000350d 	.word	0x0000350d

000016cc <udc_update_iface_desc>:
{
    16cc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    16ce:	4b19      	ldr	r3, [pc, #100]	; (1734 <udc_update_iface_desc+0x68>)
    16d0:	781b      	ldrb	r3, [r3, #0]
		return false;
    16d2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    16d4:	2b00      	cmp	r3, #0
    16d6:	d029      	beq.n	172c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16d8:	4b17      	ldr	r3, [pc, #92]	; (1738 <udc_update_iface_desc+0x6c>)
    16da:	681b      	ldr	r3, [r3, #0]
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	791c      	ldrb	r4, [r3, #4]
    16e0:	4284      	cmp	r4, r0
    16e2:	d923      	bls.n	172c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    16e4:	4a15      	ldr	r2, [pc, #84]	; (173c <udc_update_iface_desc+0x70>)
    16e6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    16e8:	789a      	ldrb	r2, [r3, #2]
    16ea:	78dc      	ldrb	r4, [r3, #3]
    16ec:	0224      	lsls	r4, r4, #8
    16ee:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    16f0:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    16f2:	42a3      	cmp	r3, r4
    16f4:	d21c      	bcs.n	1730 <udc_update_iface_desc+0x64>
    16f6:	2500      	movs	r5, #0
    16f8:	2601      	movs	r6, #1
    16fa:	e007      	b.n	170c <udc_update_iface_desc+0x40>
    16fc:	4a0f      	ldr	r2, [pc, #60]	; (173c <udc_update_iface_desc+0x70>)
    16fe:	6013      	str	r3, [r2, #0]
    1700:	e00f      	b.n	1722 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1702:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1704:	189b      	adds	r3, r3, r2
    1706:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1708:	42a3      	cmp	r3, r4
    170a:	d20c      	bcs.n	1726 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    170c:	785a      	ldrb	r2, [r3, #1]
    170e:	2a04      	cmp	r2, #4
    1710:	d1f7      	bne.n	1702 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1712:	789a      	ldrb	r2, [r3, #2]
    1714:	4282      	cmp	r2, r0
    1716:	d1f4      	bne.n	1702 <udc_update_iface_desc+0x36>
    1718:	78da      	ldrb	r2, [r3, #3]
    171a:	428a      	cmp	r2, r1
    171c:	d1f1      	bne.n	1702 <udc_update_iface_desc+0x36>
    171e:	2d00      	cmp	r5, #0
    1720:	d1ec      	bne.n	16fc <udc_update_iface_desc+0x30>
				return true; // Interface found
    1722:	2201      	movs	r2, #1
    1724:	e002      	b.n	172c <udc_update_iface_desc+0x60>
    1726:	4a05      	ldr	r2, [pc, #20]	; (173c <udc_update_iface_desc+0x70>)
    1728:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    172a:	2200      	movs	r2, #0
}
    172c:	0010      	movs	r0, r2
    172e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1730:	2200      	movs	r2, #0
    1732:	e7fb      	b.n	172c <udc_update_iface_desc+0x60>
    1734:	2000031c 	.word	0x2000031c
    1738:	20000320 	.word	0x20000320
    173c:	20000324 	.word	0x20000324

00001740 <udc_iface_disable>:
{
    1740:	b5f0      	push	{r4, r5, r6, r7, lr}
    1742:	46c6      	mov	lr, r8
    1744:	b500      	push	{lr}
    1746:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1748:	2100      	movs	r1, #0
    174a:	4b13      	ldr	r3, [pc, #76]	; (1798 <udc_iface_disable+0x58>)
    174c:	4798      	blx	r3
    174e:	1e05      	subs	r5, r0, #0
    1750:	d103      	bne.n	175a <udc_iface_disable+0x1a>
}
    1752:	0028      	movs	r0, r5
    1754:	bc04      	pop	{r2}
    1756:	4690      	mov	r8, r2
    1758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    175a:	4b10      	ldr	r3, [pc, #64]	; (179c <udc_iface_disable+0x5c>)
    175c:	681b      	ldr	r3, [r3, #0]
    175e:	685b      	ldr	r3, [r3, #4]
    1760:	00a2      	lsls	r2, r4, #2
    1762:	58d3      	ldr	r3, [r2, r3]
    1764:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1766:	68db      	ldr	r3, [r3, #12]
    1768:	4798      	blx	r3
    176a:	0001      	movs	r1, r0
    176c:	0020      	movs	r0, r4
    176e:	4b0a      	ldr	r3, [pc, #40]	; (1798 <udc_iface_disable+0x58>)
    1770:	4798      	blx	r3
    1772:	1e05      	subs	r5, r0, #0
    1774:	d0ed      	beq.n	1752 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1776:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <udc_iface_disable+0x60>)
    1778:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    177a:	4e0a      	ldr	r6, [pc, #40]	; (17a4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    177c:	4f0a      	ldr	r7, [pc, #40]	; (17a8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    177e:	2105      	movs	r1, #5
    1780:	0020      	movs	r0, r4
    1782:	47b0      	blx	r6
    1784:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1786:	d002      	beq.n	178e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1788:	7880      	ldrb	r0, [r0, #2]
    178a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    178c:	e7f7      	b.n	177e <udc_iface_disable+0x3e>
	udi_api->disable();
    178e:	4643      	mov	r3, r8
    1790:	685b      	ldr	r3, [r3, #4]
    1792:	4798      	blx	r3
	return true;
    1794:	e7dd      	b.n	1752 <udc_iface_disable+0x12>
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	000016cd 	.word	0x000016cd
    179c:	20000320 	.word	0x20000320
    17a0:	20000324 	.word	0x20000324
    17a4:	00001669 	.word	0x00001669
    17a8:	0000304d 	.word	0x0000304d

000017ac <udc_iface_enable>:
{
    17ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ae:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    17b0:	4b0f      	ldr	r3, [pc, #60]	; (17f0 <udc_iface_enable+0x44>)
    17b2:	4798      	blx	r3
    17b4:	2800      	cmp	r0, #0
    17b6:	d019      	beq.n	17ec <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    17b8:	4b0e      	ldr	r3, [pc, #56]	; (17f4 <udc_iface_enable+0x48>)
    17ba:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17bc:	4e0e      	ldr	r6, [pc, #56]	; (17f8 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    17be:	4f0f      	ldr	r7, [pc, #60]	; (17fc <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17c0:	2105      	movs	r1, #5
    17c2:	0020      	movs	r0, r4
    17c4:	47b0      	blx	r6
    17c6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    17c8:	d009      	beq.n	17de <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    17ca:	7903      	ldrb	r3, [r0, #4]
    17cc:	7942      	ldrb	r2, [r0, #5]
    17ce:	0212      	lsls	r2, r2, #8
    17d0:	431a      	orrs	r2, r3
    17d2:	78c1      	ldrb	r1, [r0, #3]
    17d4:	7880      	ldrb	r0, [r0, #2]
    17d6:	47b8      	blx	r7
    17d8:	2800      	cmp	r0, #0
    17da:	d1f1      	bne.n	17c0 <udc_iface_enable+0x14>
    17dc:	e006      	b.n	17ec <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    17de:	4b08      	ldr	r3, [pc, #32]	; (1800 <udc_iface_enable+0x54>)
    17e0:	681b      	ldr	r3, [r3, #0]
    17e2:	685b      	ldr	r3, [r3, #4]
    17e4:	00ad      	lsls	r5, r5, #2
    17e6:	58eb      	ldr	r3, [r5, r3]
    17e8:	681b      	ldr	r3, [r3, #0]
    17ea:	4798      	blx	r3
}
    17ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	000016cd 	.word	0x000016cd
    17f4:	20000324 	.word	0x20000324
    17f8:	00001669 	.word	0x00001669
    17fc:	000030a5 	.word	0x000030a5
    1800:	20000320 	.word	0x20000320

00001804 <udc_start>:
{
    1804:	b510      	push	{r4, lr}
	udd_enable();
    1806:	4b01      	ldr	r3, [pc, #4]	; (180c <udc_start+0x8>)
    1808:	4798      	blx	r3
}
    180a:	bd10      	pop	{r4, pc}
    180c:	00003619 	.word	0x00003619

00001810 <udc_reset>:
{
    1810:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1812:	4b0e      	ldr	r3, [pc, #56]	; (184c <udc_reset+0x3c>)
    1814:	781b      	ldrb	r3, [r3, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d011      	beq.n	183e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    181a:	4b0d      	ldr	r3, [pc, #52]	; (1850 <udc_reset+0x40>)
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1820:	791b      	ldrb	r3, [r3, #4]
    1822:	2b00      	cmp	r3, #0
    1824:	d00b      	beq.n	183e <udc_reset+0x2e>
    1826:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1828:	4e0a      	ldr	r6, [pc, #40]	; (1854 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    182a:	4d09      	ldr	r5, [pc, #36]	; (1850 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    182c:	0020      	movs	r0, r4
    182e:	47b0      	blx	r6
				iface_num++) {
    1830:	3401      	adds	r4, #1
    1832:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1834:	682b      	ldr	r3, [r5, #0]
    1836:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1838:	791b      	ldrb	r3, [r3, #4]
    183a:	42a3      	cmp	r3, r4
    183c:	d8f6      	bhi.n	182c <udc_reset+0x1c>
	udc_num_configuration = 0;
    183e:	2200      	movs	r2, #0
    1840:	4b02      	ldr	r3, [pc, #8]	; (184c <udc_reset+0x3c>)
    1842:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1844:	3201      	adds	r2, #1
    1846:	4b04      	ldr	r3, [pc, #16]	; (1858 <udc_reset+0x48>)
    1848:	801a      	strh	r2, [r3, #0]
}
    184a:	bd70      	pop	{r4, r5, r6, pc}
    184c:	2000031c 	.word	0x2000031c
    1850:	20000320 	.word	0x20000320
    1854:	00001741 	.word	0x00001741
    1858:	20000314 	.word	0x20000314

0000185c <udc_sof_notify>:
{
    185c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    185e:	4b0e      	ldr	r3, [pc, #56]	; (1898 <udc_sof_notify+0x3c>)
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d017      	beq.n	1896 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1866:	4b0d      	ldr	r3, [pc, #52]	; (189c <udc_sof_notify+0x40>)
    1868:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    186a:	681a      	ldr	r2, [r3, #0]
    186c:	7912      	ldrb	r2, [r2, #4]
    186e:	2a00      	cmp	r2, #0
    1870:	d011      	beq.n	1896 <udc_sof_notify+0x3a>
    1872:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1874:	4d09      	ldr	r5, [pc, #36]	; (189c <udc_sof_notify+0x40>)
    1876:	e006      	b.n	1886 <udc_sof_notify+0x2a>
				iface_num++) {
    1878:	3401      	adds	r4, #1
    187a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    187c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    187e:	681a      	ldr	r2, [r3, #0]
    1880:	7912      	ldrb	r2, [r2, #4]
    1882:	42a2      	cmp	r2, r4
    1884:	d907      	bls.n	1896 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1886:	685b      	ldr	r3, [r3, #4]
    1888:	00a2      	lsls	r2, r4, #2
    188a:	58d3      	ldr	r3, [r2, r3]
    188c:	691b      	ldr	r3, [r3, #16]
    188e:	2b00      	cmp	r3, #0
    1890:	d0f2      	beq.n	1878 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1892:	4798      	blx	r3
    1894:	e7f0      	b.n	1878 <udc_sof_notify+0x1c>
}
    1896:	bd70      	pop	{r4, r5, r6, pc}
    1898:	2000031c 	.word	0x2000031c
    189c:	20000320 	.word	0x20000320

000018a0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    18a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    18a2:	4baa      	ldr	r3, [pc, #680]	; (1b4c <udc_process_setup+0x2ac>)
    18a4:	2200      	movs	r2, #0
    18a6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    18a8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    18aa:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	b25a      	sxtb	r2, r3
    18b0:	2a00      	cmp	r2, #0
    18b2:	db13      	blt.n	18dc <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18b4:	2260      	movs	r2, #96	; 0x60
    18b6:	421a      	tst	r2, r3
    18b8:	d100      	bne.n	18bc <udc_process_setup+0x1c>
    18ba:	e0d6      	b.n	1a6a <udc_process_setup+0x1ca>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18bc:	4ba3      	ldr	r3, [pc, #652]	; (1b4c <udc_process_setup+0x2ac>)
    18be:	781a      	ldrb	r2, [r3, #0]
    18c0:	231f      	movs	r3, #31
    18c2:	4013      	ands	r3, r2
    18c4:	2b01      	cmp	r3, #1
    18c6:	d100      	bne.n	18ca <udc_process_setup+0x2a>
    18c8:	e172      	b.n	1bb0 <udc_process_setup+0x310>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    18ca:	4ba0      	ldr	r3, [pc, #640]	; (1b4c <udc_process_setup+0x2ac>)
    18cc:	781a      	ldrb	r2, [r3, #0]
    18ce:	231f      	movs	r3, #31
    18d0:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    18d2:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    18d4:	2b02      	cmp	r3, #2
    18d6:	d100      	bne.n	18da <udc_process_setup+0x3a>
    18d8:	e1c8      	b.n	1c6c <udc_process_setup+0x3cc>
#endif
}
    18da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    18dc:	4a9b      	ldr	r2, [pc, #620]	; (1b4c <udc_process_setup+0x2ac>)
    18de:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    18e0:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    18e2:	2a00      	cmp	r2, #0
    18e4:	d0f9      	beq.n	18da <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    18e6:	2160      	movs	r1, #96	; 0x60
    18e8:	4219      	tst	r1, r3
    18ea:	d1e7      	bne.n	18bc <udc_process_setup+0x1c>
    18ec:	211f      	movs	r1, #31
    18ee:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    18f0:	d108      	bne.n	1904 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    18f2:	4996      	ldr	r1, [pc, #600]	; (1b4c <udc_process_setup+0x2ac>)
    18f4:	7849      	ldrb	r1, [r1, #1]
    18f6:	2906      	cmp	r1, #6
    18f8:	d023      	beq.n	1942 <udc_process_setup+0xa2>
    18fa:	2908      	cmp	r1, #8
    18fc:	d100      	bne.n	1900 <udc_process_setup+0x60>
    18fe:	e083      	b.n	1a08 <udc_process_setup+0x168>
    1900:	2900      	cmp	r1, #0
    1902:	d017      	beq.n	1934 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1904:	2b01      	cmp	r3, #1
    1906:	d100      	bne.n	190a <udc_process_setup+0x6a>
    1908:	e086      	b.n	1a18 <udc_process_setup+0x178>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    190a:	2b02      	cmp	r3, #2
    190c:	d1d6      	bne.n	18bc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    190e:	4b8f      	ldr	r3, [pc, #572]	; (1b4c <udc_process_setup+0x2ac>)
    1910:	785b      	ldrb	r3, [r3, #1]
	return false;
    1912:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1914:	2b00      	cmp	r3, #0
    1916:	d000      	beq.n	191a <udc_process_setup+0x7a>
    1918:	e1a4      	b.n	1c64 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    191a:	2a02      	cmp	r2, #2
    191c:	d1d5      	bne.n	18ca <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    191e:	4b8b      	ldr	r3, [pc, #556]	; (1b4c <udc_process_setup+0x2ac>)
    1920:	7918      	ldrb	r0, [r3, #4]
    1922:	4b8b      	ldr	r3, [pc, #556]	; (1b50 <udc_process_setup+0x2b0>)
    1924:	4798      	blx	r3
    1926:	4b8b      	ldr	r3, [pc, #556]	; (1b54 <udc_process_setup+0x2b4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1928:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    192a:	2102      	movs	r1, #2
    192c:	0018      	movs	r0, r3
    192e:	4b8a      	ldr	r3, [pc, #552]	; (1b58 <udc_process_setup+0x2b8>)
    1930:	4798      	blx	r3
    1932:	e0fb      	b.n	1b2c <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1934:	2a02      	cmp	r2, #2
    1936:	d1c8      	bne.n	18ca <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1938:	3102      	adds	r1, #2
    193a:	4888      	ldr	r0, [pc, #544]	; (1b5c <udc_process_setup+0x2bc>)
    193c:	4b86      	ldr	r3, [pc, #536]	; (1b58 <udc_process_setup+0x2b8>)
    193e:	4798      	blx	r3
    1940:	e0f4      	b.n	1b2c <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1942:	4b82      	ldr	r3, [pc, #520]	; (1b4c <udc_process_setup+0x2ac>)
    1944:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1946:	0a13      	lsrs	r3, r2, #8
    1948:	2b02      	cmp	r3, #2
    194a:	d023      	beq.n	1994 <udc_process_setup+0xf4>
    194c:	b2d9      	uxtb	r1, r3
    194e:	2902      	cmp	r1, #2
    1950:	d90f      	bls.n	1972 <udc_process_setup+0xd2>
    1952:	2b03      	cmp	r3, #3
    1954:	d034      	beq.n	19c0 <udc_process_setup+0x120>
    1956:	2b0f      	cmp	r3, #15
    1958:	d000      	beq.n	195c <udc_process_setup+0xbc>
    195a:	e180      	b.n	1c5e <udc_process_setup+0x3be>
		if (udc_config.conf_bos == NULL) {
    195c:	4b80      	ldr	r3, [pc, #512]	; (1b60 <udc_process_setup+0x2c0>)
    195e:	6898      	ldr	r0, [r3, #8]
    1960:	2800      	cmp	r0, #0
    1962:	d0b2      	beq.n	18ca <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1964:	7883      	ldrb	r3, [r0, #2]
    1966:	78c1      	ldrb	r1, [r0, #3]
    1968:	0209      	lsls	r1, r1, #8
    196a:	4319      	orrs	r1, r3
    196c:	4b7a      	ldr	r3, [pc, #488]	; (1b58 <udc_process_setup+0x2b8>)
    196e:	4798      	blx	r3
    1970:	e007      	b.n	1982 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1972:	2b01      	cmp	r3, #1
    1974:	d000      	beq.n	1978 <udc_process_setup+0xd8>
    1976:	e172      	b.n	1c5e <udc_process_setup+0x3be>
				(uint8_t *) udc_config.confdev_lsfs,
    1978:	4b79      	ldr	r3, [pc, #484]	; (1b60 <udc_process_setup+0x2c0>)
    197a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    197c:	7801      	ldrb	r1, [r0, #0]
    197e:	4b76      	ldr	r3, [pc, #472]	; (1b58 <udc_process_setup+0x2b8>)
    1980:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1982:	4b72      	ldr	r3, [pc, #456]	; (1b4c <udc_process_setup+0x2ac>)
    1984:	88da      	ldrh	r2, [r3, #6]
    1986:	899b      	ldrh	r3, [r3, #12]
    1988:	4293      	cmp	r3, r2
    198a:	d800      	bhi.n	198e <udc_process_setup+0xee>
    198c:	e0ce      	b.n	1b2c <udc_process_setup+0x28c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    198e:	4b6f      	ldr	r3, [pc, #444]	; (1b4c <udc_process_setup+0x2ac>)
    1990:	819a      	strh	r2, [r3, #12]
    1992:	e0cb      	b.n	1b2c <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1994:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1996:	4b72      	ldr	r3, [pc, #456]	; (1b60 <udc_process_setup+0x2c0>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	7c5b      	ldrb	r3, [r3, #17]
    199c:	4293      	cmp	r3, r2
    199e:	d800      	bhi.n	19a2 <udc_process_setup+0x102>
    19a0:	e793      	b.n	18ca <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    19a2:	4b6f      	ldr	r3, [pc, #444]	; (1b60 <udc_process_setup+0x2c0>)
    19a4:	685b      	ldr	r3, [r3, #4]
    19a6:	00d2      	lsls	r2, r2, #3
    19a8:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    19aa:	7883      	ldrb	r3, [r0, #2]
    19ac:	78c1      	ldrb	r1, [r0, #3]
    19ae:	0209      	lsls	r1, r1, #8
    19b0:	4319      	orrs	r1, r3
    19b2:	4b69      	ldr	r3, [pc, #420]	; (1b58 <udc_process_setup+0x2b8>)
    19b4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    19b6:	4b65      	ldr	r3, [pc, #404]	; (1b4c <udc_process_setup+0x2ac>)
    19b8:	689b      	ldr	r3, [r3, #8]
    19ba:	2202      	movs	r2, #2
    19bc:	705a      	strb	r2, [r3, #1]
    19be:	e7e0      	b.n	1982 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    19c0:	23ff      	movs	r3, #255	; 0xff
    19c2:	401a      	ands	r2, r3
    19c4:	2a01      	cmp	r2, #1
    19c6:	d01c      	beq.n	1a02 <udc_process_setup+0x162>
    19c8:	2a00      	cmp	r2, #0
    19ca:	d015      	beq.n	19f8 <udc_process_setup+0x158>
    19cc:	2a02      	cmp	r2, #2
    19ce:	d000      	beq.n	19d2 <udc_process_setup+0x132>
    19d0:	e774      	b.n	18bc <udc_process_setup+0x1c>
		str = udc_string_product_name;
    19d2:	4c64      	ldr	r4, [pc, #400]	; (1b64 <udc_process_setup+0x2c4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    19d4:	210f      	movs	r1, #15
    19d6:	4a64      	ldr	r2, [pc, #400]	; (1b68 <udc_process_setup+0x2c8>)
    19d8:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    19da:	5ce0      	ldrb	r0, [r4, r3]
    19dc:	8050      	strh	r0, [r2, #2]
    19de:	3301      	adds	r3, #1
    19e0:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    19e2:	b2d8      	uxtb	r0, r3
    19e4:	4288      	cmp	r0, r1
    19e6:	d3f8      	bcc.n	19da <udc_process_setup+0x13a>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    19e8:	0049      	lsls	r1, r1, #1
    19ea:	3102      	adds	r1, #2
    19ec:	485e      	ldr	r0, [pc, #376]	; (1b68 <udc_process_setup+0x2c8>)
    19ee:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    19f0:	b289      	uxth	r1, r1
    19f2:	4b59      	ldr	r3, [pc, #356]	; (1b58 <udc_process_setup+0x2b8>)
    19f4:	4798      	blx	r3
    19f6:	e7c4      	b.n	1982 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    19f8:	2104      	movs	r1, #4
    19fa:	485c      	ldr	r0, [pc, #368]	; (1b6c <udc_process_setup+0x2cc>)
    19fc:	4b56      	ldr	r3, [pc, #344]	; (1b58 <udc_process_setup+0x2b8>)
    19fe:	4798      	blx	r3
    1a00:	e7bf      	b.n	1982 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1a02:	4c5b      	ldr	r4, [pc, #364]	; (1b70 <udc_process_setup+0x2d0>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a04:	2109      	movs	r1, #9
    1a06:	e7e6      	b.n	19d6 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a08:	2a01      	cmp	r2, #1
    1a0a:	d000      	beq.n	1a0e <udc_process_setup+0x16e>
    1a0c:	e75d      	b.n	18ca <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1a0e:	2101      	movs	r1, #1
    1a10:	4858      	ldr	r0, [pc, #352]	; (1b74 <udc_process_setup+0x2d4>)
    1a12:	4b51      	ldr	r3, [pc, #324]	; (1b58 <udc_process_setup+0x2b8>)
    1a14:	4798      	blx	r3
    1a16:	e089      	b.n	1b2c <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a18:	494c      	ldr	r1, [pc, #304]	; (1b4c <udc_process_setup+0x2ac>)
    1a1a:	7849      	ldrb	r1, [r1, #1]
    1a1c:	290a      	cmp	r1, #10
    1a1e:	d000      	beq.n	1a22 <udc_process_setup+0x182>
    1a20:	e773      	b.n	190a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a22:	2a01      	cmp	r2, #1
    1a24:	d000      	beq.n	1a28 <udc_process_setup+0x188>
    1a26:	e0c3      	b.n	1bb0 <udc_process_setup+0x310>
	if (!udc_num_configuration) {
    1a28:	4b52      	ldr	r3, [pc, #328]	; (1b74 <udc_process_setup+0x2d4>)
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d100      	bne.n	1a32 <udc_process_setup+0x192>
    1a30:	e0be      	b.n	1bb0 <udc_process_setup+0x310>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a32:	4b46      	ldr	r3, [pc, #280]	; (1b4c <udc_process_setup+0x2ac>)
    1a34:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a36:	4b50      	ldr	r3, [pc, #320]	; (1b78 <udc_process_setup+0x2d8>)
    1a38:	681d      	ldr	r5, [r3, #0]
    1a3a:	682b      	ldr	r3, [r5, #0]
    1a3c:	791b      	ldrb	r3, [r3, #4]
    1a3e:	42a3      	cmp	r3, r4
    1a40:	d800      	bhi.n	1a44 <udc_process_setup+0x1a4>
    1a42:	e0b5      	b.n	1bb0 <udc_process_setup+0x310>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a44:	2100      	movs	r1, #0
    1a46:	0020      	movs	r0, r4
    1a48:	4b4c      	ldr	r3, [pc, #304]	; (1b7c <udc_process_setup+0x2dc>)
    1a4a:	4798      	blx	r3
    1a4c:	2800      	cmp	r0, #0
    1a4e:	d100      	bne.n	1a52 <udc_process_setup+0x1b2>
    1a50:	e734      	b.n	18bc <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a52:	686b      	ldr	r3, [r5, #4]
    1a54:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1a56:	58e3      	ldr	r3, [r4, r3]
    1a58:	68db      	ldr	r3, [r3, #12]
    1a5a:	4798      	blx	r3
    1a5c:	4b48      	ldr	r3, [pc, #288]	; (1b80 <udc_process_setup+0x2e0>)
    1a5e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1a60:	2101      	movs	r1, #1
    1a62:	0018      	movs	r0, r3
    1a64:	4b3c      	ldr	r3, [pc, #240]	; (1b58 <udc_process_setup+0x2b8>)
    1a66:	4798      	blx	r3
    1a68:	e060      	b.n	1b2c <udc_process_setup+0x28c>
    1a6a:	221f      	movs	r2, #31
    1a6c:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a6e:	d15f      	bne.n	1b30 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a70:	4a36      	ldr	r2, [pc, #216]	; (1b4c <udc_process_setup+0x2ac>)
    1a72:	7852      	ldrb	r2, [r2, #1]
    1a74:	2a03      	cmp	r2, #3
    1a76:	d100      	bne.n	1a7a <udc_process_setup+0x1da>
    1a78:	e0f3      	b.n	1c62 <udc_process_setup+0x3c2>
    1a7a:	b2d1      	uxtb	r1, r2
    1a7c:	2903      	cmp	r1, #3
    1a7e:	d93b      	bls.n	1af8 <udc_process_setup+0x258>
    1a80:	2a05      	cmp	r2, #5
    1a82:	d04b      	beq.n	1b1c <udc_process_setup+0x27c>
    1a84:	2a09      	cmp	r2, #9
    1a86:	d153      	bne.n	1b30 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    1a88:	4b30      	ldr	r3, [pc, #192]	; (1b4c <udc_process_setup+0x2ac>)
    1a8a:	88db      	ldrh	r3, [r3, #6]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d000      	beq.n	1a92 <udc_process_setup+0x1f2>
    1a90:	e71b      	b.n	18ca <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1a92:	4b3c      	ldr	r3, [pc, #240]	; (1b84 <udc_process_setup+0x2e4>)
    1a94:	4798      	blx	r3
    1a96:	2800      	cmp	r0, #0
    1a98:	d100      	bne.n	1a9c <udc_process_setup+0x1fc>
    1a9a:	e70f      	b.n	18bc <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a9c:	4b2b      	ldr	r3, [pc, #172]	; (1b4c <udc_process_setup+0x2ac>)
    1a9e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1aa0:	4b2f      	ldr	r3, [pc, #188]	; (1b60 <udc_process_setup+0x2c0>)
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1aa6:	429a      	cmp	r2, r3
    1aa8:	dd00      	ble.n	1aac <udc_process_setup+0x20c>
    1aaa:	e707      	b.n	18bc <udc_process_setup+0x1c>
	udc_reset();
    1aac:	4b36      	ldr	r3, [pc, #216]	; (1b88 <udc_process_setup+0x2e8>)
    1aae:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1ab0:	4b26      	ldr	r3, [pc, #152]	; (1b4c <udc_process_setup+0x2ac>)
    1ab2:	789b      	ldrb	r3, [r3, #2]
    1ab4:	4a2f      	ldr	r2, [pc, #188]	; (1b74 <udc_process_setup+0x2d4>)
    1ab6:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d037      	beq.n	1b2c <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1abc:	4a33      	ldr	r2, [pc, #204]	; (1b8c <udc_process_setup+0x2ec>)
    1abe:	4694      	mov	ip, r2
    1ac0:	4463      	add	r3, ip
    1ac2:	00db      	lsls	r3, r3, #3
    1ac4:	4a26      	ldr	r2, [pc, #152]	; (1b60 <udc_process_setup+0x2c0>)
    1ac6:	6852      	ldr	r2, [r2, #4]
    1ac8:	18d3      	adds	r3, r2, r3
    1aca:	4a2b      	ldr	r2, [pc, #172]	; (1b78 <udc_process_setup+0x2d8>)
    1acc:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	791b      	ldrb	r3, [r3, #4]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d02a      	beq.n	1b2c <udc_process_setup+0x28c>
    1ad6:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1ad8:	4d2d      	ldr	r5, [pc, #180]	; (1b90 <udc_process_setup+0x2f0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ada:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1adc:	2100      	movs	r1, #0
    1ade:	0020      	movs	r0, r4
    1ae0:	47a8      	blx	r5
    1ae2:	2800      	cmp	r0, #0
    1ae4:	d100      	bne.n	1ae8 <udc_process_setup+0x248>
    1ae6:	e6e9      	b.n	18bc <udc_process_setup+0x1c>
			iface_num++) {
    1ae8:	3401      	adds	r4, #1
    1aea:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1aec:	6833      	ldr	r3, [r6, #0]
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	791b      	ldrb	r3, [r3, #4]
    1af2:	42a3      	cmp	r3, r4
    1af4:	d8f2      	bhi.n	1adc <udc_process_setup+0x23c>
    1af6:	e019      	b.n	1b2c <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1af8:	2a01      	cmp	r2, #1
    1afa:	d119      	bne.n	1b30 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    1afc:	4b13      	ldr	r3, [pc, #76]	; (1b4c <udc_process_setup+0x2ac>)
    1afe:	88db      	ldrh	r3, [r3, #6]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d000      	beq.n	1b06 <udc_process_setup+0x266>
    1b04:	e6e1      	b.n	18ca <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b06:	4b11      	ldr	r3, [pc, #68]	; (1b4c <udc_process_setup+0x2ac>)
    1b08:	885b      	ldrh	r3, [r3, #2]
    1b0a:	2b01      	cmp	r3, #1
    1b0c:	d000      	beq.n	1b10 <udc_process_setup+0x270>
    1b0e:	e6dc      	b.n	18ca <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b10:	4a12      	ldr	r2, [pc, #72]	; (1b5c <udc_process_setup+0x2bc>)
    1b12:	8813      	ldrh	r3, [r2, #0]
    1b14:	2102      	movs	r1, #2
    1b16:	438b      	bics	r3, r1
    1b18:	8013      	strh	r3, [r2, #0]
    1b1a:	e007      	b.n	1b2c <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength) {
    1b1c:	4b0b      	ldr	r3, [pc, #44]	; (1b4c <udc_process_setup+0x2ac>)
    1b1e:	88db      	ldrh	r3, [r3, #6]
    1b20:	2b00      	cmp	r3, #0
    1b22:	d000      	beq.n	1b26 <udc_process_setup+0x286>
    1b24:	e6d1      	b.n	18ca <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1b26:	4a1b      	ldr	r2, [pc, #108]	; (1b94 <udc_process_setup+0x2f4>)
    1b28:	4b08      	ldr	r3, [pc, #32]	; (1b4c <udc_process_setup+0x2ac>)
    1b2a:	611a      	str	r2, [r3, #16]
			return true;
    1b2c:	2001      	movs	r0, #1
    1b2e:	e6d4      	b.n	18da <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1b30:	2b01      	cmp	r3, #1
    1b32:	d031      	beq.n	1b98 <udc_process_setup+0x2f8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b34:	2b02      	cmp	r3, #2
    1b36:	d000      	beq.n	1b3a <udc_process_setup+0x29a>
    1b38:	e6c0      	b.n	18bc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b3a:	4b04      	ldr	r3, [pc, #16]	; (1b4c <udc_process_setup+0x2ac>)
    1b3c:	785b      	ldrb	r3, [r3, #1]
    1b3e:	2b01      	cmp	r3, #1
    1b40:	d06c      	beq.n	1c1c <udc_process_setup+0x37c>
    1b42:	2b03      	cmp	r3, #3
    1b44:	d100      	bne.n	1b48 <udc_process_setup+0x2a8>
    1b46:	e078      	b.n	1c3a <udc_process_setup+0x39a>
	return false;
    1b48:	2000      	movs	r0, #0
    1b4a:	e08b      	b.n	1c64 <udc_process_setup+0x3c4>
    1b4c:	200007e0 	.word	0x200007e0
    1b50:	000031ad 	.word	0x000031ad
    1b54:	20000316 	.word	0x20000316
    1b58:	0000352d 	.word	0x0000352d
    1b5c:	20000314 	.word	0x20000314
    1b60:	2000004c 	.word	0x2000004c
    1b64:	200000fc 	.word	0x200000fc
    1b68:	200000cc 	.word	0x200000cc
    1b6c:	200000ec 	.word	0x200000ec
    1b70:	200000f0 	.word	0x200000f0
    1b74:	2000031c 	.word	0x2000031c
    1b78:	20000320 	.word	0x20000320
    1b7c:	000016cd 	.word	0x000016cd
    1b80:	20000318 	.word	0x20000318
    1b84:	0000351d 	.word	0x0000351d
    1b88:	00001811 	.word	0x00001811
    1b8c:	1fffffff 	.word	0x1fffffff
    1b90:	000017ad 	.word	0x000017ad
    1b94:	000016b5 	.word	0x000016b5
			switch (udd_g_ctrlreq.req.bRequest) {
    1b98:	4a48      	ldr	r2, [pc, #288]	; (1cbc <udc_process_setup+0x41c>)
    1b9a:	7852      	ldrb	r2, [r2, #1]
    1b9c:	2a0b      	cmp	r2, #11
    1b9e:	d1c9      	bne.n	1b34 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1ba0:	4b46      	ldr	r3, [pc, #280]	; (1cbc <udc_process_setup+0x41c>)
    1ba2:	88db      	ldrh	r3, [r3, #6]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d103      	bne.n	1bb0 <udc_process_setup+0x310>
	if (!udc_num_configuration) {
    1ba8:	4b45      	ldr	r3, [pc, #276]	; (1cc0 <udc_process_setup+0x420>)
    1baa:	781b      	ldrb	r3, [r3, #0]
    1bac:	2b00      	cmp	r3, #0
    1bae:	d127      	bne.n	1c00 <udc_process_setup+0x360>
	if (0 == udc_num_configuration) {
    1bb0:	4b43      	ldr	r3, [pc, #268]	; (1cc0 <udc_process_setup+0x420>)
    1bb2:	781b      	ldrb	r3, [r3, #0]
	return false;
    1bb4:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d100      	bne.n	1bbc <udc_process_setup+0x31c>
    1bba:	e68e      	b.n	18da <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1bbc:	4b3f      	ldr	r3, [pc, #252]	; (1cbc <udc_process_setup+0x41c>)
    1bbe:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1bc0:	4b40      	ldr	r3, [pc, #256]	; (1cc4 <udc_process_setup+0x424>)
    1bc2:	681d      	ldr	r5, [r3, #0]
    1bc4:	682b      	ldr	r3, [r5, #0]
    1bc6:	791b      	ldrb	r3, [r3, #4]
    1bc8:	42a3      	cmp	r3, r4
    1bca:	d800      	bhi.n	1bce <udc_process_setup+0x32e>
    1bcc:	e685      	b.n	18da <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bce:	2100      	movs	r1, #0
    1bd0:	0020      	movs	r0, r4
    1bd2:	4b3d      	ldr	r3, [pc, #244]	; (1cc8 <udc_process_setup+0x428>)
    1bd4:	4798      	blx	r3
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d100      	bne.n	1bdc <udc_process_setup+0x33c>
    1bda:	e676      	b.n	18ca <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bdc:	686b      	ldr	r3, [r5, #4]
    1bde:	00a2      	lsls	r2, r4, #2
    1be0:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1be2:	68eb      	ldr	r3, [r5, #12]
    1be4:	4798      	blx	r3
    1be6:	0001      	movs	r1, r0
    1be8:	0020      	movs	r0, r4
    1bea:	4b37      	ldr	r3, [pc, #220]	; (1cc8 <udc_process_setup+0x428>)
    1bec:	4798      	blx	r3
    1bee:	2800      	cmp	r0, #0
    1bf0:	d100      	bne.n	1bf4 <udc_process_setup+0x354>
    1bf2:	e66a      	b.n	18ca <udc_process_setup+0x2a>
	return udi_api->setup();
    1bf4:	68ab      	ldr	r3, [r5, #8]
    1bf6:	4798      	blx	r3
		if (udc_req_iface()) {
    1bf8:	2800      	cmp	r0, #0
    1bfa:	d000      	beq.n	1bfe <udc_process_setup+0x35e>
    1bfc:	e66d      	b.n	18da <udc_process_setup+0x3a>
    1bfe:	e664      	b.n	18ca <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c00:	4b2e      	ldr	r3, [pc, #184]	; (1cbc <udc_process_setup+0x41c>)
    1c02:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c04:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1c06:	0028      	movs	r0, r5
    1c08:	4b30      	ldr	r3, [pc, #192]	; (1ccc <udc_process_setup+0x42c>)
    1c0a:	4798      	blx	r3
    1c0c:	2800      	cmp	r0, #0
    1c0e:	d100      	bne.n	1c12 <udc_process_setup+0x372>
    1c10:	e654      	b.n	18bc <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1c12:	b2e1      	uxtb	r1, r4
    1c14:	0028      	movs	r0, r5
    1c16:	4b2e      	ldr	r3, [pc, #184]	; (1cd0 <udc_process_setup+0x430>)
    1c18:	4798      	blx	r3
    1c1a:	e023      	b.n	1c64 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    1c1c:	4b27      	ldr	r3, [pc, #156]	; (1cbc <udc_process_setup+0x41c>)
    1c1e:	88db      	ldrh	r3, [r3, #6]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d000      	beq.n	1c26 <udc_process_setup+0x386>
    1c24:	e651      	b.n	18ca <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c26:	4b25      	ldr	r3, [pc, #148]	; (1cbc <udc_process_setup+0x41c>)
    1c28:	885b      	ldrh	r3, [r3, #2]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d000      	beq.n	1c30 <udc_process_setup+0x390>
    1c2e:	e64c      	b.n	18ca <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c30:	4b22      	ldr	r3, [pc, #136]	; (1cbc <udc_process_setup+0x41c>)
    1c32:	7918      	ldrb	r0, [r3, #4]
    1c34:	4b27      	ldr	r3, [pc, #156]	; (1cd4 <udc_process_setup+0x434>)
    1c36:	4798      	blx	r3
    1c38:	e014      	b.n	1c64 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    1c3a:	4b20      	ldr	r3, [pc, #128]	; (1cbc <udc_process_setup+0x41c>)
    1c3c:	88db      	ldrh	r3, [r3, #6]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d000      	beq.n	1c44 <udc_process_setup+0x3a4>
    1c42:	e642      	b.n	18ca <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c44:	4b1d      	ldr	r3, [pc, #116]	; (1cbc <udc_process_setup+0x41c>)
    1c46:	885b      	ldrh	r3, [r3, #2]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d000      	beq.n	1c4e <udc_process_setup+0x3ae>
    1c4c:	e63d      	b.n	18ca <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c4e:	4c1b      	ldr	r4, [pc, #108]	; (1cbc <udc_process_setup+0x41c>)
    1c50:	7920      	ldrb	r0, [r4, #4]
    1c52:	4b21      	ldr	r3, [pc, #132]	; (1cd8 <udc_process_setup+0x438>)
    1c54:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1c56:	7920      	ldrb	r0, [r4, #4]
    1c58:	4b20      	ldr	r3, [pc, #128]	; (1cdc <udc_process_setup+0x43c>)
    1c5a:	4798      	blx	r3
    1c5c:	e002      	b.n	1c64 <udc_process_setup+0x3c4>
		return false;
    1c5e:	2000      	movs	r0, #0
    1c60:	e000      	b.n	1c64 <udc_process_setup+0x3c4>
				return udc_req_std_dev_set_feature();
    1c62:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1c64:	2800      	cmp	r0, #0
    1c66:	d000      	beq.n	1c6a <udc_process_setup+0x3ca>
    1c68:	e637      	b.n	18da <udc_process_setup+0x3a>
    1c6a:	e627      	b.n	18bc <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1c6c:	4b14      	ldr	r3, [pc, #80]	; (1cc0 <udc_process_setup+0x420>)
    1c6e:	781b      	ldrb	r3, [r3, #0]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d100      	bne.n	1c76 <udc_process_setup+0x3d6>
    1c74:	e631      	b.n	18da <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c76:	4b13      	ldr	r3, [pc, #76]	; (1cc4 <udc_process_setup+0x424>)
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	681a      	ldr	r2, [r3, #0]
    1c7c:	7912      	ldrb	r2, [r2, #4]
    1c7e:	2a00      	cmp	r2, #0
    1c80:	d01a      	beq.n	1cb8 <udc_process_setup+0x418>
    1c82:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c84:	4e10      	ldr	r6, [pc, #64]	; (1cc8 <udc_process_setup+0x428>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c86:	4f0f      	ldr	r7, [pc, #60]	; (1cc4 <udc_process_setup+0x424>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c88:	685b      	ldr	r3, [r3, #4]
    1c8a:	00aa      	lsls	r2, r5, #2
    1c8c:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c8e:	68e3      	ldr	r3, [r4, #12]
    1c90:	4798      	blx	r3
    1c92:	0001      	movs	r1, r0
    1c94:	0028      	movs	r0, r5
    1c96:	47b0      	blx	r6
    1c98:	2800      	cmp	r0, #0
    1c9a:	d100      	bne.n	1c9e <udc_process_setup+0x3fe>
    1c9c:	e61d      	b.n	18da <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1c9e:	68a3      	ldr	r3, [r4, #8]
    1ca0:	4798      	blx	r3
    1ca2:	2800      	cmp	r0, #0
    1ca4:	d000      	beq.n	1ca8 <udc_process_setup+0x408>
    1ca6:	e618      	b.n	18da <udc_process_setup+0x3a>
			iface_num++) {
    1ca8:	3501      	adds	r5, #1
    1caa:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cac:	683b      	ldr	r3, [r7, #0]
    1cae:	681a      	ldr	r2, [r3, #0]
    1cb0:	7912      	ldrb	r2, [r2, #4]
    1cb2:	42aa      	cmp	r2, r5
    1cb4:	d8e8      	bhi.n	1c88 <udc_process_setup+0x3e8>
    1cb6:	e610      	b.n	18da <udc_process_setup+0x3a>
	return false;
    1cb8:	2000      	movs	r0, #0
    1cba:	e60e      	b.n	18da <udc_process_setup+0x3a>
    1cbc:	200007e0 	.word	0x200007e0
    1cc0:	2000031c 	.word	0x2000031c
    1cc4:	20000320 	.word	0x20000320
    1cc8:	000016cd 	.word	0x000016cd
    1ccc:	00001741 	.word	0x00001741
    1cd0:	000017ad 	.word	0x000017ad
    1cd4:	000032f1 	.word	0x000032f1
    1cd8:	00002fed 	.word	0x00002fed
    1cdc:	000031c1 	.word	0x000031c1

00001ce0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1ce0:	4b0c      	ldr	r3, [pc, #48]	; (1d14 <cpu_irq_enter_critical+0x34>)
    1ce2:	681b      	ldr	r3, [r3, #0]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d106      	bne.n	1cf6 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ce8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1cec:	2b00      	cmp	r3, #0
    1cee:	d007      	beq.n	1d00 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1cf0:	2200      	movs	r2, #0
    1cf2:	4b09      	ldr	r3, [pc, #36]	; (1d18 <cpu_irq_enter_critical+0x38>)
    1cf4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1cf6:	4a07      	ldr	r2, [pc, #28]	; (1d14 <cpu_irq_enter_critical+0x34>)
    1cf8:	6813      	ldr	r3, [r2, #0]
    1cfa:	3301      	adds	r3, #1
    1cfc:	6013      	str	r3, [r2, #0]
}
    1cfe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1d00:	b672      	cpsid	i
    1d02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1d06:	2200      	movs	r2, #0
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <cpu_irq_enter_critical+0x3c>)
    1d0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1d0c:	3201      	adds	r2, #1
    1d0e:	4b02      	ldr	r3, [pc, #8]	; (1d18 <cpu_irq_enter_critical+0x38>)
    1d10:	701a      	strb	r2, [r3, #0]
    1d12:	e7f0      	b.n	1cf6 <cpu_irq_enter_critical+0x16>
    1d14:	20000328 	.word	0x20000328
    1d18:	2000032c 	.word	0x2000032c
    1d1c:	2000010c 	.word	0x2000010c

00001d20 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d20:	4b08      	ldr	r3, [pc, #32]	; (1d44 <cpu_irq_leave_critical+0x24>)
    1d22:	681a      	ldr	r2, [r3, #0]
    1d24:	3a01      	subs	r2, #1
    1d26:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d28:	681b      	ldr	r3, [r3, #0]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d109      	bne.n	1d42 <cpu_irq_leave_critical+0x22>
    1d2e:	4b06      	ldr	r3, [pc, #24]	; (1d48 <cpu_irq_leave_critical+0x28>)
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d005      	beq.n	1d42 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d36:	2201      	movs	r2, #1
    1d38:	4b04      	ldr	r3, [pc, #16]	; (1d4c <cpu_irq_leave_critical+0x2c>)
    1d3a:	701a      	strb	r2, [r3, #0]
    1d3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d40:	b662      	cpsie	i
	}
}
    1d42:	4770      	bx	lr
    1d44:	20000328 	.word	0x20000328
    1d48:	2000032c 	.word	0x2000032c
    1d4c:	2000010c 	.word	0x2000010c

00001d50 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1d54:	ac01      	add	r4, sp, #4
    1d56:	2501      	movs	r5, #1
    1d58:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1d5a:	2700      	movs	r7, #0
    1d5c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d5e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1d60:	0021      	movs	r1, r4
    1d62:	203e      	movs	r0, #62	; 0x3e
    1d64:	4e06      	ldr	r6, [pc, #24]	; (1d80 <system_board_init+0x30>)
    1d66:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1d68:	2280      	movs	r2, #128	; 0x80
    1d6a:	05d2      	lsls	r2, r2, #23
    1d6c:	4b05      	ldr	r3, [pc, #20]	; (1d84 <system_board_init+0x34>)
    1d6e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1d70:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1d72:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1d74:	0021      	movs	r1, r4
    1d76:	200f      	movs	r0, #15
    1d78:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1d7a:	b003      	add	sp, #12
    1d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	000021f1 	.word	0x000021f1
    1d84:	41004480 	.word	0x41004480

00001d88 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d88:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1d8a:	2a00      	cmp	r2, #0
    1d8c:	d001      	beq.n	1d92 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1d8e:	0018      	movs	r0, r3
    1d90:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1d92:	008b      	lsls	r3, r1, #2
    1d94:	4a06      	ldr	r2, [pc, #24]	; (1db0 <extint_register_callback+0x28>)
    1d96:	589b      	ldr	r3, [r3, r2]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d003      	beq.n	1da4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1d9c:	4283      	cmp	r3, r0
    1d9e:	d005      	beq.n	1dac <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1da0:	231d      	movs	r3, #29
    1da2:	e7f4      	b.n	1d8e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1da4:	0089      	lsls	r1, r1, #2
    1da6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1da8:	2300      	movs	r3, #0
    1daa:	e7f0      	b.n	1d8e <extint_register_callback+0x6>
		return STATUS_OK;
    1dac:	2300      	movs	r3, #0
    1dae:	e7ee      	b.n	1d8e <extint_register_callback+0x6>
    1db0:	20000578 	.word	0x20000578

00001db4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1db4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1db6:	2900      	cmp	r1, #0
    1db8:	d001      	beq.n	1dbe <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1dba:	0018      	movs	r0, r3
    1dbc:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1dbe:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1dc0:	281f      	cmp	r0, #31
    1dc2:	d800      	bhi.n	1dc6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1dc4:	4a02      	ldr	r2, [pc, #8]	; (1dd0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1dc6:	2301      	movs	r3, #1
    1dc8:	4083      	lsls	r3, r0
    1dca:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1dcc:	2300      	movs	r3, #0
    1dce:	e7f4      	b.n	1dba <extint_chan_enable_callback+0x6>
    1dd0:	40001800 	.word	0x40001800

00001dd4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1dd4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1dd6:	2900      	cmp	r1, #0
    1dd8:	d001      	beq.n	1dde <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    1dda:	0018      	movs	r0, r3
    1ddc:	4770      	bx	lr
		return NULL;
    1dde:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1de0:	281f      	cmp	r0, #31
    1de2:	d800      	bhi.n	1de6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    1de4:	4a02      	ldr	r2, [pc, #8]	; (1df0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    1de6:	2301      	movs	r3, #1
    1de8:	4083      	lsls	r3, r0
    1dea:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    1dec:	2300      	movs	r3, #0
    1dee:	e7f4      	b.n	1dda <extint_chan_disable_callback+0x6>
    1df0:	40001800 	.word	0x40001800

00001df4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1df4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1df6:	2200      	movs	r2, #0
    1df8:	4b10      	ldr	r3, [pc, #64]	; (1e3c <EIC_Handler+0x48>)
    1dfa:	701a      	strb	r2, [r3, #0]
    1dfc:	2300      	movs	r3, #0
    1dfe:	4910      	ldr	r1, [pc, #64]	; (1e40 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1e00:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1e02:	4e10      	ldr	r6, [pc, #64]	; (1e44 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1e04:	4c0d      	ldr	r4, [pc, #52]	; (1e3c <EIC_Handler+0x48>)
    1e06:	e00a      	b.n	1e1e <EIC_Handler+0x2a>
		return eics[eic_index];
    1e08:	490d      	ldr	r1, [pc, #52]	; (1e40 <EIC_Handler+0x4c>)
    1e0a:	e008      	b.n	1e1e <EIC_Handler+0x2a>
    1e0c:	7823      	ldrb	r3, [r4, #0]
    1e0e:	3301      	adds	r3, #1
    1e10:	b2db      	uxtb	r3, r3
    1e12:	7023      	strb	r3, [r4, #0]
    1e14:	2b0f      	cmp	r3, #15
    1e16:	d810      	bhi.n	1e3a <EIC_Handler+0x46>
		return NULL;
    1e18:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1e1a:	2b1f      	cmp	r3, #31
    1e1c:	d9f4      	bls.n	1e08 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1e1e:	0028      	movs	r0, r5
    1e20:	4018      	ands	r0, r3
    1e22:	2201      	movs	r2, #1
    1e24:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1e26:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1e28:	4210      	tst	r0, r2
    1e2a:	d0ef      	beq.n	1e0c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1e2c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1e2e:	009b      	lsls	r3, r3, #2
    1e30:	599b      	ldr	r3, [r3, r6]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d0ea      	beq.n	1e0c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1e36:	4798      	blx	r3
    1e38:	e7e8      	b.n	1e0c <EIC_Handler+0x18>
			}
		}
	}
}
    1e3a:	bd70      	pop	{r4, r5, r6, pc}
    1e3c:	20000575 	.word	0x20000575
    1e40:	40001800 	.word	0x40001800
    1e44:	20000578 	.word	0x20000578

00001e48 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1e48:	4a04      	ldr	r2, [pc, #16]	; (1e5c <_extint_enable+0x14>)
    1e4a:	7813      	ldrb	r3, [r2, #0]
    1e4c:	2102      	movs	r1, #2
    1e4e:	430b      	orrs	r3, r1
    1e50:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1e52:	7853      	ldrb	r3, [r2, #1]
    1e54:	b25b      	sxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	dbfb      	blt.n	1e52 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1e5a:	4770      	bx	lr
    1e5c:	40001800 	.word	0x40001800

00001e60 <_system_extint_init>:
{
    1e60:	b500      	push	{lr}
    1e62:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e64:	4a12      	ldr	r2, [pc, #72]	; (1eb0 <_system_extint_init+0x50>)
    1e66:	6993      	ldr	r3, [r2, #24]
    1e68:	2140      	movs	r1, #64	; 0x40
    1e6a:	430b      	orrs	r3, r1
    1e6c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1e6e:	a901      	add	r1, sp, #4
    1e70:	2300      	movs	r3, #0
    1e72:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1e74:	2005      	movs	r0, #5
    1e76:	4b0f      	ldr	r3, [pc, #60]	; (1eb4 <_system_extint_init+0x54>)
    1e78:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1e7a:	2005      	movs	r0, #5
    1e7c:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <_system_extint_init+0x58>)
    1e7e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1e80:	4a0e      	ldr	r2, [pc, #56]	; (1ebc <_system_extint_init+0x5c>)
    1e82:	7813      	ldrb	r3, [r2, #0]
    1e84:	2101      	movs	r1, #1
    1e86:	430b      	orrs	r3, r1
    1e88:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1e8a:	7853      	ldrb	r3, [r2, #1]
    1e8c:	b25b      	sxtb	r3, r3
    1e8e:	2b00      	cmp	r3, #0
    1e90:	dbfb      	blt.n	1e8a <_system_extint_init+0x2a>
    1e92:	4b0b      	ldr	r3, [pc, #44]	; (1ec0 <_system_extint_init+0x60>)
    1e94:	0019      	movs	r1, r3
    1e96:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1e98:	2200      	movs	r2, #0
    1e9a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1e9c:	4299      	cmp	r1, r3
    1e9e:	d1fc      	bne.n	1e9a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ea0:	2210      	movs	r2, #16
    1ea2:	4b08      	ldr	r3, [pc, #32]	; (1ec4 <_system_extint_init+0x64>)
    1ea4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1ea6:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <_system_extint_init+0x68>)
    1ea8:	4798      	blx	r3
}
    1eaa:	b003      	add	sp, #12
    1eac:	bd00      	pop	{pc}
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	40000400 	.word	0x40000400
    1eb4:	0000282d 	.word	0x0000282d
    1eb8:	000027a1 	.word	0x000027a1
    1ebc:	40001800 	.word	0x40001800
    1ec0:	20000578 	.word	0x20000578
    1ec4:	e000e100 	.word	0xe000e100
    1ec8:	00001e49 	.word	0x00001e49

00001ecc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1ecc:	2300      	movs	r3, #0
    1ece:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1ed0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1ed2:	2201      	movs	r2, #1
    1ed4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1ed6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1ed8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1eda:	3302      	adds	r3, #2
    1edc:	72c3      	strb	r3, [r0, #11]
}
    1ede:	4770      	bx	lr

00001ee0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee2:	b083      	sub	sp, #12
    1ee4:	0005      	movs	r5, r0
    1ee6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ee8:	a901      	add	r1, sp, #4
    1eea:	2300      	movs	r3, #0
    1eec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1eee:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1ef0:	7923      	ldrb	r3, [r4, #4]
    1ef2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1ef4:	7a23      	ldrb	r3, [r4, #8]
    1ef6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1ef8:	7820      	ldrb	r0, [r4, #0]
    1efa:	4b15      	ldr	r3, [pc, #84]	; (1f50 <extint_chan_set_config+0x70>)
    1efc:	4798      	blx	r3
		return NULL;
    1efe:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1f00:	2d1f      	cmp	r5, #31
    1f02:	d800      	bhi.n	1f06 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1f04:	4813      	ldr	r0, [pc, #76]	; (1f54 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1f06:	2207      	movs	r2, #7
    1f08:	402a      	ands	r2, r5
    1f0a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1f0c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1f0e:	7aa3      	ldrb	r3, [r4, #10]
    1f10:	2b00      	cmp	r3, #0
    1f12:	d001      	beq.n	1f18 <extint_chan_set_config+0x38>
    1f14:	2308      	movs	r3, #8
    1f16:	431f      	orrs	r7, r3
    1f18:	08eb      	lsrs	r3, r5, #3
    1f1a:	009b      	lsls	r3, r3, #2
    1f1c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1f1e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f20:	260f      	movs	r6, #15
    1f22:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1f24:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1f26:	4097      	lsls	r7, r2
    1f28:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f2a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1f2c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1f2e:	7a63      	ldrb	r3, [r4, #9]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d106      	bne.n	1f42 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1f34:	6943      	ldr	r3, [r0, #20]
    1f36:	2201      	movs	r2, #1
    1f38:	40aa      	lsls	r2, r5
    1f3a:	4393      	bics	r3, r2
    1f3c:	6143      	str	r3, [r0, #20]
	}
}
    1f3e:	b003      	add	sp, #12
    1f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1f42:	6942      	ldr	r2, [r0, #20]
    1f44:	2301      	movs	r3, #1
    1f46:	40ab      	lsls	r3, r5
    1f48:	4313      	orrs	r3, r2
    1f4a:	6143      	str	r3, [r0, #20]
    1f4c:	e7f7      	b.n	1f3e <extint_chan_set_config+0x5e>
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	000028f1 	.word	0x000028f1
    1f54:	40001800 	.word	0x40001800

00001f58 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1f58:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1f5a:	4a1e      	ldr	r2, [pc, #120]	; (1fd4 <nvm_set_config+0x7c>)
    1f5c:	69d3      	ldr	r3, [r2, #28]
    1f5e:	2104      	movs	r1, #4
    1f60:	430b      	orrs	r3, r1
    1f62:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1f64:	4b1c      	ldr	r3, [pc, #112]	; (1fd8 <nvm_set_config+0x80>)
    1f66:	2220      	movs	r2, #32
    1f68:	32ff      	adds	r2, #255	; 0xff
    1f6a:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1f6c:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    1f6e:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    1f70:	07d2      	lsls	r2, r2, #31
    1f72:	d401      	bmi.n	1f78 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    1f74:	0018      	movs	r0, r3
    1f76:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1f78:	7803      	ldrb	r3, [r0, #0]
    1f7a:	021b      	lsls	r3, r3, #8
    1f7c:	22c0      	movs	r2, #192	; 0xc0
    1f7e:	0092      	lsls	r2, r2, #2
    1f80:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1f82:	7841      	ldrb	r1, [r0, #1]
    1f84:	01c9      	lsls	r1, r1, #7
    1f86:	22ff      	movs	r2, #255	; 0xff
    1f88:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1f8a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1f8c:	7881      	ldrb	r1, [r0, #2]
    1f8e:	0049      	lsls	r1, r1, #1
    1f90:	221e      	movs	r2, #30
    1f92:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1f94:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1f96:	78c2      	ldrb	r2, [r0, #3]
    1f98:	0492      	lsls	r2, r2, #18
    1f9a:	2180      	movs	r1, #128	; 0x80
    1f9c:	02c9      	lsls	r1, r1, #11
    1f9e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1fa0:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1fa2:	7902      	ldrb	r2, [r0, #4]
    1fa4:	0412      	lsls	r2, r2, #16
    1fa6:	21c0      	movs	r1, #192	; 0xc0
    1fa8:	0289      	lsls	r1, r1, #10
    1faa:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1fac:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    1fae:	4a0a      	ldr	r2, [pc, #40]	; (1fd8 <nvm_set_config+0x80>)
    1fb0:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1fb2:	6893      	ldr	r3, [r2, #8]
    1fb4:	035b      	lsls	r3, r3, #13
    1fb6:	0f5b      	lsrs	r3, r3, #29
    1fb8:	4908      	ldr	r1, [pc, #32]	; (1fdc <nvm_set_config+0x84>)
    1fba:	2408      	movs	r4, #8
    1fbc:	409c      	lsls	r4, r3
    1fbe:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1fc0:	6893      	ldr	r3, [r2, #8]
    1fc2:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1fc4:	7843      	ldrb	r3, [r0, #1]
    1fc6:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1fc8:	8b13      	ldrh	r3, [r2, #24]
    1fca:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    1fcc:	0fdb      	lsrs	r3, r3, #31
    1fce:	011b      	lsls	r3, r3, #4
    1fd0:	e7d0      	b.n	1f74 <nvm_set_config+0x1c>
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	40000400 	.word	0x40000400
    1fd8:	41004000 	.word	0x41004000
    1fdc:	20000330 	.word	0x20000330

00001fe0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1fe0:	b530      	push	{r4, r5, lr}
    1fe2:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1fe4:	4a22      	ldr	r2, [pc, #136]	; (2070 <STACK_SIZE+0x70>)
    1fe6:	8810      	ldrh	r0, [r2, #0]
    1fe8:	8853      	ldrh	r3, [r2, #2]
    1fea:	4343      	muls	r3, r0
    1fec:	428b      	cmp	r3, r1
    1fee:	d206      	bcs.n	1ffe <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1ff0:	2280      	movs	r2, #128	; 0x80
    1ff2:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1ff4:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1ff6:	4b1f      	ldr	r3, [pc, #124]	; (2074 <STACK_SIZE+0x74>)
    1ff8:	18cb      	adds	r3, r1, r3
    1ffa:	4293      	cmp	r3, r2
    1ffc:	d80e      	bhi.n	201c <STACK_SIZE+0x1c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1ffe:	4b1e      	ldr	r3, [pc, #120]	; (2078 <STACK_SIZE+0x78>)
    2000:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2002:	2280      	movs	r2, #128	; 0x80
    2004:	02d2      	lsls	r2, r2, #11
    2006:	432a      	orrs	r2, r5
    2008:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    200a:	2220      	movs	r2, #32
    200c:	32ff      	adds	r2, #255	; 0xff
    200e:	831a      	strh	r2, [r3, #24]
    2010:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2012:	07db      	lsls	r3, r3, #31
    2014:	d403      	bmi.n	201e <STACK_SIZE+0x1e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2016:	4b18      	ldr	r3, [pc, #96]	; (2078 <STACK_SIZE+0x78>)
    2018:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    201a:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    201c:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    201e:	2c45      	cmp	r4, #69	; 0x45
    2020:	d822      	bhi.n	2068 <STACK_SIZE+0x68>
    2022:	00a3      	lsls	r3, r4, #2
    2024:	4a15      	ldr	r2, [pc, #84]	; (207c <STACK_SIZE+0x7c>)
    2026:	58d3      	ldr	r3, [r2, r3]
    2028:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    202a:	4b13      	ldr	r3, [pc, #76]	; (2078 <STACK_SIZE+0x78>)
    202c:	8b1b      	ldrh	r3, [r3, #24]
    202e:	05db      	lsls	r3, r3, #23
    2030:	d503      	bpl.n	203a <STACK_SIZE+0x3a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    2032:	4b11      	ldr	r3, [pc, #68]	; (2078 <STACK_SIZE+0x78>)
    2034:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    2036:	2010      	movs	r0, #16
    2038:	e7f0      	b.n	201c <STACK_SIZE+0x1c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    203a:	0889      	lsrs	r1, r1, #2
    203c:	0049      	lsls	r1, r1, #1
    203e:	4b0e      	ldr	r3, [pc, #56]	; (2078 <STACK_SIZE+0x78>)
    2040:	61d9      	str	r1, [r3, #28]
			break;
    2042:	e003      	b.n	204c <STACK_SIZE+0x4c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2044:	0889      	lsrs	r1, r1, #2
    2046:	0049      	lsls	r1, r1, #1
    2048:	4b0b      	ldr	r3, [pc, #44]	; (2078 <STACK_SIZE+0x78>)
    204a:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    204c:	20a5      	movs	r0, #165	; 0xa5
    204e:	0200      	lsls	r0, r0, #8
    2050:	4304      	orrs	r4, r0
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <STACK_SIZE+0x78>)
    2054:	801c      	strh	r4, [r3, #0]
    2056:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    2058:	2201      	movs	r2, #1
    205a:	7d0b      	ldrb	r3, [r1, #20]
    205c:	4213      	tst	r3, r2
    205e:	d0fc      	beq.n	205a <STACK_SIZE+0x5a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    2060:	4b05      	ldr	r3, [pc, #20]	; (2078 <STACK_SIZE+0x78>)
    2062:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    2064:	2000      	movs	r0, #0
    2066:	e7d9      	b.n	201c <STACK_SIZE+0x1c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    2068:	4b03      	ldr	r3, [pc, #12]	; (2078 <STACK_SIZE+0x78>)
    206a:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    206c:	2017      	movs	r0, #23
    206e:	e7d5      	b.n	201c <STACK_SIZE+0x1c>
    2070:	20000330 	.word	0x20000330
    2074:	ff7fc000 	.word	0xff7fc000
    2078:	41004000 	.word	0x41004000
    207c:	00006e14 	.word	0x00006e14

00002080 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    2080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2082:	4b25      	ldr	r3, [pc, #148]	; (2118 <nvm_write_buffer+0x98>)
    2084:	881d      	ldrh	r5, [r3, #0]
    2086:	885b      	ldrh	r3, [r3, #2]
    2088:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    208a:	2418      	movs	r4, #24
	if (destination_address >
    208c:	4283      	cmp	r3, r0
    208e:	d201      	bcs.n	2094 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    2090:	0020      	movs	r0, r4
    2092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2094:	1e6b      	subs	r3, r5, #1
    2096:	4218      	tst	r0, r3
    2098:	d1fa      	bne.n	2090 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    209a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    209c:	4295      	cmp	r5, r2
    209e:	d3f7      	bcc.n	2090 <nvm_write_buffer+0x10>
    20a0:	4b1e      	ldr	r3, [pc, #120]	; (211c <nvm_write_buffer+0x9c>)
    20a2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    20a4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    20a6:	07db      	lsls	r3, r3, #31
    20a8:	d5f2      	bpl.n	2090 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    20aa:	4c1d      	ldr	r4, [pc, #116]	; (2120 <nvm_write_buffer+0xa0>)
    20ac:	4b1b      	ldr	r3, [pc, #108]	; (211c <nvm_write_buffer+0x9c>)
    20ae:	801c      	strh	r4, [r3, #0]
    20b0:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    20b2:	2401      	movs	r4, #1
    20b4:	7d2b      	ldrb	r3, [r5, #20]
    20b6:	4223      	tst	r3, r4
    20b8:	d0fc      	beq.n	20b4 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    20ba:	2420      	movs	r4, #32
    20bc:	34ff      	adds	r4, #255	; 0xff
    20be:	4b17      	ldr	r3, [pc, #92]	; (211c <nvm_write_buffer+0x9c>)
    20c0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    20c2:	2a00      	cmp	r2, #0
    20c4:	d022      	beq.n	210c <nvm_write_buffer+0x8c>
    20c6:	2301      	movs	r3, #1
    20c8:	0005      	movs	r5, r0
    20ca:	439d      	bics	r5, r3
    20cc:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    20ce:	1e57      	subs	r7, r2, #1
    20d0:	e009      	b.n	20e6 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    20d2:	18ce      	adds	r6, r1, r3
    20d4:	7876      	ldrb	r6, [r6, #1]
    20d6:	0236      	lsls	r6, r6, #8
    20d8:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    20da:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    20dc:	3302      	adds	r3, #2
    20de:	b29b      	uxth	r3, r3
    20e0:	3502      	adds	r5, #2
    20e2:	429a      	cmp	r2, r3
    20e4:	d904      	bls.n	20f0 <nvm_write_buffer+0x70>
		data = buffer[i];
    20e6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    20e8:	42bb      	cmp	r3, r7
    20ea:	dbf2      	blt.n	20d2 <nvm_write_buffer+0x52>
		data = buffer[i];
    20ec:	b2a4      	uxth	r4, r4
    20ee:	e7f4      	b.n	20da <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    20f0:	4b09      	ldr	r3, [pc, #36]	; (2118 <nvm_write_buffer+0x98>)
    20f2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    20f4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    20f6:	2b00      	cmp	r3, #0
    20f8:	d1ca      	bne.n	2090 <nvm_write_buffer+0x10>
    20fa:	2a3f      	cmp	r2, #63	; 0x3f
    20fc:	d8c8      	bhi.n	2090 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    20fe:	2200      	movs	r2, #0
    2100:	0001      	movs	r1, r0
    2102:	2004      	movs	r0, #4
    2104:	4b07      	ldr	r3, [pc, #28]	; (2124 <nvm_write_buffer+0xa4>)
    2106:	4798      	blx	r3
    2108:	0004      	movs	r4, r0
    210a:	e7c1      	b.n	2090 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    210c:	4b02      	ldr	r3, [pc, #8]	; (2118 <nvm_write_buffer+0x98>)
    210e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    2110:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2112:	2b00      	cmp	r3, #0
    2114:	d0f3      	beq.n	20fe <nvm_write_buffer+0x7e>
    2116:	e7bb      	b.n	2090 <nvm_write_buffer+0x10>
    2118:	20000330 	.word	0x20000330
    211c:	41004000 	.word	0x41004000
    2120:	ffffa544 	.word	0xffffa544
    2124:	00001fe1 	.word	0x00001fe1

00002128 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2128:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    212a:	4b18      	ldr	r3, [pc, #96]	; (218c <nvm_read_buffer+0x64>)
    212c:	881d      	ldrh	r5, [r3, #0]
    212e:	885b      	ldrh	r3, [r3, #2]
    2130:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2132:	2418      	movs	r4, #24
	if (source_address >
    2134:	4283      	cmp	r3, r0
    2136:	d201      	bcs.n	213c <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    2138:	0020      	movs	r0, r4
    213a:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    213c:	1e6b      	subs	r3, r5, #1
    213e:	4218      	tst	r0, r3
    2140:	d1fa      	bne.n	2138 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    2142:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    2144:	4295      	cmp	r5, r2
    2146:	d3f7      	bcc.n	2138 <nvm_read_buffer+0x10>
    2148:	4b11      	ldr	r3, [pc, #68]	; (2190 <nvm_read_buffer+0x68>)
    214a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    214c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    214e:	07db      	lsls	r3, r3, #31
    2150:	d5f2      	bpl.n	2138 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2152:	2420      	movs	r4, #32
    2154:	34ff      	adds	r4, #255	; 0xff
    2156:	4b0e      	ldr	r3, [pc, #56]	; (2190 <nvm_read_buffer+0x68>)
    2158:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    215a:	2a00      	cmp	r2, #0
    215c:	d014      	beq.n	2188 <nvm_read_buffer+0x60>
    215e:	2301      	movs	r3, #1
    2160:	4398      	bics	r0, r3
    2162:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    2164:	1e56      	subs	r6, r2, #1
    2166:	e004      	b.n	2172 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    2168:	3302      	adds	r3, #2
    216a:	b29b      	uxth	r3, r3
    216c:	3002      	adds	r0, #2
    216e:	429a      	cmp	r2, r3
    2170:	d908      	bls.n	2184 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    2172:	8804      	ldrh	r4, [r0, #0]
    2174:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    2176:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    2178:	42b3      	cmp	r3, r6
    217a:	daf5      	bge.n	2168 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    217c:	18cd      	adds	r5, r1, r3
    217e:	0a24      	lsrs	r4, r4, #8
    2180:	706c      	strb	r4, [r5, #1]
    2182:	e7f1      	b.n	2168 <nvm_read_buffer+0x40>
	return STATUS_OK;
    2184:	2400      	movs	r4, #0
    2186:	e7d7      	b.n	2138 <nvm_read_buffer+0x10>
    2188:	2400      	movs	r4, #0
    218a:	e7d5      	b.n	2138 <nvm_read_buffer+0x10>
    218c:	20000330 	.word	0x20000330
    2190:	41004000 	.word	0x41004000

00002194 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2194:	4b13      	ldr	r3, [pc, #76]	; (21e4 <nvm_erase_row+0x50>)
    2196:	881a      	ldrh	r2, [r3, #0]
    2198:	885b      	ldrh	r3, [r3, #2]
    219a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    219c:	2118      	movs	r1, #24
	if (row_address >
    219e:	4283      	cmp	r3, r0
    21a0:	d201      	bcs.n	21a6 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    21a2:	0008      	movs	r0, r1
    21a4:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    21a6:	0092      	lsls	r2, r2, #2
    21a8:	3a01      	subs	r2, #1
    21aa:	4210      	tst	r0, r2
    21ac:	d1f9      	bne.n	21a2 <nvm_erase_row+0xe>
    21ae:	4b0e      	ldr	r3, [pc, #56]	; (21e8 <nvm_erase_row+0x54>)
    21b0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    21b2:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    21b4:	07db      	lsls	r3, r3, #31
    21b6:	d5f4      	bpl.n	21a2 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    21b8:	4b0b      	ldr	r3, [pc, #44]	; (21e8 <nvm_erase_row+0x54>)
    21ba:	2220      	movs	r2, #32
    21bc:	32ff      	adds	r2, #255	; 0xff
    21be:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    21c0:	0880      	lsrs	r0, r0, #2
    21c2:	0040      	lsls	r0, r0, #1
    21c4:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    21c6:	4a09      	ldr	r2, [pc, #36]	; (21ec <nvm_erase_row+0x58>)
    21c8:	801a      	strh	r2, [r3, #0]
    21ca:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    21cc:	2201      	movs	r2, #1
    21ce:	7d0b      	ldrb	r3, [r1, #20]
    21d0:	4213      	tst	r3, r2
    21d2:	d0fc      	beq.n	21ce <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <nvm_erase_row+0x54>)
    21d6:	8b19      	ldrh	r1, [r3, #24]
    21d8:	201c      	movs	r0, #28
    21da:	4001      	ands	r1, r0
	return STATUS_OK;
    21dc:	1e48      	subs	r0, r1, #1
    21de:	4181      	sbcs	r1, r0
    21e0:	0089      	lsls	r1, r1, #2
    21e2:	e7de      	b.n	21a2 <nvm_erase_row+0xe>
    21e4:	20000330 	.word	0x20000330
    21e8:	41004000 	.word	0x41004000
    21ec:	ffffa502 	.word	0xffffa502

000021f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    21f0:	b500      	push	{lr}
    21f2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    21f4:	ab01      	add	r3, sp, #4
    21f6:	2280      	movs	r2, #128	; 0x80
    21f8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    21fa:	780a      	ldrb	r2, [r1, #0]
    21fc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    21fe:	784a      	ldrb	r2, [r1, #1]
    2200:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2202:	788a      	ldrb	r2, [r1, #2]
    2204:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2206:	0019      	movs	r1, r3
    2208:	4b01      	ldr	r3, [pc, #4]	; (2210 <port_pin_set_config+0x20>)
    220a:	4798      	blx	r3
}
    220c:	b003      	add	sp, #12
    220e:	bd00      	pop	{pc}
    2210:	000028f1 	.word	0x000028f1

00002214 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2214:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2216:	490c      	ldr	r1, [pc, #48]	; (2248 <system_clock_source_osc8m_set_config+0x34>)
    2218:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    221a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    221c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    221e:	7840      	ldrb	r0, [r0, #1]
    2220:	2201      	movs	r2, #1
    2222:	4010      	ands	r0, r2
    2224:	0180      	lsls	r0, r0, #6
    2226:	2640      	movs	r6, #64	; 0x40
    2228:	43b3      	bics	r3, r6
    222a:	4303      	orrs	r3, r0
    222c:	402a      	ands	r2, r5
    222e:	01d2      	lsls	r2, r2, #7
    2230:	2080      	movs	r0, #128	; 0x80
    2232:	4383      	bics	r3, r0
    2234:	4313      	orrs	r3, r2
    2236:	2203      	movs	r2, #3
    2238:	4022      	ands	r2, r4
    223a:	0212      	lsls	r2, r2, #8
    223c:	4803      	ldr	r0, [pc, #12]	; (224c <system_clock_source_osc8m_set_config+0x38>)
    223e:	4003      	ands	r3, r0
    2240:	4313      	orrs	r3, r2
    2242:	620b      	str	r3, [r1, #32]
}
    2244:	bd70      	pop	{r4, r5, r6, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	40000800 	.word	0x40000800
    224c:	fffffcff 	.word	0xfffffcff

00002250 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2250:	b5f0      	push	{r4, r5, r6, r7, lr}
    2252:	46ce      	mov	lr, r9
    2254:	4647      	mov	r7, r8
    2256:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2258:	4b19      	ldr	r3, [pc, #100]	; (22c0 <system_clock_source_osc32k_set_config+0x70>)
    225a:	4699      	mov	r9, r3
    225c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    225e:	7841      	ldrb	r1, [r0, #1]
    2260:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2262:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2264:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2266:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2268:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    226a:	7880      	ldrb	r0, [r0, #2]
    226c:	2101      	movs	r1, #1
    226e:	4008      	ands	r0, r1
    2270:	0080      	lsls	r0, r0, #2
    2272:	2204      	movs	r2, #4
    2274:	4393      	bics	r3, r2
    2276:	4303      	orrs	r3, r0
    2278:	4660      	mov	r0, ip
    227a:	4008      	ands	r0, r1
    227c:	00c0      	lsls	r0, r0, #3
    227e:	3204      	adds	r2, #4
    2280:	4393      	bics	r3, r2
    2282:	4303      	orrs	r3, r0
    2284:	0038      	movs	r0, r7
    2286:	4008      	ands	r0, r1
    2288:	0180      	lsls	r0, r0, #6
    228a:	2740      	movs	r7, #64	; 0x40
    228c:	43bb      	bics	r3, r7
    228e:	4303      	orrs	r3, r0
    2290:	0030      	movs	r0, r6
    2292:	4008      	ands	r0, r1
    2294:	01c0      	lsls	r0, r0, #7
    2296:	2680      	movs	r6, #128	; 0x80
    2298:	43b3      	bics	r3, r6
    229a:	4303      	orrs	r3, r0
    229c:	2007      	movs	r0, #7
    229e:	4005      	ands	r5, r0
    22a0:	022d      	lsls	r5, r5, #8
    22a2:	4808      	ldr	r0, [pc, #32]	; (22c4 <system_clock_source_osc32k_set_config+0x74>)
    22a4:	4003      	ands	r3, r0
    22a6:	432b      	orrs	r3, r5
    22a8:	4021      	ands	r1, r4
    22aa:	0309      	lsls	r1, r1, #12
    22ac:	4806      	ldr	r0, [pc, #24]	; (22c8 <system_clock_source_osc32k_set_config+0x78>)
    22ae:	4003      	ands	r3, r0
    22b0:	430b      	orrs	r3, r1
    22b2:	464a      	mov	r2, r9
    22b4:	6193      	str	r3, [r2, #24]
}
    22b6:	bc0c      	pop	{r2, r3}
    22b8:	4690      	mov	r8, r2
    22ba:	4699      	mov	r9, r3
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	40000800 	.word	0x40000800
    22c4:	fffff8ff 	.word	0xfffff8ff
    22c8:	ffffefff 	.word	0xffffefff

000022cc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    22cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ce:	46de      	mov	lr, fp
    22d0:	4657      	mov	r7, sl
    22d2:	464e      	mov	r6, r9
    22d4:	4645      	mov	r5, r8
    22d6:	b5e0      	push	{r5, r6, r7, lr}
    22d8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    22da:	4b26      	ldr	r3, [pc, #152]	; (2374 <system_clock_source_xosc32k_set_config+0xa8>)
    22dc:	469b      	mov	fp, r3
    22de:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    22e0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    22e2:	7800      	ldrb	r0, [r0, #0]
    22e4:	4242      	negs	r2, r0
    22e6:	4142      	adcs	r2, r0
    22e8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    22ea:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    22ec:	78ca      	ldrb	r2, [r1, #3]
    22ee:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    22f0:	790a      	ldrb	r2, [r1, #4]
    22f2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    22f4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    22f6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    22f8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    22fa:	688a      	ldr	r2, [r1, #8]
    22fc:	491e      	ldr	r1, [pc, #120]	; (2378 <system_clock_source_xosc32k_set_config+0xac>)
    22fe:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2300:	2101      	movs	r1, #1
    2302:	464a      	mov	r2, r9
    2304:	0092      	lsls	r2, r2, #2
    2306:	4691      	mov	r9, r2
    2308:	2204      	movs	r2, #4
    230a:	4393      	bics	r3, r2
    230c:	464a      	mov	r2, r9
    230e:	4313      	orrs	r3, r2
    2310:	4642      	mov	r2, r8
    2312:	400a      	ands	r2, r1
    2314:	00d2      	lsls	r2, r2, #3
    2316:	4690      	mov	r8, r2
    2318:	2208      	movs	r2, #8
    231a:	4393      	bics	r3, r2
    231c:	4642      	mov	r2, r8
    231e:	4313      	orrs	r3, r2
    2320:	4662      	mov	r2, ip
    2322:	400a      	ands	r2, r1
    2324:	0112      	lsls	r2, r2, #4
    2326:	4694      	mov	ip, r2
    2328:	2210      	movs	r2, #16
    232a:	4393      	bics	r3, r2
    232c:	4662      	mov	r2, ip
    232e:	4313      	orrs	r3, r2
    2330:	4008      	ands	r0, r1
    2332:	0140      	lsls	r0, r0, #5
    2334:	2220      	movs	r2, #32
    2336:	4393      	bics	r3, r2
    2338:	4303      	orrs	r3, r0
    233a:	400f      	ands	r7, r1
    233c:	01bf      	lsls	r7, r7, #6
    233e:	2040      	movs	r0, #64	; 0x40
    2340:	4383      	bics	r3, r0
    2342:	433b      	orrs	r3, r7
    2344:	400e      	ands	r6, r1
    2346:	01f6      	lsls	r6, r6, #7
    2348:	3040      	adds	r0, #64	; 0x40
    234a:	4383      	bics	r3, r0
    234c:	4333      	orrs	r3, r6
    234e:	3879      	subs	r0, #121	; 0x79
    2350:	4005      	ands	r5, r0
    2352:	022d      	lsls	r5, r5, #8
    2354:	4809      	ldr	r0, [pc, #36]	; (237c <system_clock_source_xosc32k_set_config+0xb0>)
    2356:	4003      	ands	r3, r0
    2358:	432b      	orrs	r3, r5
    235a:	4021      	ands	r1, r4
    235c:	0309      	lsls	r1, r1, #12
    235e:	4808      	ldr	r0, [pc, #32]	; (2380 <system_clock_source_xosc32k_set_config+0xb4>)
    2360:	4003      	ands	r3, r0
    2362:	430b      	orrs	r3, r1
    2364:	465a      	mov	r2, fp
    2366:	8293      	strh	r3, [r2, #20]
}
    2368:	bc3c      	pop	{r2, r3, r4, r5}
    236a:	4690      	mov	r8, r2
    236c:	4699      	mov	r9, r3
    236e:	46a2      	mov	sl, r4
    2370:	46ab      	mov	fp, r5
    2372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2374:	40000800 	.word	0x40000800
    2378:	20000338 	.word	0x20000338
    237c:	fffff8ff 	.word	0xfffff8ff
    2380:	ffffefff 	.word	0xffffefff

00002384 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2384:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2386:	7a03      	ldrb	r3, [r0, #8]
    2388:	069b      	lsls	r3, r3, #26
    238a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    238c:	8942      	ldrh	r2, [r0, #10]
    238e:	0592      	lsls	r2, r2, #22
    2390:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2392:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2394:	4918      	ldr	r1, [pc, #96]	; (23f8 <system_clock_source_dfll_set_config+0x74>)
    2396:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2398:	7983      	ldrb	r3, [r0, #6]
    239a:	79c2      	ldrb	r2, [r0, #7]
    239c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    239e:	8842      	ldrh	r2, [r0, #2]
    23a0:	8884      	ldrh	r4, [r0, #4]
    23a2:	4322      	orrs	r2, r4
    23a4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    23a6:	7842      	ldrb	r2, [r0, #1]
    23a8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    23aa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    23ac:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    23ae:	7803      	ldrb	r3, [r0, #0]
    23b0:	2b04      	cmp	r3, #4
    23b2:	d011      	beq.n	23d8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    23b4:	2b20      	cmp	r3, #32
    23b6:	d10e      	bne.n	23d6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    23b8:	7b03      	ldrb	r3, [r0, #12]
    23ba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    23bc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    23be:	4313      	orrs	r3, r2
    23c0:	89c2      	ldrh	r2, [r0, #14]
    23c2:	0412      	lsls	r2, r2, #16
    23c4:	490d      	ldr	r1, [pc, #52]	; (23fc <system_clock_source_dfll_set_config+0x78>)
    23c6:	400a      	ands	r2, r1
    23c8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    23ca:	4a0b      	ldr	r2, [pc, #44]	; (23f8 <system_clock_source_dfll_set_config+0x74>)
    23cc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    23ce:	6811      	ldr	r1, [r2, #0]
    23d0:	4b0b      	ldr	r3, [pc, #44]	; (2400 <system_clock_source_dfll_set_config+0x7c>)
    23d2:	430b      	orrs	r3, r1
    23d4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    23d6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    23d8:	7b03      	ldrb	r3, [r0, #12]
    23da:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    23dc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    23de:	4313      	orrs	r3, r2
    23e0:	89c2      	ldrh	r2, [r0, #14]
    23e2:	0412      	lsls	r2, r2, #16
    23e4:	4905      	ldr	r1, [pc, #20]	; (23fc <system_clock_source_dfll_set_config+0x78>)
    23e6:	400a      	ands	r2, r1
    23e8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    23ea:	4a03      	ldr	r2, [pc, #12]	; (23f8 <system_clock_source_dfll_set_config+0x74>)
    23ec:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    23ee:	6813      	ldr	r3, [r2, #0]
    23f0:	2104      	movs	r1, #4
    23f2:	430b      	orrs	r3, r1
    23f4:	6013      	str	r3, [r2, #0]
    23f6:	e7ee      	b.n	23d6 <system_clock_source_dfll_set_config+0x52>
    23f8:	20000338 	.word	0x20000338
    23fc:	03ff0000 	.word	0x03ff0000
    2400:	00000424 	.word	0x00000424

00002404 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2404:	2808      	cmp	r0, #8
    2406:	d803      	bhi.n	2410 <system_clock_source_enable+0xc>
    2408:	0080      	lsls	r0, r0, #2
    240a:	4b25      	ldr	r3, [pc, #148]	; (24a0 <system_clock_source_enable+0x9c>)
    240c:	581b      	ldr	r3, [r3, r0]
    240e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2410:	2017      	movs	r0, #23
    2412:	e044      	b.n	249e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2414:	4a23      	ldr	r2, [pc, #140]	; (24a4 <system_clock_source_enable+0xa0>)
    2416:	6a13      	ldr	r3, [r2, #32]
    2418:	2102      	movs	r1, #2
    241a:	430b      	orrs	r3, r1
    241c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    241e:	2000      	movs	r0, #0
    2420:	e03d      	b.n	249e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2422:	4a20      	ldr	r2, [pc, #128]	; (24a4 <system_clock_source_enable+0xa0>)
    2424:	6993      	ldr	r3, [r2, #24]
    2426:	2102      	movs	r1, #2
    2428:	430b      	orrs	r3, r1
    242a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    242c:	2000      	movs	r0, #0
		break;
    242e:	e036      	b.n	249e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2430:	4a1c      	ldr	r2, [pc, #112]	; (24a4 <system_clock_source_enable+0xa0>)
    2432:	8a13      	ldrh	r3, [r2, #16]
    2434:	2102      	movs	r1, #2
    2436:	430b      	orrs	r3, r1
    2438:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    243a:	2000      	movs	r0, #0
		break;
    243c:	e02f      	b.n	249e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    243e:	4a19      	ldr	r2, [pc, #100]	; (24a4 <system_clock_source_enable+0xa0>)
    2440:	8a93      	ldrh	r3, [r2, #20]
    2442:	2102      	movs	r1, #2
    2444:	430b      	orrs	r3, r1
    2446:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2448:	2000      	movs	r0, #0
		break;
    244a:	e028      	b.n	249e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    244c:	4916      	ldr	r1, [pc, #88]	; (24a8 <system_clock_source_enable+0xa4>)
    244e:	680b      	ldr	r3, [r1, #0]
    2450:	2202      	movs	r2, #2
    2452:	4313      	orrs	r3, r2
    2454:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2456:	4b13      	ldr	r3, [pc, #76]	; (24a4 <system_clock_source_enable+0xa0>)
    2458:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    245a:	0019      	movs	r1, r3
    245c:	320e      	adds	r2, #14
    245e:	68cb      	ldr	r3, [r1, #12]
    2460:	421a      	tst	r2, r3
    2462:	d0fc      	beq.n	245e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2464:	4a10      	ldr	r2, [pc, #64]	; (24a8 <system_clock_source_enable+0xa4>)
    2466:	6891      	ldr	r1, [r2, #8]
    2468:	4b0e      	ldr	r3, [pc, #56]	; (24a4 <system_clock_source_enable+0xa0>)
    246a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    246c:	6852      	ldr	r2, [r2, #4]
    246e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2470:	2200      	movs	r2, #0
    2472:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2474:	0019      	movs	r1, r3
    2476:	3210      	adds	r2, #16
    2478:	68cb      	ldr	r3, [r1, #12]
    247a:	421a      	tst	r2, r3
    247c:	d0fc      	beq.n	2478 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    247e:	4b0a      	ldr	r3, [pc, #40]	; (24a8 <system_clock_source_enable+0xa4>)
    2480:	681b      	ldr	r3, [r3, #0]
    2482:	b29b      	uxth	r3, r3
    2484:	4a07      	ldr	r2, [pc, #28]	; (24a4 <system_clock_source_enable+0xa0>)
    2486:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2488:	2000      	movs	r0, #0
    248a:	e008      	b.n	249e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    248c:	4905      	ldr	r1, [pc, #20]	; (24a4 <system_clock_source_enable+0xa0>)
    248e:	2244      	movs	r2, #68	; 0x44
    2490:	5c8b      	ldrb	r3, [r1, r2]
    2492:	2002      	movs	r0, #2
    2494:	4303      	orrs	r3, r0
    2496:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2498:	2000      	movs	r0, #0
		break;
    249a:	e000      	b.n	249e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    249c:	2000      	movs	r0, #0
}
    249e:	4770      	bx	lr
    24a0:	00006f2c 	.word	0x00006f2c
    24a4:	40000800 	.word	0x40000800
    24a8:	20000338 	.word	0x20000338

000024ac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    24ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ae:	46d6      	mov	lr, sl
    24b0:	464f      	mov	r7, r9
    24b2:	4646      	mov	r6, r8
    24b4:	b5c0      	push	{r6, r7, lr}
    24b6:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    24b8:	22c2      	movs	r2, #194	; 0xc2
    24ba:	00d2      	lsls	r2, r2, #3
    24bc:	4b60      	ldr	r3, [pc, #384]	; (2640 <system_clock_init+0x194>)
    24be:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    24c0:	4a60      	ldr	r2, [pc, #384]	; (2644 <system_clock_init+0x198>)
    24c2:	6853      	ldr	r3, [r2, #4]
    24c4:	211e      	movs	r1, #30
    24c6:	438b      	bics	r3, r1
    24c8:	391a      	subs	r1, #26
    24ca:	430b      	orrs	r3, r1
    24cc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    24ce:	2203      	movs	r2, #3
    24d0:	ab01      	add	r3, sp, #4
    24d2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24d4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    24d6:	4d5c      	ldr	r5, [pc, #368]	; (2648 <system_clock_init+0x19c>)
    24d8:	b2e0      	uxtb	r0, r4
    24da:	a901      	add	r1, sp, #4
    24dc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    24de:	3401      	adds	r4, #1
    24e0:	2c25      	cmp	r4, #37	; 0x25
    24e2:	d1f9      	bne.n	24d8 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    24e4:	a80c      	add	r0, sp, #48	; 0x30
    24e6:	2300      	movs	r3, #0
    24e8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    24ea:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    24ec:	2280      	movs	r2, #128	; 0x80
    24ee:	0212      	lsls	r2, r2, #8
    24f0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    24f2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    24f4:	2201      	movs	r2, #1
    24f6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    24f8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    24fa:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    24fc:	3205      	adds	r2, #5
    24fe:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2500:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2502:	4b52      	ldr	r3, [pc, #328]	; (264c <system_clock_init+0x1a0>)
    2504:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2506:	2005      	movs	r0, #5
    2508:	4b51      	ldr	r3, [pc, #324]	; (2650 <system_clock_init+0x1a4>)
    250a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    250c:	494c      	ldr	r1, [pc, #304]	; (2640 <system_clock_init+0x194>)
    250e:	2202      	movs	r2, #2
    2510:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2512:	421a      	tst	r2, r3
    2514:	d0fc      	beq.n	2510 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2516:	494a      	ldr	r1, [pc, #296]	; (2640 <system_clock_init+0x194>)
    2518:	8a8b      	ldrh	r3, [r1, #20]
    251a:	2280      	movs	r2, #128	; 0x80
    251c:	4313      	orrs	r3, r2
    251e:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2520:	4c4c      	ldr	r4, [pc, #304]	; (2654 <system_clock_init+0x1a8>)
	SYSCTRL->OSC32K.bit.CALIB =
    2522:	6823      	ldr	r3, [r4, #0]
    2524:	04db      	lsls	r3, r3, #19
    2526:	698a      	ldr	r2, [r1, #24]
    2528:	0e5b      	lsrs	r3, r3, #25
    252a:	041b      	lsls	r3, r3, #16
    252c:	484a      	ldr	r0, [pc, #296]	; (2658 <system_clock_init+0x1ac>)
    252e:	4002      	ands	r2, r0
    2530:	4313      	orrs	r3, r2
    2532:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2534:	a80a      	add	r0, sp, #40	; 0x28
    2536:	2301      	movs	r3, #1
    2538:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    253a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    253c:	2500      	movs	r5, #0
    253e:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    2540:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2542:	3306      	adds	r3, #6
    2544:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2546:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2548:	4b44      	ldr	r3, [pc, #272]	; (265c <system_clock_init+0x1b0>)
    254a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    254c:	2004      	movs	r0, #4
    254e:	4b40      	ldr	r3, [pc, #256]	; (2650 <system_clock_init+0x1a4>)
    2550:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2552:	ab05      	add	r3, sp, #20
    2554:	2200      	movs	r2, #0
    2556:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2558:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    255a:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    255c:	2120      	movs	r1, #32
    255e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2560:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2562:	6823      	ldr	r3, [r4, #0]
    2564:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2566:	2b3f      	cmp	r3, #63	; 0x3f
    2568:	d068      	beq.n	263c <system_clock_init+0x190>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    256a:	a805      	add	r0, sp, #20
    256c:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    256e:	2307      	movs	r3, #7
    2570:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2572:	3303      	adds	r3, #3
    2574:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2576:	4b3a      	ldr	r3, [pc, #232]	; (2660 <system_clock_init+0x1b4>)
    2578:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    257a:	3bff      	subs	r3, #255	; 0xff
    257c:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    257e:	4b39      	ldr	r3, [pc, #228]	; (2664 <system_clock_init+0x1b8>)
    2580:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2582:	4b39      	ldr	r3, [pc, #228]	; (2668 <system_clock_init+0x1bc>)
    2584:	4798      	blx	r3
	config->run_in_standby  = false;
    2586:	a804      	add	r0, sp, #16
    2588:	2500      	movs	r5, #0
    258a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    258c:	2601      	movs	r6, #1
    258e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2590:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2592:	4b36      	ldr	r3, [pc, #216]	; (266c <system_clock_init+0x1c0>)
    2594:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2596:	2006      	movs	r0, #6
    2598:	4b2d      	ldr	r3, [pc, #180]	; (2650 <system_clock_init+0x1a4>)
    259a:	4699      	mov	r9, r3
    259c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    259e:	4b34      	ldr	r3, [pc, #208]	; (2670 <system_clock_init+0x1c4>)
    25a0:	4798      	blx	r3
	config->division_factor    = 1;
    25a2:	ac01      	add	r4, sp, #4
    25a4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    25a6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    25a8:	2306      	movs	r3, #6
    25aa:	469a      	mov	sl, r3
    25ac:	7023      	strb	r3, [r4, #0]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    25ae:	7226      	strb	r6, [r4, #8]
    25b0:	7266      	strb	r6, [r4, #9]
    25b2:	0021      	movs	r1, r4
    25b4:	2001      	movs	r0, #1
    25b6:	4b2f      	ldr	r3, [pc, #188]	; (2674 <system_clock_init+0x1c8>)
    25b8:	4698      	mov	r8, r3
    25ba:	4798      	blx	r3
    25bc:	2001      	movs	r0, #1
    25be:	4f2e      	ldr	r7, [pc, #184]	; (2678 <system_clock_init+0x1cc>)
    25c0:	47b8      	blx	r7
	config->division_factor    = 1;
    25c2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    25c4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    25c6:	4653      	mov	r3, sl
    25c8:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    25ca:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    25cc:	7265      	strb	r5, [r4, #9]
    25ce:	0021      	movs	r1, r4
    25d0:	2002      	movs	r0, #2
    25d2:	47c0      	blx	r8
    25d4:	2002      	movs	r0, #2
    25d6:	47b8      	blx	r7
	config->high_when_disabled = false;
    25d8:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    25da:	7265      	strb	r5, [r4, #9]
    25dc:	2304      	movs	r3, #4
    25de:	7023      	strb	r3, [r4, #0]
    25e0:	331c      	adds	r3, #28
    25e2:	6063      	str	r3, [r4, #4]
    25e4:	7226      	strb	r6, [r4, #8]
    25e6:	0021      	movs	r1, r4
    25e8:	2004      	movs	r0, #4
    25ea:	47c0      	blx	r8
    25ec:	2004      	movs	r0, #4
    25ee:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    25f0:	2007      	movs	r0, #7
    25f2:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    25f4:	4912      	ldr	r1, [pc, #72]	; (2640 <system_clock_init+0x194>)
    25f6:	2210      	movs	r2, #16
    25f8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    25fa:	421a      	tst	r2, r3
    25fc:	d0fc      	beq.n	25f8 <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    25fe:	4a10      	ldr	r2, [pc, #64]	; (2640 <system_clock_init+0x194>)
    2600:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2602:	2180      	movs	r1, #128	; 0x80
    2604:	430b      	orrs	r3, r1
    2606:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2608:	4a1c      	ldr	r2, [pc, #112]	; (267c <system_clock_init+0x1d0>)
    260a:	2300      	movs	r3, #0
    260c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    260e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2610:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2612:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2614:	a901      	add	r1, sp, #4
    2616:	2201      	movs	r2, #1
    2618:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    261a:	704b      	strb	r3, [r1, #1]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    261c:	3307      	adds	r3, #7
    261e:	700b      	strb	r3, [r1, #0]
    2620:	720a      	strb	r2, [r1, #8]
    2622:	724a      	strb	r2, [r1, #9]
    2624:	2000      	movs	r0, #0
    2626:	4b13      	ldr	r3, [pc, #76]	; (2674 <system_clock_init+0x1c8>)
    2628:	4798      	blx	r3
    262a:	2000      	movs	r0, #0
    262c:	4b12      	ldr	r3, [pc, #72]	; (2678 <system_clock_init+0x1cc>)
    262e:	4798      	blx	r3
#endif
}
    2630:	b010      	add	sp, #64	; 0x40
    2632:	bc1c      	pop	{r2, r3, r4}
    2634:	4690      	mov	r8, r2
    2636:	4699      	mov	r9, r3
    2638:	46a2      	mov	sl, r4
    263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    263c:	3b20      	subs	r3, #32
    263e:	e794      	b.n	256a <system_clock_init+0xbe>
    2640:	40000800 	.word	0x40000800
    2644:	41004000 	.word	0x41004000
    2648:	0000282d 	.word	0x0000282d
    264c:	000022cd 	.word	0x000022cd
    2650:	00002405 	.word	0x00002405
    2654:	00806024 	.word	0x00806024
    2658:	ff80ffff 	.word	0xff80ffff
    265c:	00002251 	.word	0x00002251
    2660:	000001ff 	.word	0x000001ff
    2664:	ffffbb80 	.word	0xffffbb80
    2668:	00002385 	.word	0x00002385
    266c:	00002215 	.word	0x00002215
    2670:	00002681 	.word	0x00002681
    2674:	000026a5 	.word	0x000026a5
    2678:	0000275d 	.word	0x0000275d
    267c:	40000400 	.word	0x40000400

00002680 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2680:	4a06      	ldr	r2, [pc, #24]	; (269c <system_gclk_init+0x1c>)
    2682:	6993      	ldr	r3, [r2, #24]
    2684:	2108      	movs	r1, #8
    2686:	430b      	orrs	r3, r1
    2688:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    268a:	2201      	movs	r2, #1
    268c:	4b04      	ldr	r3, [pc, #16]	; (26a0 <system_gclk_init+0x20>)
    268e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2690:	0019      	movs	r1, r3
    2692:	780b      	ldrb	r3, [r1, #0]
    2694:	4213      	tst	r3, r2
    2696:	d1fc      	bne.n	2692 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2698:	4770      	bx	lr
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	40000400 	.word	0x40000400
    26a0:	40000c00 	.word	0x40000c00

000026a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    26a8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    26aa:	780d      	ldrb	r5, [r1, #0]
    26ac:	022d      	lsls	r5, r5, #8
    26ae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    26b0:	784b      	ldrb	r3, [r1, #1]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d002      	beq.n	26bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    26b6:	2380      	movs	r3, #128	; 0x80
    26b8:	02db      	lsls	r3, r3, #11
    26ba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    26bc:	7a4b      	ldrb	r3, [r1, #9]
    26be:	2b00      	cmp	r3, #0
    26c0:	d002      	beq.n	26c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    26c2:	2380      	movs	r3, #128	; 0x80
    26c4:	031b      	lsls	r3, r3, #12
    26c6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    26c8:	6848      	ldr	r0, [r1, #4]
    26ca:	2801      	cmp	r0, #1
    26cc:	d910      	bls.n	26f0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    26ce:	1e43      	subs	r3, r0, #1
    26d0:	4218      	tst	r0, r3
    26d2:	d134      	bne.n	273e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    26d4:	2802      	cmp	r0, #2
    26d6:	d930      	bls.n	273a <system_gclk_gen_set_config+0x96>
    26d8:	2302      	movs	r3, #2
    26da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    26dc:	3201      	adds	r2, #1
						mask <<= 1) {
    26de:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    26e0:	4298      	cmp	r0, r3
    26e2:	d8fb      	bhi.n	26dc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    26e4:	0212      	lsls	r2, r2, #8
    26e6:	4332      	orrs	r2, r6
    26e8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    26ea:	2380      	movs	r3, #128	; 0x80
    26ec:	035b      	lsls	r3, r3, #13
    26ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    26f0:	7a0b      	ldrb	r3, [r1, #8]
    26f2:	2b00      	cmp	r3, #0
    26f4:	d002      	beq.n	26fc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    26f6:	2380      	movs	r3, #128	; 0x80
    26f8:	039b      	lsls	r3, r3, #14
    26fa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26fc:	4a13      	ldr	r2, [pc, #76]	; (274c <system_gclk_gen_set_config+0xa8>)
    26fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2700:	b25b      	sxtb	r3, r3
    2702:	2b00      	cmp	r3, #0
    2704:	dbfb      	blt.n	26fe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2706:	4b12      	ldr	r3, [pc, #72]	; (2750 <system_gclk_gen_set_config+0xac>)
    2708:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    270a:	4b12      	ldr	r3, [pc, #72]	; (2754 <system_gclk_gen_set_config+0xb0>)
    270c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    270e:	4a0f      	ldr	r2, [pc, #60]	; (274c <system_gclk_gen_set_config+0xa8>)
    2710:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2712:	b25b      	sxtb	r3, r3
    2714:	2b00      	cmp	r3, #0
    2716:	dbfb      	blt.n	2710 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2718:	4b0c      	ldr	r3, [pc, #48]	; (274c <system_gclk_gen_set_config+0xa8>)
    271a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    271c:	001a      	movs	r2, r3
    271e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2720:	b25b      	sxtb	r3, r3
    2722:	2b00      	cmp	r3, #0
    2724:	dbfb      	blt.n	271e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2726:	4a09      	ldr	r2, [pc, #36]	; (274c <system_gclk_gen_set_config+0xa8>)
    2728:	6853      	ldr	r3, [r2, #4]
    272a:	2180      	movs	r1, #128	; 0x80
    272c:	0249      	lsls	r1, r1, #9
    272e:	400b      	ands	r3, r1
    2730:	431d      	orrs	r5, r3
    2732:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2734:	4b08      	ldr	r3, [pc, #32]	; (2758 <system_gclk_gen_set_config+0xb4>)
    2736:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2738:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    273a:	2200      	movs	r2, #0
    273c:	e7d2      	b.n	26e4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    273e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2740:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2742:	2380      	movs	r3, #128	; 0x80
    2744:	029b      	lsls	r3, r3, #10
    2746:	431d      	orrs	r5, r3
    2748:	e7d2      	b.n	26f0 <system_gclk_gen_set_config+0x4c>
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	40000c00 	.word	0x40000c00
    2750:	00001ce1 	.word	0x00001ce1
    2754:	40000c08 	.word	0x40000c08
    2758:	00001d21 	.word	0x00001d21

0000275c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    275c:	b510      	push	{r4, lr}
    275e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2760:	4a0b      	ldr	r2, [pc, #44]	; (2790 <system_gclk_gen_enable+0x34>)
    2762:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2764:	b25b      	sxtb	r3, r3
    2766:	2b00      	cmp	r3, #0
    2768:	dbfb      	blt.n	2762 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    276a:	4b0a      	ldr	r3, [pc, #40]	; (2794 <system_gclk_gen_enable+0x38>)
    276c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    276e:	4b0a      	ldr	r3, [pc, #40]	; (2798 <system_gclk_gen_enable+0x3c>)
    2770:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2772:	4a07      	ldr	r2, [pc, #28]	; (2790 <system_gclk_gen_enable+0x34>)
    2774:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2776:	b25b      	sxtb	r3, r3
    2778:	2b00      	cmp	r3, #0
    277a:	dbfb      	blt.n	2774 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    277c:	4a04      	ldr	r2, [pc, #16]	; (2790 <system_gclk_gen_enable+0x34>)
    277e:	6851      	ldr	r1, [r2, #4]
    2780:	2380      	movs	r3, #128	; 0x80
    2782:	025b      	lsls	r3, r3, #9
    2784:	430b      	orrs	r3, r1
    2786:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2788:	4b04      	ldr	r3, [pc, #16]	; (279c <system_gclk_gen_enable+0x40>)
    278a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    278c:	bd10      	pop	{r4, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	40000c00 	.word	0x40000c00
    2794:	00001ce1 	.word	0x00001ce1
    2798:	40000c04 	.word	0x40000c04
    279c:	00001d21 	.word	0x00001d21

000027a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    27a0:	b510      	push	{r4, lr}
    27a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27a4:	4b06      	ldr	r3, [pc, #24]	; (27c0 <system_gclk_chan_enable+0x20>)
    27a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27a8:	4b06      	ldr	r3, [pc, #24]	; (27c4 <system_gclk_chan_enable+0x24>)
    27aa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    27ac:	4a06      	ldr	r2, [pc, #24]	; (27c8 <system_gclk_chan_enable+0x28>)
    27ae:	8853      	ldrh	r3, [r2, #2]
    27b0:	2180      	movs	r1, #128	; 0x80
    27b2:	01c9      	lsls	r1, r1, #7
    27b4:	430b      	orrs	r3, r1
    27b6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    27b8:	4b04      	ldr	r3, [pc, #16]	; (27cc <system_gclk_chan_enable+0x2c>)
    27ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27bc:	bd10      	pop	{r4, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	00001ce1 	.word	0x00001ce1
    27c4:	40000c02 	.word	0x40000c02
    27c8:	40000c00 	.word	0x40000c00
    27cc:	00001d21 	.word	0x00001d21

000027d0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    27d0:	b510      	push	{r4, lr}
    27d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27d4:	4b0f      	ldr	r3, [pc, #60]	; (2814 <system_gclk_chan_disable+0x44>)
    27d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27d8:	4b0f      	ldr	r3, [pc, #60]	; (2818 <system_gclk_chan_disable+0x48>)
    27da:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    27dc:	4a0f      	ldr	r2, [pc, #60]	; (281c <system_gclk_chan_disable+0x4c>)
    27de:	8853      	ldrh	r3, [r2, #2]
    27e0:	051b      	lsls	r3, r3, #20
    27e2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    27e4:	8853      	ldrh	r3, [r2, #2]
    27e6:	490e      	ldr	r1, [pc, #56]	; (2820 <system_gclk_chan_disable+0x50>)
    27e8:	400b      	ands	r3, r1
    27ea:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    27ec:	8853      	ldrh	r3, [r2, #2]
    27ee:	490d      	ldr	r1, [pc, #52]	; (2824 <system_gclk_chan_disable+0x54>)
    27f0:	400b      	ands	r3, r1
    27f2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    27f4:	0011      	movs	r1, r2
    27f6:	2280      	movs	r2, #128	; 0x80
    27f8:	01d2      	lsls	r2, r2, #7
    27fa:	884b      	ldrh	r3, [r1, #2]
    27fc:	4213      	tst	r3, r2
    27fe:	d1fc      	bne.n	27fa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2800:	4906      	ldr	r1, [pc, #24]	; (281c <system_gclk_chan_disable+0x4c>)
    2802:	884a      	ldrh	r2, [r1, #2]
    2804:	0203      	lsls	r3, r0, #8
    2806:	4806      	ldr	r0, [pc, #24]	; (2820 <system_gclk_chan_disable+0x50>)
    2808:	4002      	ands	r2, r0
    280a:	4313      	orrs	r3, r2
    280c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    280e:	4b06      	ldr	r3, [pc, #24]	; (2828 <system_gclk_chan_disable+0x58>)
    2810:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2812:	bd10      	pop	{r4, pc}
    2814:	00001ce1 	.word	0x00001ce1
    2818:	40000c02 	.word	0x40000c02
    281c:	40000c00 	.word	0x40000c00
    2820:	fffff0ff 	.word	0xfffff0ff
    2824:	ffffbfff 	.word	0xffffbfff
    2828:	00001d21 	.word	0x00001d21

0000282c <system_gclk_chan_set_config>:
{
    282c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    282e:	780c      	ldrb	r4, [r1, #0]
    2830:	0224      	lsls	r4, r4, #8
    2832:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2834:	4b02      	ldr	r3, [pc, #8]	; (2840 <system_gclk_chan_set_config+0x14>)
    2836:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2838:	b2a4      	uxth	r4, r4
    283a:	4b02      	ldr	r3, [pc, #8]	; (2844 <system_gclk_chan_set_config+0x18>)
    283c:	805c      	strh	r4, [r3, #2]
}
    283e:	bd10      	pop	{r4, pc}
    2840:	000027d1 	.word	0x000027d1
    2844:	40000c00 	.word	0x40000c00

00002848 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2848:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    284a:	78d3      	ldrb	r3, [r2, #3]
    284c:	2b00      	cmp	r3, #0
    284e:	d135      	bne.n	28bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2850:	7813      	ldrb	r3, [r2, #0]
    2852:	2b80      	cmp	r3, #128	; 0x80
    2854:	d029      	beq.n	28aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2856:	061b      	lsls	r3, r3, #24
    2858:	2480      	movs	r4, #128	; 0x80
    285a:	0264      	lsls	r4, r4, #9
    285c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    285e:	7854      	ldrb	r4, [r2, #1]
    2860:	2502      	movs	r5, #2
    2862:	43ac      	bics	r4, r5
    2864:	d106      	bne.n	2874 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2866:	7894      	ldrb	r4, [r2, #2]
    2868:	2c00      	cmp	r4, #0
    286a:	d120      	bne.n	28ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    286c:	2480      	movs	r4, #128	; 0x80
    286e:	02a4      	lsls	r4, r4, #10
    2870:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2872:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2874:	7854      	ldrb	r4, [r2, #1]
    2876:	3c01      	subs	r4, #1
    2878:	2c01      	cmp	r4, #1
    287a:	d91c      	bls.n	28b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    287c:	040d      	lsls	r5, r1, #16
    287e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2880:	24a0      	movs	r4, #160	; 0xa0
    2882:	05e4      	lsls	r4, r4, #23
    2884:	432c      	orrs	r4, r5
    2886:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2888:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    288a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    288c:	24d0      	movs	r4, #208	; 0xd0
    288e:	0624      	lsls	r4, r4, #24
    2890:	432c      	orrs	r4, r5
    2892:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2894:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2896:	78d4      	ldrb	r4, [r2, #3]
    2898:	2c00      	cmp	r4, #0
    289a:	d122      	bne.n	28e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    289c:	035b      	lsls	r3, r3, #13
    289e:	d51c      	bpl.n	28da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    28a0:	7893      	ldrb	r3, [r2, #2]
    28a2:	2b01      	cmp	r3, #1
    28a4:	d01e      	beq.n	28e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    28a6:	6141      	str	r1, [r0, #20]
    28a8:	e017      	b.n	28da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    28aa:	2300      	movs	r3, #0
    28ac:	e7d7      	b.n	285e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    28ae:	24c0      	movs	r4, #192	; 0xc0
    28b0:	02e4      	lsls	r4, r4, #11
    28b2:	4323      	orrs	r3, r4
    28b4:	e7dd      	b.n	2872 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    28b6:	4c0d      	ldr	r4, [pc, #52]	; (28ec <_system_pinmux_config+0xa4>)
    28b8:	4023      	ands	r3, r4
    28ba:	e7df      	b.n	287c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    28bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    28be:	040c      	lsls	r4, r1, #16
    28c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    28c2:	23a0      	movs	r3, #160	; 0xa0
    28c4:	05db      	lsls	r3, r3, #23
    28c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    28ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    28cc:	23d0      	movs	r3, #208	; 0xd0
    28ce:	061b      	lsls	r3, r3, #24
    28d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    28d4:	78d3      	ldrb	r3, [r2, #3]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d103      	bne.n	28e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28da:	7853      	ldrb	r3, [r2, #1]
    28dc:	3b01      	subs	r3, #1
    28de:	2b01      	cmp	r3, #1
    28e0:	d902      	bls.n	28e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    28e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    28e4:	6181      	str	r1, [r0, #24]
    28e6:	e7f8      	b.n	28da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    28e8:	6081      	str	r1, [r0, #8]
}
    28ea:	e7fa      	b.n	28e2 <_system_pinmux_config+0x9a>
    28ec:	fffbffff 	.word	0xfffbffff

000028f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    28f0:	b510      	push	{r4, lr}
    28f2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    28f4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    28f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    28f8:	2900      	cmp	r1, #0
    28fa:	d104      	bne.n	2906 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    28fc:	0943      	lsrs	r3, r0, #5
    28fe:	01db      	lsls	r3, r3, #7
    2900:	4905      	ldr	r1, [pc, #20]	; (2918 <system_pinmux_pin_set_config+0x28>)
    2902:	468c      	mov	ip, r1
    2904:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2906:	241f      	movs	r4, #31
    2908:	4020      	ands	r0, r4
    290a:	2101      	movs	r1, #1
    290c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    290e:	0018      	movs	r0, r3
    2910:	4b02      	ldr	r3, [pc, #8]	; (291c <system_pinmux_pin_set_config+0x2c>)
    2912:	4798      	blx	r3
}
    2914:	bd10      	pop	{r4, pc}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	41004400 	.word	0x41004400
    291c:	00002849 	.word	0x00002849

00002920 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2920:	4770      	bx	lr
	...

00002924 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2924:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2926:	4b05      	ldr	r3, [pc, #20]	; (293c <system_init+0x18>)
    2928:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    292a:	4b05      	ldr	r3, [pc, #20]	; (2940 <system_init+0x1c>)
    292c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    292e:	4b05      	ldr	r3, [pc, #20]	; (2944 <system_init+0x20>)
    2930:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2932:	4b05      	ldr	r3, [pc, #20]	; (2948 <system_init+0x24>)
    2934:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2936:	4b05      	ldr	r3, [pc, #20]	; (294c <system_init+0x28>)
    2938:	4798      	blx	r3
}
    293a:	bd10      	pop	{r4, pc}
    293c:	000024ad 	.word	0x000024ad
    2940:	00001d51 	.word	0x00001d51
    2944:	00002921 	.word	0x00002921
    2948:	00001e61 	.word	0x00001e61
    294c:	00002921 	.word	0x00002921

00002950 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2950:	b510      	push	{r4, lr}
    2952:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2954:	ab03      	add	r3, sp, #12
    2956:	2200      	movs	r2, #0
    2958:	701a      	strb	r2, [r3, #0]
    295a:	3203      	adds	r2, #3
    295c:	705a      	strb	r2, [r3, #1]
    295e:	3a01      	subs	r2, #1
    2960:	709a      	strb	r2, [r3, #2]
    2962:	3a01      	subs	r2, #1
    2964:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2966:	4b27      	ldr	r3, [pc, #156]	; (2a04 <udd_sleep_mode+0xb4>)
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	4283      	cmp	r3, r0
    296c:	d007      	beq.n	297e <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    296e:	2800      	cmp	r0, #0
    2970:	d107      	bne.n	2982 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2972:	4b24      	ldr	r3, [pc, #144]	; (2a04 <udd_sleep_mode+0xb4>)
    2974:	781b      	ldrb	r3, [r3, #0]
    2976:	2b00      	cmp	r3, #0
    2978:	d123      	bne.n	29c2 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    297a:	4b22      	ldr	r3, [pc, #136]	; (2a04 <udd_sleep_mode+0xb4>)
    297c:	7018      	strb	r0, [r3, #0]
}
    297e:	b004      	add	sp, #16
    2980:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2982:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2984:	5c1b      	ldrb	r3, [r3, r0]
    2986:	4a20      	ldr	r2, [pc, #128]	; (2a08 <udd_sleep_mode+0xb8>)
    2988:	5cd2      	ldrb	r2, [r2, r3]
    298a:	2aff      	cmp	r2, #255	; 0xff
    298c:	d100      	bne.n	2990 <udd_sleep_mode+0x40>
    298e:	e7fe      	b.n	298e <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2990:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2994:	4251      	negs	r1, r2
    2996:	414a      	adcs	r2, r1
    2998:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    299a:	b672      	cpsid	i
    299c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    29a0:	2100      	movs	r1, #0
    29a2:	4a1a      	ldr	r2, [pc, #104]	; (2a0c <udd_sleep_mode+0xbc>)
    29a4:	7011      	strb	r1, [r2, #0]
	return flags;
    29a6:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    29a8:	4917      	ldr	r1, [pc, #92]	; (2a08 <udd_sleep_mode+0xb8>)
    29aa:	5cca      	ldrb	r2, [r1, r3]
    29ac:	3201      	adds	r2, #1
    29ae:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    29b0:	2c00      	cmp	r4, #0
    29b2:	d0de      	beq.n	2972 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    29b4:	2201      	movs	r2, #1
    29b6:	4b15      	ldr	r3, [pc, #84]	; (2a0c <udd_sleep_mode+0xbc>)
    29b8:	701a      	strb	r2, [r3, #0]
    29ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    29be:	b662      	cpsie	i
    29c0:	e7d7      	b.n	2972 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    29c2:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    29c4:	5cd3      	ldrb	r3, [r2, r3]
    29c6:	4a10      	ldr	r2, [pc, #64]	; (2a08 <udd_sleep_mode+0xb8>)
    29c8:	5cd2      	ldrb	r2, [r2, r3]
    29ca:	2a00      	cmp	r2, #0
    29cc:	d100      	bne.n	29d0 <udd_sleep_mode+0x80>
    29ce:	e7fe      	b.n	29ce <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29d0:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    29d4:	4251      	negs	r1, r2
    29d6:	414a      	adcs	r2, r1
    29d8:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    29da:	b672      	cpsid	i
    29dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    29e0:	2100      	movs	r1, #0
    29e2:	4a0a      	ldr	r2, [pc, #40]	; (2a0c <udd_sleep_mode+0xbc>)
    29e4:	7011      	strb	r1, [r2, #0]
	return flags;
    29e6:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    29e8:	4907      	ldr	r1, [pc, #28]	; (2a08 <udd_sleep_mode+0xb8>)
    29ea:	5cca      	ldrb	r2, [r1, r3]
    29ec:	3a01      	subs	r2, #1
    29ee:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    29f0:	2c00      	cmp	r4, #0
    29f2:	d0c2      	beq.n	297a <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    29f4:	2201      	movs	r2, #1
    29f6:	4b05      	ldr	r3, [pc, #20]	; (2a0c <udd_sleep_mode+0xbc>)
    29f8:	701a      	strb	r2, [r3, #0]
    29fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    29fe:	b662      	cpsie	i
    2a00:	e7bb      	b.n	297a <udd_sleep_mode+0x2a>
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	200003d0 	.word	0x200003d0
    2a08:	20000570 	.word	0x20000570
    2a0c:	2000010c 	.word	0x2000010c

00002a10 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2a10:	230f      	movs	r3, #15
    2a12:	4003      	ands	r3, r0
    2a14:	005b      	lsls	r3, r3, #1
    2a16:	09c0      	lsrs	r0, r0, #7
    2a18:	1818      	adds	r0, r3, r0
    2a1a:	3802      	subs	r0, #2
    2a1c:	0083      	lsls	r3, r0, #2
    2a1e:	1818      	adds	r0, r3, r0
    2a20:	0080      	lsls	r0, r0, #2
    2a22:	4b01      	ldr	r3, [pc, #4]	; (2a28 <udd_ep_get_job+0x18>)
    2a24:	1818      	adds	r0, r3, r0
}
    2a26:	4770      	bx	lr
    2a28:	20000358 	.word	0x20000358

00002a2c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a2e:	46d6      	mov	lr, sl
    2a30:	464f      	mov	r7, r9
    2a32:	4646      	mov	r6, r8
    2a34:	b5c0      	push	{r6, r7, lr}
    2a36:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2a38:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2a3a:	b26b      	sxtb	r3, r5
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	db26      	blt.n	2a8e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2a40:	0028      	movs	r0, r5
    2a42:	4b5e      	ldr	r3, [pc, #376]	; (2bbc <udd_ep_transfer_process+0x190>)
    2a44:	4798      	blx	r3
    2a46:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2a48:	270f      	movs	r7, #15
    2a4a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2a4c:	8a03      	ldrh	r3, [r0, #16]
    2a4e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2a50:	464b      	mov	r3, r9
    2a52:	881b      	ldrh	r3, [r3, #0]
    2a54:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2a56:	7c83      	ldrb	r3, [r0, #18]
    2a58:	075b      	lsls	r3, r3, #29
    2a5a:	d46a      	bmi.n	2b32 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2a5c:	68e3      	ldr	r3, [r4, #12]
    2a5e:	4453      	add	r3, sl
    2a60:	001e      	movs	r6, r3
    2a62:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2a64:	68a3      	ldr	r3, [r4, #8]
    2a66:	429e      	cmp	r6, r3
    2a68:	d800      	bhi.n	2a6c <udd_ep_transfer_process+0x40>
    2a6a:	e074      	b.n	2b56 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2a6c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2a6e:	7ca3      	ldrb	r3, [r4, #18]
    2a70:	2201      	movs	r2, #1
    2a72:	4393      	bics	r3, r2
    2a74:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2a76:	6823      	ldr	r3, [r4, #0]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d003      	beq.n	2a84 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2a7c:	68e1      	ldr	r1, [r4, #12]
    2a7e:	002a      	movs	r2, r5
    2a80:	2000      	movs	r0, #0
    2a82:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2a84:	bc1c      	pop	{r2, r3, r4}
    2a86:	4690      	mov	r8, r2
    2a88:	4699      	mov	r9, r3
    2a8a:	46a2      	mov	sl, r4
    2a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2a8e:	0028      	movs	r0, r5
    2a90:	4b4a      	ldr	r3, [pc, #296]	; (2bbc <udd_ep_transfer_process+0x190>)
    2a92:	4798      	blx	r3
    2a94:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2a96:	270f      	movs	r7, #15
    2a98:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2a9a:	8a03      	ldrh	r3, [r0, #16]
    2a9c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2a9e:	464b      	mov	r3, r9
    2aa0:	885e      	ldrh	r6, [r3, #2]
    2aa2:	68c3      	ldr	r3, [r0, #12]
    2aa4:	469c      	mov	ip, r3
    2aa6:	4466      	add	r6, ip
    2aa8:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2aaa:	6881      	ldr	r1, [r0, #8]
    2aac:	428e      	cmp	r6, r1
    2aae:	d025      	beq.n	2afc <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2ab0:	1b8d      	subs	r5, r1, r6
    2ab2:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2ab4:	4b42      	ldr	r3, [pc, #264]	; (2bc0 <udd_ep_transfer_process+0x194>)
    2ab6:	429d      	cmp	r5, r3
    2ab8:	d906      	bls.n	2ac8 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2aba:	001d      	movs	r5, r3
    2abc:	4641      	mov	r1, r8
    2abe:	0018      	movs	r0, r3
    2ac0:	4b40      	ldr	r3, [pc, #256]	; (2bc4 <udd_ep_transfer_process+0x198>)
    2ac2:	4798      	blx	r3
    2ac4:	1a6d      	subs	r5, r5, r1
    2ac6:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2ac8:	7ca2      	ldrb	r2, [r4, #18]
    2aca:	2300      	movs	r3, #0
    2acc:	0792      	lsls	r2, r2, #30
    2ace:	d507      	bpl.n	2ae0 <udd_ep_transfer_process+0xb4>
    2ad0:	4641      	mov	r1, r8
    2ad2:	0028      	movs	r0, r5
    2ad4:	4b3c      	ldr	r3, [pc, #240]	; (2bc8 <udd_ep_transfer_process+0x19c>)
    2ad6:	4798      	blx	r3
    2ad8:	b289      	uxth	r1, r1
    2ada:	424b      	negs	r3, r1
    2adc:	414b      	adcs	r3, r1
    2ade:	b2db      	uxtb	r3, r3
    2ae0:	005b      	lsls	r3, r3, #1
    2ae2:	7ca2      	ldrb	r2, [r4, #18]
    2ae4:	2102      	movs	r1, #2
    2ae6:	438a      	bics	r2, r1
    2ae8:	4313      	orrs	r3, r2
    2aea:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2aec:	6862      	ldr	r2, [r4, #4]
    2aee:	1992      	adds	r2, r2, r6
    2af0:	002b      	movs	r3, r5
    2af2:	0039      	movs	r1, r7
    2af4:	4835      	ldr	r0, [pc, #212]	; (2bcc <udd_ep_transfer_process+0x1a0>)
    2af6:	4c36      	ldr	r4, [pc, #216]	; (2bd0 <udd_ep_transfer_process+0x1a4>)
    2af8:	47a0      	blx	r4
    2afa:	e7c3      	b.n	2a84 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2afc:	7c83      	ldrb	r3, [r0, #18]
    2afe:	079b      	lsls	r3, r3, #30
    2b00:	d40b      	bmi.n	2b1a <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2b02:	7c83      	ldrb	r3, [r0, #18]
    2b04:	2201      	movs	r2, #1
    2b06:	4393      	bics	r3, r2
    2b08:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2b0a:	6803      	ldr	r3, [r0, #0]
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d0b9      	beq.n	2a84 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2b10:	002a      	movs	r2, r5
    2b12:	0031      	movs	r1, r6
    2b14:	2000      	movs	r0, #0
    2b16:	4798      	blx	r3
    2b18:	e7b4      	b.n	2a84 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2b1a:	7c83      	ldrb	r3, [r0, #18]
    2b1c:	2202      	movs	r2, #2
    2b1e:	4393      	bics	r3, r2
    2b20:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2b22:	6842      	ldr	r2, [r0, #4]
    2b24:	1992      	adds	r2, r2, r6
    2b26:	2300      	movs	r3, #0
    2b28:	0039      	movs	r1, r7
    2b2a:	4828      	ldr	r0, [pc, #160]	; (2bcc <udd_ep_transfer_process+0x1a0>)
    2b2c:	4c28      	ldr	r4, [pc, #160]	; (2bd0 <udd_ep_transfer_process+0x1a4>)
    2b2e:	47a0      	blx	r4
    2b30:	e7a8      	b.n	2a84 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2b32:	6843      	ldr	r3, [r0, #4]
    2b34:	68c2      	ldr	r2, [r0, #12]
    2b36:	4694      	mov	ip, r2
    2b38:	4463      	add	r3, ip
    2b3a:	001e      	movs	r6, r3
    2b3c:	4641      	mov	r1, r8
    2b3e:	6880      	ldr	r0, [r0, #8]
    2b40:	4b21      	ldr	r3, [pc, #132]	; (2bc8 <udd_ep_transfer_process+0x19c>)
    2b42:	4798      	blx	r3
    2b44:	000a      	movs	r2, r1
    2b46:	1e7b      	subs	r3, r7, #1
    2b48:	019b      	lsls	r3, r3, #6
    2b4a:	4922      	ldr	r1, [pc, #136]	; (2bd4 <udd_ep_transfer_process+0x1a8>)
    2b4c:	1859      	adds	r1, r3, r1
    2b4e:	0030      	movs	r0, r6
    2b50:	4b21      	ldr	r3, [pc, #132]	; (2bd8 <udd_ep_transfer_process+0x1ac>)
    2b52:	4798      	blx	r3
    2b54:	e782      	b.n	2a5c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2b56:	464a      	mov	r2, r9
    2b58:	8892      	ldrh	r2, [r2, #4]
    2b5a:	4552      	cmp	r2, sl
    2b5c:	d000      	beq.n	2b60 <udd_ep_transfer_process+0x134>
    2b5e:	e786      	b.n	2a6e <udd_ep_transfer_process+0x42>
    2b60:	429e      	cmp	r6, r3
    2b62:	d100      	bne.n	2b66 <udd_ep_transfer_process+0x13a>
    2b64:	e783      	b.n	2a6e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2b66:	1b9b      	subs	r3, r3, r6
    2b68:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2b6a:	4b15      	ldr	r3, [pc, #84]	; (2bc0 <udd_ep_transfer_process+0x194>)
    2b6c:	429d      	cmp	r5, r3
    2b6e:	d916      	bls.n	2b9e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2b70:	001d      	movs	r5, r3
    2b72:	4641      	mov	r1, r8
    2b74:	0018      	movs	r0, r3
    2b76:	4b13      	ldr	r3, [pc, #76]	; (2bc4 <udd_ep_transfer_process+0x198>)
    2b78:	4798      	blx	r3
    2b7a:	1a6b      	subs	r3, r5, r1
    2b7c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2b7e:	4598      	cmp	r8, r3
    2b80:	d914      	bls.n	2bac <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2b82:	7ca3      	ldrb	r3, [r4, #18]
    2b84:	2204      	movs	r2, #4
    2b86:	4313      	orrs	r3, r2
    2b88:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2b8a:	1e7a      	subs	r2, r7, #1
    2b8c:	0192      	lsls	r2, r2, #6
    2b8e:	4b11      	ldr	r3, [pc, #68]	; (2bd4 <udd_ep_transfer_process+0x1a8>)
    2b90:	18d2      	adds	r2, r2, r3
    2b92:	4643      	mov	r3, r8
    2b94:	0039      	movs	r1, r7
    2b96:	480d      	ldr	r0, [pc, #52]	; (2bcc <udd_ep_transfer_process+0x1a0>)
    2b98:	4c10      	ldr	r4, [pc, #64]	; (2bdc <udd_ep_transfer_process+0x1b0>)
    2b9a:	47a0      	blx	r4
    2b9c:	e772      	b.n	2a84 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2b9e:	4641      	mov	r1, r8
    2ba0:	0028      	movs	r0, r5
    2ba2:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <udd_ep_transfer_process+0x19c>)
    2ba4:	4798      	blx	r3
    2ba6:	1a6b      	subs	r3, r5, r1
    2ba8:	b29b      	uxth	r3, r3
    2baa:	e7e8      	b.n	2b7e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2bac:	6862      	ldr	r2, [r4, #4]
    2bae:	1992      	adds	r2, r2, r6
    2bb0:	0039      	movs	r1, r7
    2bb2:	4806      	ldr	r0, [pc, #24]	; (2bcc <udd_ep_transfer_process+0x1a0>)
    2bb4:	4c09      	ldr	r4, [pc, #36]	; (2bdc <udd_ep_transfer_process+0x1b0>)
    2bb6:	47a0      	blx	r4
    2bb8:	e764      	b.n	2a84 <udd_ep_transfer_process+0x58>
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	00002a11 	.word	0x00002a11
    2bc0:	00001fff 	.word	0x00001fff
    2bc4:	00004ec5 	.word	0x00004ec5
    2bc8:	00004cf1 	.word	0x00004cf1
    2bcc:	20000678 	.word	0x20000678
    2bd0:	00003cc1 	.word	0x00003cc1
    2bd4:	200005b8 	.word	0x200005b8
    2bd8:	000064cd 	.word	0x000064cd
    2bdc:	00003d15 	.word	0x00003d15

00002be0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2be0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2be2:	2205      	movs	r2, #5
    2be4:	4b05      	ldr	r3, [pc, #20]	; (2bfc <udd_ctrl_stall_data+0x1c>)
    2be6:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2be8:	4c05      	ldr	r4, [pc, #20]	; (2c00 <udd_ctrl_stall_data+0x20>)
    2bea:	2180      	movs	r1, #128	; 0x80
    2bec:	0020      	movs	r0, r4
    2bee:	4b05      	ldr	r3, [pc, #20]	; (2c04 <udd_ctrl_stall_data+0x24>)
    2bf0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2bf2:	2100      	movs	r1, #0
    2bf4:	0020      	movs	r0, r4
    2bf6:	4b04      	ldr	r3, [pc, #16]	; (2c08 <udd_ctrl_stall_data+0x28>)
    2bf8:	4798      	blx	r3
}
    2bfa:	bd10      	pop	{r4, pc}
    2bfc:	20000356 	.word	0x20000356
    2c00:	20000678 	.word	0x20000678
    2c04:	00003c15 	.word	0x00003c15
    2c08:	00003c3b 	.word	0x00003c3b

00002c0c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2c0c:	b570      	push	{r4, r5, r6, lr}
    2c0e:	000e      	movs	r6, r1
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2c10:	4c0e      	ldr	r4, [pc, #56]	; (2c4c <_usb_device_lpm_suspend+0x40>)
    2c12:	2106      	movs	r1, #6
    2c14:	0020      	movs	r0, r4
    2c16:	4d0e      	ldr	r5, [pc, #56]	; (2c50 <_usb_device_lpm_suspend+0x44>)
    2c18:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2c1a:	2104      	movs	r1, #4
    2c1c:	0020      	movs	r0, r4
    2c1e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2c20:	2102      	movs	r1, #2
    2c22:	0020      	movs	r0, r4
    2c24:	4b0b      	ldr	r3, [pc, #44]	; (2c54 <_usb_device_lpm_suspend+0x48>)
    2c26:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2c28:	2002      	movs	r0, #2
    2c2a:	4b0b      	ldr	r3, [pc, #44]	; (2c58 <_usb_device_lpm_suspend+0x4c>)
    2c2c:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    2c2e:	6833      	ldr	r3, [r6, #0]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d104      	bne.n	2c3e <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    2c34:	4b09      	ldr	r3, [pc, #36]	; (2c5c <_usb_device_lpm_suspend+0x50>)
    2c36:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    2c38:	4b09      	ldr	r3, [pc, #36]	; (2c60 <_usb_device_lpm_suspend+0x54>)
    2c3a:	4798      	blx	r3
}
    2c3c:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    2c3e:	4b09      	ldr	r3, [pc, #36]	; (2c64 <_usb_device_lpm_suspend+0x58>)
    2c40:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    2c42:	6833      	ldr	r3, [r6, #0]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d1f7      	bne.n	2c38 <_usb_device_lpm_suspend+0x2c>
    2c48:	e7f4      	b.n	2c34 <_usb_device_lpm_suspend+0x28>
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	20000678 	.word	0x20000678
    2c50:	00003755 	.word	0x00003755
    2c54:	00003735 	.word	0x00003735
    2c58:	00002951 	.word	0x00002951
    2c5c:	00004851 	.word	0x00004851
    2c60:	00004845 	.word	0x00004845
    2c64:	0000485d 	.word	0x0000485d

00002c68 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2c68:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2c6a:	4b13      	ldr	r3, [pc, #76]	; (2cb8 <_usb_on_wakeup+0x50>)
    2c6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2c6e:	069b      	lsls	r3, r3, #26
    2c70:	d41c      	bmi.n	2cac <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2c72:	4911      	ldr	r1, [pc, #68]	; (2cb8 <_usb_on_wakeup+0x50>)
    2c74:	22d0      	movs	r2, #208	; 0xd0
    2c76:	68cb      	ldr	r3, [r1, #12]
    2c78:	4013      	ands	r3, r2
    2c7a:	2bd0      	cmp	r3, #208	; 0xd0
    2c7c:	d1fb      	bne.n	2c76 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2c7e:	4c0f      	ldr	r4, [pc, #60]	; (2cbc <_usb_on_wakeup+0x54>)
    2c80:	2102      	movs	r1, #2
    2c82:	0020      	movs	r0, r4
    2c84:	4b0e      	ldr	r3, [pc, #56]	; (2cc0 <_usb_on_wakeup+0x58>)
    2c86:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2c88:	2104      	movs	r1, #4
    2c8a:	0020      	movs	r0, r4
    2c8c:	4d0d      	ldr	r5, [pc, #52]	; (2cc4 <_usb_on_wakeup+0x5c>)
    2c8e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2c90:	4a0d      	ldr	r2, [pc, #52]	; (2cc8 <_usb_on_wakeup+0x60>)
    2c92:	2106      	movs	r1, #6
    2c94:	0020      	movs	r0, r4
    2c96:	4b0d      	ldr	r3, [pc, #52]	; (2ccc <_usb_on_wakeup+0x64>)
    2c98:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2c9a:	2106      	movs	r1, #6
    2c9c:	0020      	movs	r0, r4
    2c9e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2ca0:	2003      	movs	r0, #3
    2ca2:	4b0b      	ldr	r3, [pc, #44]	; (2cd0 <_usb_on_wakeup+0x68>)
    2ca4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    2ca6:	4b0b      	ldr	r3, [pc, #44]	; (2cd4 <_usb_on_wakeup+0x6c>)
    2ca8:	4798      	blx	r3
#endif
}
    2caa:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2cac:	4902      	ldr	r1, [pc, #8]	; (2cb8 <_usb_on_wakeup+0x50>)
    2cae:	2210      	movs	r2, #16
    2cb0:	68cb      	ldr	r3, [r1, #12]
    2cb2:	421a      	tst	r2, r3
    2cb4:	d0fc      	beq.n	2cb0 <_usb_on_wakeup+0x48>
    2cb6:	e7e2      	b.n	2c7e <_usb_on_wakeup+0x16>
    2cb8:	40000800 	.word	0x40000800
    2cbc:	20000678 	.word	0x20000678
    2cc0:	00003755 	.word	0x00003755
    2cc4:	00003735 	.word	0x00003735
    2cc8:	00002c0d 	.word	0x00002c0d
    2ccc:	00003711 	.word	0x00003711
    2cd0:	00002951 	.word	0x00002951
    2cd4:	0000480d 	.word	0x0000480d

00002cd8 <_usb_on_bus_reset>:
{
    2cd8:	b530      	push	{r4, r5, lr}
    2cda:	b083      	sub	sp, #12
    2cdc:	0004      	movs	r4, r0
	udc_reset();
    2cde:	4b1e      	ldr	r3, [pc, #120]	; (2d58 <_usb_on_bus_reset+0x80>)
    2ce0:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2ce2:	2380      	movs	r3, #128	; 0x80
    2ce4:	6822      	ldr	r2, [r4, #0]
    2ce6:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2ce8:	ad01      	add	r5, sp, #4
    2cea:	0028      	movs	r0, r5
    2cec:	4b1b      	ldr	r3, [pc, #108]	; (2d5c <_usb_on_bus_reset+0x84>)
    2cee:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2cf0:	2303      	movs	r3, #3
    2cf2:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2cf4:	0029      	movs	r1, r5
    2cf6:	0020      	movs	r0, r4
    2cf8:	4b19      	ldr	r3, [pc, #100]	; (2d60 <_usb_on_bus_reset+0x88>)
    2cfa:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2cfc:	4919      	ldr	r1, [pc, #100]	; (2d64 <_usb_on_bus_reset+0x8c>)
    2cfe:	0020      	movs	r0, r4
    2d00:	4b19      	ldr	r3, [pc, #100]	; (2d68 <_usb_on_bus_reset+0x90>)
    2d02:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2d04:	4b19      	ldr	r3, [pc, #100]	; (2d6c <_usb_on_bus_reset+0x94>)
    2d06:	2202      	movs	r2, #2
    2d08:	2100      	movs	r1, #0
    2d0a:	0020      	movs	r0, r4
    2d0c:	4d18      	ldr	r5, [pc, #96]	; (2d70 <_usb_on_bus_reset+0x98>)
    2d0e:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2d10:	4b18      	ldr	r3, [pc, #96]	; (2d74 <_usb_on_bus_reset+0x9c>)
    2d12:	2200      	movs	r2, #0
    2d14:	2100      	movs	r1, #0
    2d16:	0020      	movs	r0, r4
    2d18:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2d1a:	4b17      	ldr	r3, [pc, #92]	; (2d78 <_usb_on_bus_reset+0xa0>)
    2d1c:	2201      	movs	r2, #1
    2d1e:	2100      	movs	r1, #0
    2d20:	0020      	movs	r0, r4
    2d22:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2d24:	2202      	movs	r2, #2
    2d26:	2100      	movs	r1, #0
    2d28:	0020      	movs	r0, r4
    2d2a:	4d14      	ldr	r5, [pc, #80]	; (2d7c <_usb_on_bus_reset+0xa4>)
    2d2c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2d2e:	2200      	movs	r2, #0
    2d30:	2100      	movs	r1, #0
    2d32:	0020      	movs	r0, r4
    2d34:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2d36:	2201      	movs	r2, #1
    2d38:	2100      	movs	r1, #0
    2d3a:	0020      	movs	r0, r4
    2d3c:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2d3e:	6821      	ldr	r1, [r4, #0]
    2d40:	890b      	ldrh	r3, [r1, #8]
    2d42:	4a0f      	ldr	r2, [pc, #60]	; (2d80 <_usb_on_bus_reset+0xa8>)
    2d44:	401a      	ands	r2, r3
    2d46:	2380      	movs	r3, #128	; 0x80
    2d48:	00db      	lsls	r3, r3, #3
    2d4a:	4313      	orrs	r3, r2
    2d4c:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2d4e:	2200      	movs	r2, #0
    2d50:	4b0c      	ldr	r3, [pc, #48]	; (2d84 <_usb_on_bus_reset+0xac>)
    2d52:	701a      	strb	r2, [r3, #0]
}
    2d54:	b003      	add	sp, #12
    2d56:	bd30      	pop	{r4, r5, pc}
    2d58:	00001811 	.word	0x00001811
    2d5c:	00003961 	.word	0x00003961
    2d60:	00003971 	.word	0x00003971
    2d64:	200007f8 	.word	0x200007f8
    2d68:	00003d65 	.word	0x00003d65
    2d6c:	00002ec1 	.word	0x00002ec1
    2d70:	00003771 	.word	0x00003771
    2d74:	000031f1 	.word	0x000031f1
    2d78:	00002dc5 	.word	0x00002dc5
    2d7c:	000037c1 	.word	0x000037c1
    2d80:	fffff3ff 	.word	0xfffff3ff
    2d84:	20000356 	.word	0x20000356

00002d88 <udd_ctrl_send_zlp_in>:
{
    2d88:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2d8a:	2203      	movs	r2, #3
    2d8c:	4b07      	ldr	r3, [pc, #28]	; (2dac <udd_ctrl_send_zlp_in+0x24>)
    2d8e:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2d90:	4c07      	ldr	r4, [pc, #28]	; (2db0 <udd_ctrl_send_zlp_in+0x28>)
    2d92:	4908      	ldr	r1, [pc, #32]	; (2db4 <udd_ctrl_send_zlp_in+0x2c>)
    2d94:	0020      	movs	r0, r4
    2d96:	4b08      	ldr	r3, [pc, #32]	; (2db8 <udd_ctrl_send_zlp_in+0x30>)
    2d98:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2d9a:	4b08      	ldr	r3, [pc, #32]	; (2dbc <udd_ctrl_send_zlp_in+0x34>)
    2d9c:	689a      	ldr	r2, [r3, #8]
    2d9e:	2300      	movs	r3, #0
    2da0:	2100      	movs	r1, #0
    2da2:	0020      	movs	r0, r4
    2da4:	4c06      	ldr	r4, [pc, #24]	; (2dc0 <udd_ctrl_send_zlp_in+0x38>)
    2da6:	47a0      	blx	r4
}
    2da8:	bd10      	pop	{r4, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	20000356 	.word	0x20000356
    2db0:	20000678 	.word	0x20000678
    2db4:	200007f8 	.word	0x200007f8
    2db8:	00003d65 	.word	0x00003d65
    2dbc:	200007e0 	.word	0x200007e0
    2dc0:	00003cc1 	.word	0x00003cc1

00002dc4 <_usb_ep0_on_tansfer_fail>:
{
    2dc4:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2dc6:	7989      	ldrb	r1, [r1, #6]
    2dc8:	b24b      	sxtb	r3, r1
    2dca:	2b00      	cmp	r3, #0
    2dcc:	db06      	blt.n	2ddc <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2dce:	4b0e      	ldr	r3, [pc, #56]	; (2e08 <_usb_ep0_on_tansfer_fail+0x44>)
    2dd0:	781b      	ldrb	r3, [r3, #0]
    2dd2:	2b02      	cmp	r3, #2
    2dd4:	d00f      	beq.n	2df6 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2dd6:	2b03      	cmp	r3, #3
    2dd8:	d011      	beq.n	2dfe <_usb_ep0_on_tansfer_fail+0x3a>
}
    2dda:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2ddc:	4b0a      	ldr	r3, [pc, #40]	; (2e08 <_usb_ep0_on_tansfer_fail+0x44>)
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	2b01      	cmp	r3, #1
    2de2:	d005      	beq.n	2df0 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2de4:	2b04      	cmp	r3, #4
    2de6:	d1f8      	bne.n	2dda <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2de8:	4808      	ldr	r0, [pc, #32]	; (2e0c <_usb_ep0_on_tansfer_fail+0x48>)
    2dea:	4b09      	ldr	r3, [pc, #36]	; (2e10 <_usb_ep0_on_tansfer_fail+0x4c>)
    2dec:	4798      	blx	r3
    2dee:	e7f4      	b.n	2dda <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2df0:	4b08      	ldr	r3, [pc, #32]	; (2e14 <_usb_ep0_on_tansfer_fail+0x50>)
    2df2:	4798      	blx	r3
    2df4:	e7f1      	b.n	2dda <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2df6:	2204      	movs	r2, #4
    2df8:	4b03      	ldr	r3, [pc, #12]	; (2e08 <_usb_ep0_on_tansfer_fail+0x44>)
    2dfa:	701a      	strb	r2, [r3, #0]
    2dfc:	e7ed      	b.n	2dda <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2dfe:	4803      	ldr	r0, [pc, #12]	; (2e0c <_usb_ep0_on_tansfer_fail+0x48>)
    2e00:	4b03      	ldr	r3, [pc, #12]	; (2e10 <_usb_ep0_on_tansfer_fail+0x4c>)
    2e02:	4798      	blx	r3
}
    2e04:	e7e9      	b.n	2dda <_usb_ep0_on_tansfer_fail+0x16>
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	20000356 	.word	0x20000356
    2e0c:	20000678 	.word	0x20000678
    2e10:	00003c15 	.word	0x00003c15
    2e14:	00002d89 	.word	0x00002d89

00002e18 <udd_ctrl_in_sent>:
{
    2e18:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e1a:	4b20      	ldr	r3, [pc, #128]	; (2e9c <udd_ctrl_in_sent+0x84>)
    2e1c:	881b      	ldrh	r3, [r3, #0]
    2e1e:	4a20      	ldr	r2, [pc, #128]	; (2ea0 <udd_ctrl_in_sent+0x88>)
    2e20:	8994      	ldrh	r4, [r2, #12]
    2e22:	1ae4      	subs	r4, r4, r3
    2e24:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2e26:	2c00      	cmp	r4, #0
    2e28:	d118      	bne.n	2e5c <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2e2a:	4a1e      	ldr	r2, [pc, #120]	; (2ea4 <udd_ctrl_in_sent+0x8c>)
    2e2c:	8811      	ldrh	r1, [r2, #0]
    2e2e:	185b      	adds	r3, r3, r1
    2e30:	b29b      	uxth	r3, r3
    2e32:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2e34:	4a1a      	ldr	r2, [pc, #104]	; (2ea0 <udd_ctrl_in_sent+0x88>)
    2e36:	88d2      	ldrh	r2, [r2, #6]
    2e38:	429a      	cmp	r2, r3
    2e3a:	d023      	beq.n	2e84 <udd_ctrl_in_sent+0x6c>
    2e3c:	4b1a      	ldr	r3, [pc, #104]	; (2ea8 <udd_ctrl_in_sent+0x90>)
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d11f      	bne.n	2e84 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2e44:	4b16      	ldr	r3, [pc, #88]	; (2ea0 <udd_ctrl_in_sent+0x88>)
    2e46:	695b      	ldr	r3, [r3, #20]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d023      	beq.n	2e94 <udd_ctrl_in_sent+0x7c>
    2e4c:	4798      	blx	r3
    2e4e:	2800      	cmp	r0, #0
    2e50:	d020      	beq.n	2e94 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2e52:	2200      	movs	r2, #0
    2e54:	4b11      	ldr	r3, [pc, #68]	; (2e9c <udd_ctrl_in_sent+0x84>)
    2e56:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2e58:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <udd_ctrl_in_sent+0x88>)
    2e5a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2e5c:	2c3f      	cmp	r4, #63	; 0x3f
    2e5e:	d919      	bls.n	2e94 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2e60:	2200      	movs	r2, #0
    2e62:	4b11      	ldr	r3, [pc, #68]	; (2ea8 <udd_ctrl_in_sent+0x90>)
    2e64:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2e66:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2e68:	4d0c      	ldr	r5, [pc, #48]	; (2e9c <udd_ctrl_in_sent+0x84>)
    2e6a:	882b      	ldrh	r3, [r5, #0]
    2e6c:	4a0c      	ldr	r2, [pc, #48]	; (2ea0 <udd_ctrl_in_sent+0x88>)
    2e6e:	6892      	ldr	r2, [r2, #8]
    2e70:	18d2      	adds	r2, r2, r3
    2e72:	0023      	movs	r3, r4
    2e74:	2100      	movs	r1, #0
    2e76:	480d      	ldr	r0, [pc, #52]	; (2eac <udd_ctrl_in_sent+0x94>)
    2e78:	4e0d      	ldr	r6, [pc, #52]	; (2eb0 <udd_ctrl_in_sent+0x98>)
    2e7a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2e7c:	882b      	ldrh	r3, [r5, #0]
    2e7e:	18e4      	adds	r4, r4, r3
    2e80:	802c      	strh	r4, [r5, #0]
}
    2e82:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2e84:	2204      	movs	r2, #4
    2e86:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <udd_ctrl_in_sent+0x9c>)
    2e88:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2e8a:	490b      	ldr	r1, [pc, #44]	; (2eb8 <udd_ctrl_in_sent+0xa0>)
    2e8c:	4807      	ldr	r0, [pc, #28]	; (2eac <udd_ctrl_in_sent+0x94>)
    2e8e:	4b0b      	ldr	r3, [pc, #44]	; (2ebc <udd_ctrl_in_sent+0xa4>)
    2e90:	4798      	blx	r3
			return;
    2e92:	e7f6      	b.n	2e82 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2e94:	2201      	movs	r2, #1
    2e96:	4b04      	ldr	r3, [pc, #16]	; (2ea8 <udd_ctrl_in_sent+0x90>)
    2e98:	701a      	strb	r2, [r3, #0]
    2e9a:	e7e5      	b.n	2e68 <udd_ctrl_in_sent+0x50>
    2e9c:	20000352 	.word	0x20000352
    2ea0:	200007e0 	.word	0x200007e0
    2ea4:	20000354 	.word	0x20000354
    2ea8:	20000350 	.word	0x20000350
    2eac:	20000678 	.word	0x20000678
    2eb0:	00003cc1 	.word	0x00003cc1
    2eb4:	20000356 	.word	0x20000356
    2eb8:	200007f8 	.word	0x200007f8
    2ebc:	00003d65 	.word	0x00003d65

00002ec0 <_usb_ep0_on_setup>:
{
    2ec0:	b510      	push	{r4, lr}
    2ec2:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2ec4:	4b2c      	ldr	r3, [pc, #176]	; (2f78 <_usb_ep0_on_setup+0xb8>)
    2ec6:	781b      	ldrb	r3, [r3, #0]
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d007      	beq.n	2edc <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2ecc:	4b2b      	ldr	r3, [pc, #172]	; (2f7c <_usb_ep0_on_setup+0xbc>)
    2ece:	691b      	ldr	r3, [r3, #16]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d000      	beq.n	2ed6 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2ed4:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2ed6:	2200      	movs	r2, #0
    2ed8:	4b27      	ldr	r3, [pc, #156]	; (2f78 <_usb_ep0_on_setup+0xb8>)
    2eda:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2edc:	8823      	ldrh	r3, [r4, #0]
    2ede:	2b08      	cmp	r3, #8
    2ee0:	d002      	beq.n	2ee8 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2ee2:	4b27      	ldr	r3, [pc, #156]	; (2f80 <_usb_ep0_on_setup+0xc0>)
    2ee4:	4798      	blx	r3
}
    2ee6:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2ee8:	4a24      	ldr	r2, [pc, #144]	; (2f7c <_usb_ep0_on_setup+0xbc>)
    2eea:	4b26      	ldr	r3, [pc, #152]	; (2f84 <_usb_ep0_on_setup+0xc4>)
    2eec:	7819      	ldrb	r1, [r3, #0]
    2eee:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2ef0:	7859      	ldrb	r1, [r3, #1]
    2ef2:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2ef4:	78d8      	ldrb	r0, [r3, #3]
    2ef6:	0200      	lsls	r0, r0, #8
    2ef8:	7899      	ldrb	r1, [r3, #2]
    2efa:	1809      	adds	r1, r1, r0
    2efc:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2efe:	7958      	ldrb	r0, [r3, #5]
    2f00:	0200      	lsls	r0, r0, #8
    2f02:	7919      	ldrb	r1, [r3, #4]
    2f04:	1809      	adds	r1, r1, r0
    2f06:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2f08:	79d9      	ldrb	r1, [r3, #7]
    2f0a:	0209      	lsls	r1, r1, #8
    2f0c:	799b      	ldrb	r3, [r3, #6]
    2f0e:	185b      	adds	r3, r3, r1
    2f10:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2f12:	4b1d      	ldr	r3, [pc, #116]	; (2f88 <_usb_ep0_on_setup+0xc8>)
    2f14:	4798      	blx	r3
    2f16:	2800      	cmp	r0, #0
    2f18:	d016      	beq.n	2f48 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2f1a:	4b18      	ldr	r3, [pc, #96]	; (2f7c <_usb_ep0_on_setup+0xbc>)
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	2b7f      	cmp	r3, #127	; 0x7f
    2f20:	d815      	bhi.n	2f4e <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2f22:	4b16      	ldr	r3, [pc, #88]	; (2f7c <_usb_ep0_on_setup+0xbc>)
    2f24:	88db      	ldrh	r3, [r3, #6]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d022      	beq.n	2f70 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2f2a:	2300      	movs	r3, #0
    2f2c:	4a17      	ldr	r2, [pc, #92]	; (2f8c <_usb_ep0_on_setup+0xcc>)
    2f2e:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2f30:	4a17      	ldr	r2, [pc, #92]	; (2f90 <_usb_ep0_on_setup+0xd0>)
    2f32:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2f34:	2201      	movs	r2, #1
    2f36:	4b10      	ldr	r3, [pc, #64]	; (2f78 <_usb_ep0_on_setup+0xb8>)
    2f38:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2f3a:	2340      	movs	r3, #64	; 0x40
    2f3c:	4a11      	ldr	r2, [pc, #68]	; (2f84 <_usb_ep0_on_setup+0xc4>)
    2f3e:	2100      	movs	r1, #0
    2f40:	4814      	ldr	r0, [pc, #80]	; (2f94 <_usb_ep0_on_setup+0xd4>)
    2f42:	4c15      	ldr	r4, [pc, #84]	; (2f98 <_usb_ep0_on_setup+0xd8>)
    2f44:	47a0      	blx	r4
    2f46:	e7ce      	b.n	2ee6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2f48:	4b0d      	ldr	r3, [pc, #52]	; (2f80 <_usb_ep0_on_setup+0xc0>)
    2f4a:	4798      	blx	r3
			return;
    2f4c:	e7cb      	b.n	2ee6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2f4e:	2300      	movs	r3, #0
    2f50:	4a0e      	ldr	r2, [pc, #56]	; (2f8c <_usb_ep0_on_setup+0xcc>)
    2f52:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2f54:	4a0e      	ldr	r2, [pc, #56]	; (2f90 <_usb_ep0_on_setup+0xd0>)
    2f56:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2f58:	2202      	movs	r2, #2
    2f5a:	4b07      	ldr	r3, [pc, #28]	; (2f78 <_usb_ep0_on_setup+0xb8>)
    2f5c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2f5e:	2340      	movs	r3, #64	; 0x40
    2f60:	4a08      	ldr	r2, [pc, #32]	; (2f84 <_usb_ep0_on_setup+0xc4>)
    2f62:	2100      	movs	r1, #0
    2f64:	480b      	ldr	r0, [pc, #44]	; (2f94 <_usb_ep0_on_setup+0xd4>)
    2f66:	4c0c      	ldr	r4, [pc, #48]	; (2f98 <_usb_ep0_on_setup+0xd8>)
    2f68:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2f6a:	4b0c      	ldr	r3, [pc, #48]	; (2f9c <_usb_ep0_on_setup+0xdc>)
    2f6c:	4798      	blx	r3
    2f6e:	e7ba      	b.n	2ee6 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2f70:	4b0b      	ldr	r3, [pc, #44]	; (2fa0 <_usb_ep0_on_setup+0xe0>)
    2f72:	4798      	blx	r3
				return;
    2f74:	e7b7      	b.n	2ee6 <_usb_ep0_on_setup+0x26>
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	20000356 	.word	0x20000356
    2f7c:	200007e0 	.word	0x200007e0
    2f80:	00002be1 	.word	0x00002be1
    2f84:	200007f8 	.word	0x200007f8
    2f88:	000018a1 	.word	0x000018a1
    2f8c:	20000354 	.word	0x20000354
    2f90:	20000352 	.word	0x20000352
    2f94:	20000678 	.word	0x20000678
    2f98:	00003d15 	.word	0x00003d15
    2f9c:	00002e19 	.word	0x00002e19
    2fa0:	00002d89 	.word	0x00002d89

00002fa4 <_usb_on_sof_notify>:
{
    2fa4:	b510      	push	{r4, lr}
	udc_sof_notify();
    2fa6:	4b02      	ldr	r3, [pc, #8]	; (2fb0 <_usb_on_sof_notify+0xc>)
    2fa8:	4798      	blx	r3
	UDC_SOF_EVENT();
    2faa:	4b02      	ldr	r3, [pc, #8]	; (2fb4 <_usb_on_sof_notify+0x10>)
    2fac:	4798      	blx	r3
}
    2fae:	bd10      	pop	{r4, pc}
    2fb0:	0000185d 	.word	0x0000185d
    2fb4:	00004819 	.word	0x00004819

00002fb8 <_usb_on_suspend>:
{
    2fb8:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2fba:	4c07      	ldr	r4, [pc, #28]	; (2fd8 <_usb_on_suspend+0x20>)
    2fbc:	2104      	movs	r1, #4
    2fbe:	0020      	movs	r0, r4
    2fc0:	4b06      	ldr	r3, [pc, #24]	; (2fdc <_usb_on_suspend+0x24>)
    2fc2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2fc4:	2102      	movs	r1, #2
    2fc6:	0020      	movs	r0, r4
    2fc8:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <_usb_on_suspend+0x28>)
    2fca:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2fcc:	2001      	movs	r0, #1
    2fce:	4b05      	ldr	r3, [pc, #20]	; (2fe4 <_usb_on_suspend+0x2c>)
    2fd0:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2fd2:	4b05      	ldr	r3, [pc, #20]	; (2fe8 <_usb_on_suspend+0x30>)
    2fd4:	4798      	blx	r3
}
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	20000678 	.word	0x20000678
    2fdc:	00003755 	.word	0x00003755
    2fe0:	00003735 	.word	0x00003735
    2fe4:	00002951 	.word	0x00002951
    2fe8:	00004801 	.word	0x00004801

00002fec <udd_ep_abort>:
{
    2fec:	b510      	push	{r4, lr}
    2fee:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2ff0:	0001      	movs	r1, r0
    2ff2:	480a      	ldr	r0, [pc, #40]	; (301c <udd_ep_abort+0x30>)
    2ff4:	4b0a      	ldr	r3, [pc, #40]	; (3020 <udd_ep_abort+0x34>)
    2ff6:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2ff8:	0020      	movs	r0, r4
    2ffa:	4b0a      	ldr	r3, [pc, #40]	; (3024 <udd_ep_abort+0x38>)
    2ffc:	4798      	blx	r3
	if (!ptr_job->busy) {
    2ffe:	7c83      	ldrb	r3, [r0, #18]
    3000:	07db      	lsls	r3, r3, #31
    3002:	d50a      	bpl.n	301a <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    3004:	7c83      	ldrb	r3, [r0, #18]
    3006:	2201      	movs	r2, #1
    3008:	4393      	bics	r3, r2
    300a:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    300c:	6803      	ldr	r3, [r0, #0]
    300e:	2b00      	cmp	r3, #0
    3010:	d003      	beq.n	301a <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    3012:	68c1      	ldr	r1, [r0, #12]
    3014:	0022      	movs	r2, r4
    3016:	2001      	movs	r0, #1
    3018:	4798      	blx	r3
}
    301a:	bd10      	pop	{r4, pc}
    301c:	20000678 	.word	0x20000678
    3020:	00003bb5 	.word	0x00003bb5
    3024:	00002a11 	.word	0x00002a11

00003028 <udd_is_high_speed>:
}
    3028:	2000      	movs	r0, #0
    302a:	4770      	bx	lr

0000302c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    302c:	4b02      	ldr	r3, [pc, #8]	; (3038 <udd_get_frame_number+0xc>)
    302e:	681b      	ldr	r3, [r3, #0]
    3030:	8a18      	ldrh	r0, [r3, #16]
    3032:	0480      	lsls	r0, r0, #18
    3034:	0d40      	lsrs	r0, r0, #21
}
    3036:	4770      	bx	lr
    3038:	20000678 	.word	0x20000678

0000303c <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    303c:	4b02      	ldr	r3, [pc, #8]	; (3048 <udd_get_micro_frame_number+0xc>)
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	8a18      	ldrh	r0, [r3, #16]
    3042:	b280      	uxth	r0, r0
}
    3044:	4770      	bx	lr
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	20000678 	.word	0x20000678

0000304c <udd_ep_free>:
{
    304c:	b570      	push	{r4, r5, r6, lr}
    304e:	b082      	sub	sp, #8
    3050:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3052:	ad01      	add	r5, sp, #4
    3054:	0028      	movs	r0, r5
    3056:	4b0d      	ldr	r3, [pc, #52]	; (308c <udd_ep_free+0x40>)
    3058:	4798      	blx	r3
	udd_ep_abort(ep);
    305a:	0020      	movs	r0, r4
    305c:	4b0c      	ldr	r3, [pc, #48]	; (3090 <udd_ep_free+0x44>)
    305e:	4798      	blx	r3
	config_ep.ep_address = ep;
    3060:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3062:	2300      	movs	r3, #0
    3064:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3066:	4e0b      	ldr	r6, [pc, #44]	; (3094 <udd_ep_free+0x48>)
    3068:	0029      	movs	r1, r5
    306a:	0030      	movs	r0, r6
    306c:	4b0a      	ldr	r3, [pc, #40]	; (3098 <udd_ep_free+0x4c>)
    306e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3070:	210f      	movs	r1, #15
    3072:	4021      	ands	r1, r4
    3074:	2200      	movs	r2, #0
    3076:	0030      	movs	r0, r6
    3078:	4b08      	ldr	r3, [pc, #32]	; (309c <udd_ep_free+0x50>)
    307a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    307c:	2200      	movs	r2, #0
    307e:	0021      	movs	r1, r4
    3080:	0030      	movs	r0, r6
    3082:	4b07      	ldr	r3, [pc, #28]	; (30a0 <udd_ep_free+0x54>)
    3084:	4798      	blx	r3
}
    3086:	b002      	add	sp, #8
    3088:	bd70      	pop	{r4, r5, r6, pc}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	00003961 	.word	0x00003961
    3090:	00002fed 	.word	0x00002fed
    3094:	20000678 	.word	0x20000678
    3098:	00003971 	.word	0x00003971
    309c:	00003799 	.word	0x00003799
    30a0:	00003891 	.word	0x00003891

000030a4 <udd_ep_alloc>:
{
    30a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a6:	b083      	sub	sp, #12
    30a8:	0005      	movs	r5, r0
    30aa:	000f      	movs	r7, r1
    30ac:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    30ae:	ae01      	add	r6, sp, #4
    30b0:	0030      	movs	r0, r6
    30b2:	4b36      	ldr	r3, [pc, #216]	; (318c <udd_ep_alloc+0xe8>)
    30b4:	4798      	blx	r3
	config_ep.ep_address = ep;
    30b6:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    30b8:	2c08      	cmp	r4, #8
    30ba:	d813      	bhi.n	30e4 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    30bc:	2200      	movs	r2, #0
    30be:	ab01      	add	r3, sp, #4
    30c0:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    30c2:	0028      	movs	r0, r5
    30c4:	4b32      	ldr	r3, [pc, #200]	; (3190 <udd_ep_alloc+0xec>)
    30c6:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    30c8:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    30ca:	2103      	movs	r1, #3
    30cc:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    30ce:	2901      	cmp	r1, #1
    30d0:	d038      	beq.n	3144 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    30d2:	2902      	cmp	r1, #2
    30d4:	d043      	beq.n	315e <udd_ep_alloc+0xba>
		return false;
    30d6:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    30d8:	2903      	cmp	r1, #3
    30da:	d13d      	bne.n	3158 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    30dc:	2204      	movs	r2, #4
    30de:	ab01      	add	r3, sp, #4
    30e0:	70da      	strb	r2, [r3, #3]
    30e2:	e032      	b.n	314a <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    30e4:	2c10      	cmp	r4, #16
    30e6:	d803      	bhi.n	30f0 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    30e8:	2201      	movs	r2, #1
    30ea:	ab01      	add	r3, sp, #4
    30ec:	705a      	strb	r2, [r3, #1]
    30ee:	e7e8      	b.n	30c2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    30f0:	2c20      	cmp	r4, #32
    30f2:	d803      	bhi.n	30fc <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    30f4:	2202      	movs	r2, #2
    30f6:	ab01      	add	r3, sp, #4
    30f8:	705a      	strb	r2, [r3, #1]
    30fa:	e7e2      	b.n	30c2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    30fc:	2c40      	cmp	r4, #64	; 0x40
    30fe:	d803      	bhi.n	3108 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    3100:	2203      	movs	r2, #3
    3102:	ab01      	add	r3, sp, #4
    3104:	705a      	strb	r2, [r3, #1]
    3106:	e7dc      	b.n	30c2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    3108:	2c80      	cmp	r4, #128	; 0x80
    310a:	d803      	bhi.n	3114 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    310c:	2204      	movs	r2, #4
    310e:	ab01      	add	r3, sp, #4
    3110:	705a      	strb	r2, [r3, #1]
    3112:	e7d6      	b.n	30c2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3114:	2380      	movs	r3, #128	; 0x80
    3116:	005b      	lsls	r3, r3, #1
    3118:	429c      	cmp	r4, r3
    311a:	d803      	bhi.n	3124 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    311c:	2205      	movs	r2, #5
    311e:	ab01      	add	r3, sp, #4
    3120:	705a      	strb	r2, [r3, #1]
    3122:	e7ce      	b.n	30c2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3124:	2380      	movs	r3, #128	; 0x80
    3126:	009b      	lsls	r3, r3, #2
    3128:	429c      	cmp	r4, r3
    312a:	d803      	bhi.n	3134 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    312c:	2206      	movs	r2, #6
    312e:	ab01      	add	r3, sp, #4
    3130:	705a      	strb	r2, [r3, #1]
    3132:	e7c6      	b.n	30c2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3134:	4a17      	ldr	r2, [pc, #92]	; (3194 <udd_ep_alloc+0xf0>)
		return false;
    3136:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    3138:	4294      	cmp	r4, r2
    313a:	d80d      	bhi.n	3158 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    313c:	2207      	movs	r2, #7
    313e:	ab01      	add	r3, sp, #4
    3140:	705a      	strb	r2, [r3, #1]
    3142:	e7be      	b.n	30c2 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3144:	2202      	movs	r2, #2
    3146:	ab01      	add	r3, sp, #4
    3148:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    314a:	a901      	add	r1, sp, #4
    314c:	4812      	ldr	r0, [pc, #72]	; (3198 <udd_ep_alloc+0xf4>)
    314e:	4b13      	ldr	r3, [pc, #76]	; (319c <udd_ep_alloc+0xf8>)
    3150:	4798      	blx	r3
		return false;
    3152:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3154:	2800      	cmp	r0, #0
    3156:	d006      	beq.n	3166 <udd_ep_alloc+0xc2>
}
    3158:	0018      	movs	r0, r3
    315a:	b003      	add	sp, #12
    315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    315e:	2203      	movs	r2, #3
    3160:	ab01      	add	r3, sp, #4
    3162:	70da      	strb	r2, [r3, #3]
    3164:	e7f1      	b.n	314a <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3166:	210f      	movs	r1, #15
    3168:	4029      	ands	r1, r5
    316a:	4c0b      	ldr	r4, [pc, #44]	; (3198 <udd_ep_alloc+0xf4>)
    316c:	4b0c      	ldr	r3, [pc, #48]	; (31a0 <udd_ep_alloc+0xfc>)
    316e:	2200      	movs	r2, #0
    3170:	0020      	movs	r0, r4
    3172:	4e0c      	ldr	r6, [pc, #48]	; (31a4 <udd_ep_alloc+0x100>)
    3174:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3176:	2200      	movs	r2, #0
    3178:	0029      	movs	r1, r5
    317a:	0020      	movs	r0, r4
    317c:	4e0a      	ldr	r6, [pc, #40]	; (31a8 <udd_ep_alloc+0x104>)
    317e:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3180:	2201      	movs	r2, #1
    3182:	0029      	movs	r1, r5
    3184:	0020      	movs	r0, r4
    3186:	47b0      	blx	r6
	return true;
    3188:	2301      	movs	r3, #1
    318a:	e7e5      	b.n	3158 <udd_ep_alloc+0xb4>
    318c:	00003961 	.word	0x00003961
    3190:	00002a11 	.word	0x00002a11
    3194:	000003ff 	.word	0x000003ff
    3198:	20000678 	.word	0x20000678
    319c:	00003971 	.word	0x00003971
    31a0:	00002a2d 	.word	0x00002a2d
    31a4:	00003771 	.word	0x00003771
    31a8:	000037c1 	.word	0x000037c1

000031ac <udd_ep_is_halted>:
{
    31ac:	b510      	push	{r4, lr}
    31ae:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    31b0:	4801      	ldr	r0, [pc, #4]	; (31b8 <udd_ep_is_halted+0xc>)
    31b2:	4b02      	ldr	r3, [pc, #8]	; (31bc <udd_ep_is_halted+0x10>)
    31b4:	4798      	blx	r3
}
    31b6:	bd10      	pop	{r4, pc}
    31b8:	20000678 	.word	0x20000678
    31bc:	00003beb 	.word	0x00003beb

000031c0 <udd_ep_set_halt>:
{
    31c0:	b510      	push	{r4, lr}
    31c2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    31c4:	230f      	movs	r3, #15
    31c6:	4003      	ands	r3, r0
		return false;
    31c8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    31ca:	2b03      	cmp	r3, #3
    31cc:	d900      	bls.n	31d0 <udd_ep_set_halt+0x10>
}
    31ce:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    31d0:	0021      	movs	r1, r4
    31d2:	4804      	ldr	r0, [pc, #16]	; (31e4 <udd_ep_set_halt+0x24>)
    31d4:	4b04      	ldr	r3, [pc, #16]	; (31e8 <udd_ep_set_halt+0x28>)
    31d6:	4798      	blx	r3
	udd_ep_abort(ep);
    31d8:	0020      	movs	r0, r4
    31da:	4b04      	ldr	r3, [pc, #16]	; (31ec <udd_ep_set_halt+0x2c>)
    31dc:	4798      	blx	r3
	return true;
    31de:	2001      	movs	r0, #1
    31e0:	e7f5      	b.n	31ce <udd_ep_set_halt+0xe>
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	20000678 	.word	0x20000678
    31e8:	00003c15 	.word	0x00003c15
    31ec:	00002fed 	.word	0x00002fed

000031f0 <_usb_ep0_on_tansfer_ok>:
{
    31f0:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    31f2:	4b34      	ldr	r3, [pc, #208]	; (32c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2b01      	cmp	r3, #1
    31f8:	d00a      	beq.n	3210 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    31fa:	2b02      	cmp	r3, #2
    31fc:	d05f      	beq.n	32be <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    31fe:	4b32      	ldr	r3, [pc, #200]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3200:	691b      	ldr	r3, [r3, #16]
    3202:	2b00      	cmp	r3, #0
    3204:	d000      	beq.n	3208 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    3206:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3208:	2200      	movs	r2, #0
    320a:	4b2e      	ldr	r3, [pc, #184]	; (32c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    320c:	701a      	strb	r2, [r3, #0]
}
    320e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3210:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3212:	4b2d      	ldr	r3, [pc, #180]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3214:	899b      	ldrh	r3, [r3, #12]
    3216:	4a2d      	ldr	r2, [pc, #180]	; (32cc <_usb_ep0_on_tansfer_ok+0xdc>)
    3218:	8814      	ldrh	r4, [r2, #0]
    321a:	1962      	adds	r2, r4, r5
    321c:	4293      	cmp	r3, r2
    321e:	da01      	bge.n	3224 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3220:	1b1d      	subs	r5, r3, r4
    3222:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3224:	4b28      	ldr	r3, [pc, #160]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3226:	6898      	ldr	r0, [r3, #8]
    3228:	1900      	adds	r0, r0, r4
    322a:	002a      	movs	r2, r5
    322c:	4928      	ldr	r1, [pc, #160]	; (32d0 <_usb_ep0_on_tansfer_ok+0xe0>)
    322e:	4b29      	ldr	r3, [pc, #164]	; (32d4 <_usb_ep0_on_tansfer_ok+0xe4>)
    3230:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3232:	1964      	adds	r4, r4, r5
    3234:	b2a4      	uxth	r4, r4
    3236:	4b25      	ldr	r3, [pc, #148]	; (32cc <_usb_ep0_on_tansfer_ok+0xdc>)
    3238:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    323a:	2d40      	cmp	r5, #64	; 0x40
    323c:	d00a      	beq.n	3254 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    323e:	4b22      	ldr	r3, [pc, #136]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3240:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3242:	695b      	ldr	r3, [r3, #20]
    3244:	2b00      	cmp	r3, #0
    3246:	d002      	beq.n	324e <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3248:	4798      	blx	r3
    324a:	2800      	cmp	r0, #0
    324c:	d014      	beq.n	3278 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    324e:	4b22      	ldr	r3, [pc, #136]	; (32d8 <_usb_ep0_on_tansfer_ok+0xe8>)
    3250:	4798      	blx	r3
    3252:	e7dc      	b.n	320e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3254:	4b1c      	ldr	r3, [pc, #112]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3256:	88da      	ldrh	r2, [r3, #6]
    3258:	4b20      	ldr	r3, [pc, #128]	; (32dc <_usb_ep0_on_tansfer_ok+0xec>)
    325a:	881b      	ldrh	r3, [r3, #0]
    325c:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    325e:	429a      	cmp	r2, r3
    3260:	dded      	ble.n	323e <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3262:	4b19      	ldr	r3, [pc, #100]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3264:	899b      	ldrh	r3, [r3, #12]
    3266:	42a3      	cmp	r3, r4
    3268:	d00c      	beq.n	3284 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    326a:	2340      	movs	r3, #64	; 0x40
    326c:	4a18      	ldr	r2, [pc, #96]	; (32d0 <_usb_ep0_on_tansfer_ok+0xe0>)
    326e:	2100      	movs	r1, #0
    3270:	481b      	ldr	r0, [pc, #108]	; (32e0 <_usb_ep0_on_tansfer_ok+0xf0>)
    3272:	4c1c      	ldr	r4, [pc, #112]	; (32e4 <_usb_ep0_on_tansfer_ok+0xf4>)
    3274:	47a0      	blx	r4
    3276:	e7ca      	b.n	320e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3278:	2205      	movs	r2, #5
    327a:	4b12      	ldr	r3, [pc, #72]	; (32c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    327c:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    327e:	4b1a      	ldr	r3, [pc, #104]	; (32e8 <_usb_ep0_on_tansfer_ok+0xf8>)
    3280:	4798      	blx	r3
    3282:	e7c4      	b.n	320e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3284:	4b10      	ldr	r3, [pc, #64]	; (32c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3286:	695b      	ldr	r3, [r3, #20]
    3288:	2b00      	cmp	r3, #0
    328a:	d00b      	beq.n	32a4 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    328c:	4798      	blx	r3
    328e:	2800      	cmp	r0, #0
    3290:	d00f      	beq.n	32b2 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3292:	4912      	ldr	r1, [pc, #72]	; (32dc <_usb_ep0_on_tansfer_ok+0xec>)
    3294:	4a0d      	ldr	r2, [pc, #52]	; (32cc <_usb_ep0_on_tansfer_ok+0xdc>)
    3296:	880b      	ldrh	r3, [r1, #0]
    3298:	8810      	ldrh	r0, [r2, #0]
    329a:	181b      	adds	r3, r3, r0
    329c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    329e:	2300      	movs	r3, #0
    32a0:	8013      	strh	r3, [r2, #0]
    32a2:	e7e2      	b.n	326a <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    32a4:	2205      	movs	r2, #5
    32a6:	4b07      	ldr	r3, [pc, #28]	; (32c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    32a8:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    32aa:	2000      	movs	r0, #0
    32ac:	4b0e      	ldr	r3, [pc, #56]	; (32e8 <_usb_ep0_on_tansfer_ok+0xf8>)
    32ae:	4798      	blx	r3
    32b0:	e7ad      	b.n	320e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    32b2:	2205      	movs	r2, #5
    32b4:	4b03      	ldr	r3, [pc, #12]	; (32c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    32b6:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    32b8:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <_usb_ep0_on_tansfer_ok+0xf8>)
    32ba:	4798      	blx	r3
    32bc:	e7a7      	b.n	320e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    32be:	4b0b      	ldr	r3, [pc, #44]	; (32ec <_usb_ep0_on_tansfer_ok+0xfc>)
    32c0:	4798      	blx	r3
    32c2:	e7a4      	b.n	320e <_usb_ep0_on_tansfer_ok+0x1e>
    32c4:	20000356 	.word	0x20000356
    32c8:	200007e0 	.word	0x200007e0
    32cc:	20000352 	.word	0x20000352
    32d0:	200007f8 	.word	0x200007f8
    32d4:	000064cd 	.word	0x000064cd
    32d8:	00002d89 	.word	0x00002d89
    32dc:	20000354 	.word	0x20000354
    32e0:	20000678 	.word	0x20000678
    32e4:	00003d15 	.word	0x00003d15
    32e8:	000031c1 	.word	0x000031c1
    32ec:	00002e19 	.word	0x00002e19

000032f0 <udd_ep_clear_halt>:
{
    32f0:	b570      	push	{r4, r5, r6, lr}
    32f2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    32f4:	230f      	movs	r3, #15
    32f6:	4003      	ands	r3, r0
		return false;
    32f8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    32fa:	2b03      	cmp	r3, #3
    32fc:	d900      	bls.n	3300 <udd_ep_clear_halt+0x10>
}
    32fe:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3300:	0020      	movs	r0, r4
    3302:	4b09      	ldr	r3, [pc, #36]	; (3328 <udd_ep_clear_halt+0x38>)
    3304:	4798      	blx	r3
    3306:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3308:	0021      	movs	r1, r4
    330a:	4808      	ldr	r0, [pc, #32]	; (332c <udd_ep_clear_halt+0x3c>)
    330c:	4b08      	ldr	r3, [pc, #32]	; (3330 <udd_ep_clear_halt+0x40>)
    330e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3310:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3312:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3314:	07db      	lsls	r3, r3, #31
    3316:	d5f2      	bpl.n	32fe <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3318:	7cab      	ldrb	r3, [r5, #18]
    331a:	2201      	movs	r2, #1
    331c:	4393      	bics	r3, r2
    331e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3320:	682b      	ldr	r3, [r5, #0]
    3322:	4798      	blx	r3
	return true;
    3324:	2001      	movs	r0, #1
    3326:	e7ea      	b.n	32fe <udd_ep_clear_halt+0xe>
    3328:	00002a11 	.word	0x00002a11
    332c:	20000678 	.word	0x20000678
    3330:	00003c3b 	.word	0x00003c3b

00003334 <udd_ep_run>:
{
    3334:	b5f0      	push	{r4, r5, r6, r7, lr}
    3336:	b087      	sub	sp, #28
    3338:	0005      	movs	r5, r0
    333a:	9103      	str	r1, [sp, #12]
    333c:	9202      	str	r2, [sp, #8]
    333e:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3340:	260f      	movs	r6, #15
    3342:	4006      	ands	r6, r0
		return false;
    3344:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3346:	2e03      	cmp	r6, #3
    3348:	d902      	bls.n	3350 <udd_ep_run+0x1c>
}
    334a:	0020      	movs	r0, r4
    334c:	b007      	add	sp, #28
    334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3350:	4b64      	ldr	r3, [pc, #400]	; (34e4 <udd_ep_run+0x1b0>)
    3352:	4798      	blx	r3
    3354:	1e04      	subs	r4, r0, #0
    3356:	d000      	beq.n	335a <udd_ep_run+0x26>
    3358:	e0bd      	b.n	34d6 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    335a:	0028      	movs	r0, r5
    335c:	4b62      	ldr	r3, [pc, #392]	; (34e8 <udd_ep_run+0x1b4>)
    335e:	4798      	blx	r3
    3360:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3362:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3366:	425a      	negs	r2, r3
    3368:	4153      	adcs	r3, r2
    336a:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    336c:	b672      	cpsid	i
    336e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3372:	2200      	movs	r2, #0
    3374:	4b5d      	ldr	r3, [pc, #372]	; (34ec <udd_ep_run+0x1b8>)
    3376:	701a      	strb	r2, [r3, #0]
	return flags;
    3378:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    337a:	7c83      	ldrb	r3, [r0, #18]
    337c:	07db      	lsls	r3, r3, #31
    337e:	d508      	bpl.n	3392 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3380:	2a00      	cmp	r2, #0
    3382:	d0e2      	beq.n	334a <udd_ep_run+0x16>
		cpu_irq_enable();
    3384:	2201      	movs	r2, #1
    3386:	4b59      	ldr	r3, [pc, #356]	; (34ec <udd_ep_run+0x1b8>)
    3388:	701a      	strb	r2, [r3, #0]
    338a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    338e:	b662      	cpsie	i
    3390:	e7db      	b.n	334a <udd_ep_run+0x16>
	ptr_job->busy = true;
    3392:	7c83      	ldrb	r3, [r0, #18]
    3394:	2101      	movs	r1, #1
    3396:	430b      	orrs	r3, r1
    3398:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    339a:	2a00      	cmp	r2, #0
    339c:	d005      	beq.n	33aa <udd_ep_run+0x76>
		cpu_irq_enable();
    339e:	2201      	movs	r2, #1
    33a0:	4b52      	ldr	r3, [pc, #328]	; (34ec <udd_ep_run+0x1b8>)
    33a2:	701a      	strb	r2, [r3, #0]
    33a4:	f3bf 8f5f 	dmb	sy
    33a8:	b662      	cpsie	i
	ptr_job->buf = buf;
    33aa:	9b02      	ldr	r3, [sp, #8]
    33ac:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    33ae:	9b01      	ldr	r3, [sp, #4]
    33b0:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    33b2:	2300      	movs	r3, #0
    33b4:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    33b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33b8:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    33ba:	2301      	movs	r3, #1
    33bc:	9a03      	ldr	r2, [sp, #12]
    33be:	4013      	ands	r3, r2
    33c0:	005a      	lsls	r2, r3, #1
    33c2:	7cbb      	ldrb	r3, [r7, #18]
    33c4:	2102      	movs	r1, #2
    33c6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    33c8:	4313      	orrs	r3, r2
    33ca:	2204      	movs	r2, #4
    33cc:	4393      	bics	r3, r2
    33ce:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    33d0:	b26b      	sxtb	r3, r5
    33d2:	2b00      	cmp	r3, #0
    33d4:	db20      	blt.n	3418 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    33d6:	9b01      	ldr	r3, [sp, #4]
    33d8:	2b00      	cmp	r3, #0
    33da:	d06f      	beq.n	34bc <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    33dc:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    33de:	4b44      	ldr	r3, [pc, #272]	; (34f0 <udd_ep_run+0x1bc>)
    33e0:	429c      	cmp	r4, r3
    33e2:	d95a      	bls.n	349a <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    33e4:	8a39      	ldrh	r1, [r7, #16]
    33e6:	001c      	movs	r4, r3
    33e8:	0018      	movs	r0, r3
    33ea:	4b42      	ldr	r3, [pc, #264]	; (34f4 <udd_ep_run+0x1c0>)
    33ec:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    33ee:	1a63      	subs	r3, r4, r1
    33f0:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    33f2:	8a3b      	ldrh	r3, [r7, #16]
    33f4:	429a      	cmp	r2, r3
    33f6:	d257      	bcs.n	34a8 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    33f8:	7cba      	ldrb	r2, [r7, #18]
    33fa:	2104      	movs	r1, #4
    33fc:	430a      	orrs	r2, r1
    33fe:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3400:	1e72      	subs	r2, r6, #1
    3402:	0192      	lsls	r2, r2, #6
    3404:	493c      	ldr	r1, [pc, #240]	; (34f8 <udd_ep_run+0x1c4>)
    3406:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3408:	0031      	movs	r1, r6
    340a:	483c      	ldr	r0, [pc, #240]	; (34fc <udd_ep_run+0x1c8>)
    340c:	4c3c      	ldr	r4, [pc, #240]	; (3500 <udd_ep_run+0x1cc>)
    340e:	47a0      	blx	r4
				return (STATUS_OK ==
    3410:	4244      	negs	r4, r0
    3412:	4144      	adcs	r4, r0
    3414:	b2e4      	uxtb	r4, r4
    3416:	e798      	b.n	334a <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3418:	9b01      	ldr	r3, [sp, #4]
    341a:	2b00      	cmp	r3, #0
    341c:	d027      	beq.n	346e <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    341e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3420:	4b33      	ldr	r3, [pc, #204]	; (34f0 <udd_ep_run+0x1bc>)
    3422:	429d      	cmp	r5, r3
    3424:	d906      	bls.n	3434 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3426:	8a39      	ldrh	r1, [r7, #16]
    3428:	001d      	movs	r5, r3
    342a:	0018      	movs	r0, r3
    342c:	4b31      	ldr	r3, [pc, #196]	; (34f4 <udd_ep_run+0x1c0>)
    342e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3430:	1a6b      	subs	r3, r5, r1
    3432:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3434:	7cbb      	ldrb	r3, [r7, #18]
    3436:	079b      	lsls	r3, r3, #30
    3438:	d507      	bpl.n	344a <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    343a:	8a39      	ldrh	r1, [r7, #16]
    343c:	0028      	movs	r0, r5
    343e:	4b31      	ldr	r3, [pc, #196]	; (3504 <udd_ep_run+0x1d0>)
    3440:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3442:	b289      	uxth	r1, r1
    3444:	424c      	negs	r4, r1
    3446:	414c      	adcs	r4, r1
    3448:	b2e4      	uxtb	r4, r4
    344a:	2001      	movs	r0, #1
    344c:	4020      	ands	r0, r4
    344e:	0040      	lsls	r0, r0, #1
    3450:	7cbc      	ldrb	r4, [r7, #18]
    3452:	2302      	movs	r3, #2
    3454:	439c      	bics	r4, r3
    3456:	4304      	orrs	r4, r0
    3458:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    345a:	002b      	movs	r3, r5
    345c:	9a02      	ldr	r2, [sp, #8]
    345e:	0031      	movs	r1, r6
    3460:	4826      	ldr	r0, [pc, #152]	; (34fc <udd_ep_run+0x1c8>)
    3462:	4c29      	ldr	r4, [pc, #164]	; (3508 <udd_ep_run+0x1d4>)
    3464:	47a0      	blx	r4
		return (STATUS_OK ==
    3466:	4244      	negs	r4, r0
    3468:	4144      	adcs	r4, r0
    346a:	b2e4      	uxtb	r4, r4
    346c:	e76d      	b.n	334a <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    346e:	7cbb      	ldrb	r3, [r7, #18]
    3470:	079b      	lsls	r3, r3, #30
    3472:	d505      	bpl.n	3480 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3474:	7cbb      	ldrb	r3, [r7, #18]
    3476:	2202      	movs	r2, #2
    3478:	4393      	bics	r3, r2
    347a:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    347c:	2500      	movs	r5, #0
    347e:	e7ec      	b.n	345a <udd_ep_run+0x126>
			ptr_job->busy = false;
    3480:	7cbb      	ldrb	r3, [r7, #18]
    3482:	2201      	movs	r2, #1
    3484:	4393      	bics	r3, r2
    3486:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    348a:	2b00      	cmp	r3, #0
    348c:	d025      	beq.n	34da <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    348e:	002a      	movs	r2, r5
    3490:	2100      	movs	r1, #0
    3492:	2000      	movs	r0, #0
    3494:	4798      	blx	r3
			return true;
    3496:	2401      	movs	r4, #1
    3498:	e757      	b.n	334a <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    349a:	8a39      	ldrh	r1, [r7, #16]
    349c:	0020      	movs	r0, r4
    349e:	4b19      	ldr	r3, [pc, #100]	; (3504 <udd_ep_run+0x1d0>)
    34a0:	4798      	blx	r3
    34a2:	1a63      	subs	r3, r4, r1
    34a4:	b29a      	uxth	r2, r3
    34a6:	e7a4      	b.n	33f2 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    34a8:	0013      	movs	r3, r2
    34aa:	9a02      	ldr	r2, [sp, #8]
    34ac:	0031      	movs	r1, r6
    34ae:	4813      	ldr	r0, [pc, #76]	; (34fc <udd_ep_run+0x1c8>)
    34b0:	4c13      	ldr	r4, [pc, #76]	; (3500 <udd_ep_run+0x1cc>)
    34b2:	47a0      	blx	r4
				return (STATUS_OK ==
    34b4:	4244      	negs	r4, r0
    34b6:	4144      	adcs	r4, r0
    34b8:	b2e4      	uxtb	r4, r4
    34ba:	e746      	b.n	334a <udd_ep_run+0x16>
			ptr_job->busy = false;
    34bc:	7cbb      	ldrb	r3, [r7, #18]
    34be:	2201      	movs	r2, #1
    34c0:	4393      	bics	r3, r2
    34c2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    34c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34c6:	2b00      	cmp	r3, #0
    34c8:	d009      	beq.n	34de <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    34ca:	002a      	movs	r2, r5
    34cc:	2100      	movs	r1, #0
    34ce:	2000      	movs	r0, #0
    34d0:	4798      	blx	r3
			return true;
    34d2:	2401      	movs	r4, #1
    34d4:	e739      	b.n	334a <udd_ep_run+0x16>
		return false;
    34d6:	2400      	movs	r4, #0
    34d8:	e737      	b.n	334a <udd_ep_run+0x16>
			return true;
    34da:	2401      	movs	r4, #1
    34dc:	e735      	b.n	334a <udd_ep_run+0x16>
			return true;
    34de:	2401      	movs	r4, #1
    34e0:	e733      	b.n	334a <udd_ep_run+0x16>
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	000031ad 	.word	0x000031ad
    34e8:	00002a11 	.word	0x00002a11
    34ec:	2000010c 	.word	0x2000010c
    34f0:	00001fff 	.word	0x00001fff
    34f4:	00004ec5 	.word	0x00004ec5
    34f8:	200005b8 	.word	0x200005b8
    34fc:	20000678 	.word	0x20000678
    3500:	00003d15 	.word	0x00003d15
    3504:	00004cf1 	.word	0x00004cf1
    3508:	00003cc1 	.word	0x00003cc1

0000350c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    350c:	4b02      	ldr	r3, [pc, #8]	; (3518 <udd_set_address+0xc>)
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	2280      	movs	r2, #128	; 0x80
    3512:	4310      	orrs	r0, r2
    3514:	7298      	strb	r0, [r3, #10]
}
    3516:	4770      	bx	lr
    3518:	20000678 	.word	0x20000678

0000351c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    351c:	4b02      	ldr	r3, [pc, #8]	; (3528 <udd_getaddress+0xc>)
    351e:	681b      	ldr	r3, [r3, #0]
    3520:	7a98      	ldrb	r0, [r3, #10]
    3522:	0640      	lsls	r0, r0, #25
    3524:	0e40      	lsrs	r0, r0, #25
}
    3526:	4770      	bx	lr
    3528:	20000678 	.word	0x20000678

0000352c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    352c:	4b01      	ldr	r3, [pc, #4]	; (3534 <udd_set_setup_payload+0x8>)
    352e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3530:	8199      	strh	r1, [r3, #12]
}
    3532:	4770      	bx	lr
    3534:	200007e0 	.word	0x200007e0

00003538 <udd_detach>:

void udd_detach(void)
{
    3538:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    353a:	4b05      	ldr	r3, [pc, #20]	; (3550 <udd_detach+0x18>)
    353c:	681a      	ldr	r2, [r3, #0]
    353e:	8913      	ldrh	r3, [r2, #8]
    3540:	2101      	movs	r1, #1
    3542:	430b      	orrs	r3, r1
    3544:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3546:	2001      	movs	r0, #1
    3548:	4b02      	ldr	r3, [pc, #8]	; (3554 <udd_detach+0x1c>)
    354a:	4798      	blx	r3
}
    354c:	bd10      	pop	{r4, pc}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	20000678 	.word	0x20000678
    3554:	00002951 	.word	0x00002951

00003558 <udd_attach>:

void udd_attach(void)
{
    3558:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    355a:	2003      	movs	r0, #3
    355c:	4b16      	ldr	r3, [pc, #88]	; (35b8 <udd_attach+0x60>)
    355e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3560:	4c16      	ldr	r4, [pc, #88]	; (35bc <udd_attach+0x64>)
    3562:	6822      	ldr	r2, [r4, #0]
    3564:	8913      	ldrh	r3, [r2, #8]
    3566:	2101      	movs	r1, #1
    3568:	438b      	bics	r3, r1
    356a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    356c:	4a14      	ldr	r2, [pc, #80]	; (35c0 <udd_attach+0x68>)
    356e:	3103      	adds	r1, #3
    3570:	0020      	movs	r0, r4
    3572:	4e14      	ldr	r6, [pc, #80]	; (35c4 <udd_attach+0x6c>)
    3574:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3576:	4a14      	ldr	r2, [pc, #80]	; (35c8 <udd_attach+0x70>)
    3578:	2100      	movs	r1, #0
    357a:	0020      	movs	r0, r4
    357c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    357e:	4a13      	ldr	r2, [pc, #76]	; (35cc <udd_attach+0x74>)
    3580:	2101      	movs	r1, #1
    3582:	0020      	movs	r0, r4
    3584:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3586:	4a12      	ldr	r2, [pc, #72]	; (35d0 <udd_attach+0x78>)
    3588:	2102      	movs	r1, #2
    358a:	0020      	movs	r0, r4
    358c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    358e:	2104      	movs	r1, #4
    3590:	0020      	movs	r0, r4
    3592:	4d10      	ldr	r5, [pc, #64]	; (35d4 <udd_attach+0x7c>)
    3594:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3596:	2100      	movs	r1, #0
    3598:	0020      	movs	r0, r4
    359a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    359c:	2101      	movs	r1, #1
    359e:	0020      	movs	r0, r4
    35a0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    35a2:	2102      	movs	r1, #2
    35a4:	0020      	movs	r0, r4
    35a6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    35a8:	4a0b      	ldr	r2, [pc, #44]	; (35d8 <udd_attach+0x80>)
    35aa:	2106      	movs	r1, #6
    35ac:	0020      	movs	r0, r4
    35ae:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    35b0:	2106      	movs	r1, #6
    35b2:	0020      	movs	r0, r4
    35b4:	47a8      	blx	r5
#endif
}
    35b6:	bd70      	pop	{r4, r5, r6, pc}
    35b8:	00002951 	.word	0x00002951
    35bc:	20000678 	.word	0x20000678
    35c0:	00002fb9 	.word	0x00002fb9
    35c4:	00003711 	.word	0x00003711
    35c8:	00002fa5 	.word	0x00002fa5
    35cc:	00002cd9 	.word	0x00002cd9
    35d0:	00002c69 	.word	0x00002c69
    35d4:	00003735 	.word	0x00003735
    35d8:	00002c0d 	.word	0x00002c0d

000035dc <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    35dc:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    35de:	2100      	movs	r1, #0
    35e0:	200e      	movs	r0, #14
    35e2:	4b08      	ldr	r3, [pc, #32]	; (3604 <_uhd_vbus_handler+0x28>)
    35e4:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    35e6:	4b08      	ldr	r3, [pc, #32]	; (3608 <_uhd_vbus_handler+0x2c>)
    35e8:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    35ea:	045b      	lsls	r3, r3, #17
    35ec:	d406      	bmi.n	35fc <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    35ee:	4b07      	ldr	r3, [pc, #28]	; (360c <_uhd_vbus_handler+0x30>)
    35f0:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    35f2:	2100      	movs	r1, #0
    35f4:	200e      	movs	r0, #14
    35f6:	4b06      	ldr	r3, [pc, #24]	; (3610 <_uhd_vbus_handler+0x34>)
    35f8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    35fa:	bd10      	pop	{r4, pc}
		udd_attach();
    35fc:	4b05      	ldr	r3, [pc, #20]	; (3614 <_uhd_vbus_handler+0x38>)
    35fe:	4798      	blx	r3
    3600:	e7f7      	b.n	35f2 <_uhd_vbus_handler+0x16>
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	00001dd5 	.word	0x00001dd5
    3608:	41004400 	.word	0x41004400
    360c:	00003539 	.word	0x00003539
    3610:	00001db5 	.word	0x00001db5
    3614:	00003559 	.word	0x00003559

00003618 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3618:	b570      	push	{r4, r5, r6, lr}
    361a:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    361c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3620:	425a      	negs	r2, r3
    3622:	4153      	adcs	r3, r2
    3624:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3626:	b672      	cpsid	i
    3628:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    362c:	2600      	movs	r6, #0
    362e:	4b29      	ldr	r3, [pc, #164]	; (36d4 <udd_enable+0xbc>)
    3630:	701e      	strb	r6, [r3, #0]
	return flags;
    3632:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3634:	ac05      	add	r4, sp, #20
    3636:	0020      	movs	r0, r4
    3638:	4b27      	ldr	r3, [pc, #156]	; (36d8 <udd_enable+0xc0>)
    363a:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    363c:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    363e:	4e27      	ldr	r6, [pc, #156]	; (36dc <udd_enable+0xc4>)
    3640:	0022      	movs	r2, r4
    3642:	4927      	ldr	r1, [pc, #156]	; (36e0 <udd_enable+0xc8>)
    3644:	0030      	movs	r0, r6
    3646:	4b27      	ldr	r3, [pc, #156]	; (36e4 <udd_enable+0xcc>)
    3648:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    364a:	0030      	movs	r0, r6
    364c:	4b26      	ldr	r3, [pc, #152]	; (36e8 <udd_enable+0xd0>)
    364e:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3650:	4b26      	ldr	r3, [pc, #152]	; (36ec <udd_enable+0xd4>)
    3652:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3654:	069b      	lsls	r3, r3, #26
    3656:	d434      	bmi.n	36c2 <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3658:	4924      	ldr	r1, [pc, #144]	; (36ec <udd_enable+0xd4>)
    365a:	22d0      	movs	r2, #208	; 0xd0
    365c:	68cb      	ldr	r3, [r1, #12]
    365e:	4013      	ands	r3, r2
    3660:	2bd0      	cmp	r3, #208	; 0xd0
    3662:	d1fb      	bne.n	365c <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3664:	2001      	movs	r0, #1
    3666:	4b22      	ldr	r3, [pc, #136]	; (36f0 <udd_enable+0xd8>)
    3668:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    366a:	ac02      	add	r4, sp, #8
    366c:	0020      	movs	r0, r4
    366e:	4b21      	ldr	r3, [pc, #132]	; (36f4 <udd_enable+0xdc>)
    3670:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3672:	230e      	movs	r3, #14
    3674:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3676:	2300      	movs	r3, #0
    3678:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    367a:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    367c:	3303      	adds	r3, #3
    367e:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3680:	3b02      	subs	r3, #2
    3682:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3684:	2100      	movs	r1, #0
    3686:	200e      	movs	r0, #14
    3688:	4b1b      	ldr	r3, [pc, #108]	; (36f8 <udd_enable+0xe0>)
    368a:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    368c:	0021      	movs	r1, r4
    368e:	200e      	movs	r0, #14
    3690:	4b1a      	ldr	r3, [pc, #104]	; (36fc <udd_enable+0xe4>)
    3692:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3694:	2200      	movs	r2, #0
    3696:	210e      	movs	r1, #14
    3698:	4819      	ldr	r0, [pc, #100]	; (3700 <udd_enable+0xe8>)
    369a:	4b1a      	ldr	r3, [pc, #104]	; (3704 <udd_enable+0xec>)
    369c:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    369e:	2100      	movs	r1, #0
    36a0:	200e      	movs	r0, #14
    36a2:	4b19      	ldr	r3, [pc, #100]	; (3708 <udd_enable+0xf0>)
    36a4:	4798      	blx	r3
    36a6:	4b19      	ldr	r3, [pc, #100]	; (370c <udd_enable+0xf4>)
    36a8:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    36aa:	045b      	lsls	r3, r3, #17
    36ac:	d40f      	bmi.n	36ce <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    36ae:	2d00      	cmp	r5, #0
    36b0:	d005      	beq.n	36be <udd_enable+0xa6>
		cpu_irq_enable();
    36b2:	2201      	movs	r2, #1
    36b4:	4b07      	ldr	r3, [pc, #28]	; (36d4 <udd_enable+0xbc>)
    36b6:	701a      	strb	r2, [r3, #0]
    36b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    36bc:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    36be:	b006      	add	sp, #24
    36c0:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    36c2:	490a      	ldr	r1, [pc, #40]	; (36ec <udd_enable+0xd4>)
    36c4:	2210      	movs	r2, #16
    36c6:	68cb      	ldr	r3, [r1, #12]
    36c8:	421a      	tst	r2, r3
    36ca:	d0fc      	beq.n	36c6 <udd_enable+0xae>
    36cc:	e7ca      	b.n	3664 <udd_enable+0x4c>
		_uhd_vbus_handler();
    36ce:	4b0c      	ldr	r3, [pc, #48]	; (3700 <udd_enable+0xe8>)
    36d0:	4798      	blx	r3
    36d2:	e7ec      	b.n	36ae <udd_enable+0x96>
    36d4:	2000010c 	.word	0x2000010c
    36d8:	00004371 	.word	0x00004371
    36dc:	20000678 	.word	0x20000678
    36e0:	41005000 	.word	0x41005000
    36e4:	00004381 	.word	0x00004381
    36e8:	00003d95 	.word	0x00003d95
    36ec:	40000800 	.word	0x40000800
    36f0:	00002951 	.word	0x00002951
    36f4:	00001ecd 	.word	0x00001ecd
    36f8:	00001dd5 	.word	0x00001dd5
    36fc:	00001ee1 	.word	0x00001ee1
    3700:	000035dd 	.word	0x000035dd
    3704:	00001d89 	.word	0x00001d89
    3708:	00001db5 	.word	0x00001db5
    370c:	41004400 	.word	0x41004400

00003710 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3710:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3712:	000b      	movs	r3, r1
    3714:	332e      	adds	r3, #46	; 0x2e
    3716:	009b      	lsls	r3, r3, #2
    3718:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    371a:	22aa      	movs	r2, #170	; 0xaa
    371c:	0052      	lsls	r2, r2, #1
    371e:	0049      	lsls	r1, r1, #1
    3720:	5a83      	ldrh	r3, [r0, r2]
    3722:	4c03      	ldr	r4, [pc, #12]	; (3730 <usb_device_register_callback+0x20>)
    3724:	5b09      	ldrh	r1, [r1, r4]
    3726:	430b      	orrs	r3, r1
    3728:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    372a:	2000      	movs	r0, #0
    372c:	bd10      	pop	{r4, pc}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	00006f64 	.word	0x00006f64

00003734 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3734:	0049      	lsls	r1, r1, #1
    3736:	4b06      	ldr	r3, [pc, #24]	; (3750 <usb_device_enable_callback+0x1c>)
    3738:	5acb      	ldrh	r3, [r1, r3]
    373a:	6802      	ldr	r2, [r0, #0]
    373c:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    373e:	21ab      	movs	r1, #171	; 0xab
    3740:	0049      	lsls	r1, r1, #1
    3742:	5a42      	ldrh	r2, [r0, r1]
    3744:	431a      	orrs	r2, r3
    3746:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3748:	6802      	ldr	r2, [r0, #0]
    374a:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    374c:	2000      	movs	r0, #0
    374e:	4770      	bx	lr
    3750:	00006f64 	.word	0x00006f64

00003754 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3754:	0049      	lsls	r1, r1, #1
    3756:	4b05      	ldr	r3, [pc, #20]	; (376c <usb_device_disable_callback+0x18>)
    3758:	5aca      	ldrh	r2, [r1, r3]
    375a:	21ab      	movs	r1, #171	; 0xab
    375c:	0049      	lsls	r1, r1, #1
    375e:	5a43      	ldrh	r3, [r0, r1]
    3760:	4393      	bics	r3, r2
    3762:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3764:	6803      	ldr	r3, [r0, #0]
    3766:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3768:	2000      	movs	r0, #0
    376a:	4770      	bx	lr
    376c:	00006f64 	.word	0x00006f64

00003770 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3770:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3772:	008c      	lsls	r4, r1, #2
    3774:	18a4      	adds	r4, r4, r2
    3776:	3434      	adds	r4, #52	; 0x34
    3778:	00a4      	lsls	r4, r4, #2
    377a:	1904      	adds	r4, r0, r4
    377c:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    377e:	1840      	adds	r0, r0, r1
    3780:	3059      	adds	r0, #89	; 0x59
    3782:	30ff      	adds	r0, #255	; 0xff
    3784:	7803      	ldrb	r3, [r0, #0]
    3786:	4903      	ldr	r1, [pc, #12]	; (3794 <usb_device_endpoint_register_callback+0x24>)
    3788:	5c8a      	ldrb	r2, [r1, r2]
    378a:	4313      	orrs	r3, r2
    378c:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    378e:	2000      	movs	r0, #0
    3790:	bd10      	pop	{r4, pc}
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	00006f74 	.word	0x00006f74

00003798 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3798:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    379a:	008b      	lsls	r3, r1, #2
    379c:	189b      	adds	r3, r3, r2
    379e:	3334      	adds	r3, #52	; 0x34
    37a0:	009b      	lsls	r3, r3, #2
    37a2:	18c3      	adds	r3, r0, r3
    37a4:	2400      	movs	r4, #0
    37a6:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    37a8:	1840      	adds	r0, r0, r1
    37aa:	3059      	adds	r0, #89	; 0x59
    37ac:	30ff      	adds	r0, #255	; 0xff
    37ae:	4b03      	ldr	r3, [pc, #12]	; (37bc <usb_device_endpoint_unregister_callback+0x24>)
    37b0:	5c9a      	ldrb	r2, [r3, r2]
    37b2:	7803      	ldrb	r3, [r0, #0]
    37b4:	4393      	bics	r3, r2
    37b6:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    37b8:	2000      	movs	r0, #0
    37ba:	bd10      	pop	{r4, pc}
    37bc:	00006f74 	.word	0x00006f74

000037c0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    37c0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    37c2:	230f      	movs	r3, #15
    37c4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    37c6:	18c4      	adds	r4, r0, r3
    37c8:	3461      	adds	r4, #97	; 0x61
    37ca:	34ff      	adds	r4, #255	; 0xff
    37cc:	7825      	ldrb	r5, [r4, #0]
    37ce:	4e2f      	ldr	r6, [pc, #188]	; (388c <usb_device_endpoint_enable_callback+0xcc>)
    37d0:	5cb6      	ldrb	r6, [r6, r2]
    37d2:	4335      	orrs	r5, r6
    37d4:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    37d6:	2a00      	cmp	r2, #0
    37d8:	d129      	bne.n	382e <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    37da:	2b00      	cmp	r3, #0
    37dc:	d112      	bne.n	3804 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    37de:	2503      	movs	r5, #3
    37e0:	240a      	movs	r4, #10
    37e2:	34ff      	adds	r4, #255	; 0xff
    37e4:	6806      	ldr	r6, [r0, #0]
    37e6:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    37e8:	2a03      	cmp	r2, #3
    37ea:	d109      	bne.n	3800 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    37ec:	b249      	sxtb	r1, r1
    37ee:	2900      	cmp	r1, #0
    37f0:	db44      	blt.n	387c <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    37f2:	6802      	ldr	r2, [r0, #0]
    37f4:	015b      	lsls	r3, r3, #5
    37f6:	18d3      	adds	r3, r2, r3
    37f8:	330a      	adds	r3, #10
    37fa:	33ff      	adds	r3, #255	; 0xff
    37fc:	2220      	movs	r2, #32
    37fe:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3800:	2000      	movs	r0, #0
    3802:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3804:	b24c      	sxtb	r4, r1
    3806:	2c00      	cmp	r4, #0
    3808:	db08      	blt.n	381c <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    380a:	015c      	lsls	r4, r3, #5
    380c:	6805      	ldr	r5, [r0, #0]
    380e:	46ac      	mov	ip, r5
    3810:	4464      	add	r4, ip
    3812:	340a      	adds	r4, #10
    3814:	34ff      	adds	r4, #255	; 0xff
    3816:	2501      	movs	r5, #1
    3818:	7025      	strb	r5, [r4, #0]
    381a:	e7e5      	b.n	37e8 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    381c:	015c      	lsls	r4, r3, #5
    381e:	6805      	ldr	r5, [r0, #0]
    3820:	46ac      	mov	ip, r5
    3822:	4464      	add	r4, ip
    3824:	340a      	adds	r4, #10
    3826:	34ff      	adds	r4, #255	; 0xff
    3828:	2502      	movs	r5, #2
    382a:	7025      	strb	r5, [r4, #0]
    382c:	e7dc      	b.n	37e8 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    382e:	2a01      	cmp	r2, #1
    3830:	d11a      	bne.n	3868 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3832:	2b00      	cmp	r3, #0
    3834:	d105      	bne.n	3842 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3836:	6802      	ldr	r2, [r0, #0]
    3838:	210c      	movs	r1, #12
    383a:	230a      	movs	r3, #10
    383c:	33ff      	adds	r3, #255	; 0xff
    383e:	54d1      	strb	r1, [r2, r3]
    3840:	e7de      	b.n	3800 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3842:	b249      	sxtb	r1, r1
    3844:	2900      	cmp	r1, #0
    3846:	db07      	blt.n	3858 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3848:	6802      	ldr	r2, [r0, #0]
    384a:	015b      	lsls	r3, r3, #5
    384c:	18d3      	adds	r3, r2, r3
    384e:	330a      	adds	r3, #10
    3850:	33ff      	adds	r3, #255	; 0xff
    3852:	2204      	movs	r2, #4
    3854:	701a      	strb	r2, [r3, #0]
    3856:	e7d3      	b.n	3800 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3858:	6802      	ldr	r2, [r0, #0]
    385a:	015b      	lsls	r3, r3, #5
    385c:	18d3      	adds	r3, r2, r3
    385e:	330a      	adds	r3, #10
    3860:	33ff      	adds	r3, #255	; 0xff
    3862:	2208      	movs	r2, #8
    3864:	701a      	strb	r2, [r3, #0]
    3866:	e7cb      	b.n	3800 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3868:	2a02      	cmp	r2, #2
    386a:	d1bd      	bne.n	37e8 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    386c:	6802      	ldr	r2, [r0, #0]
    386e:	015b      	lsls	r3, r3, #5
    3870:	18d3      	adds	r3, r2, r3
    3872:	330a      	adds	r3, #10
    3874:	33ff      	adds	r3, #255	; 0xff
    3876:	2210      	movs	r2, #16
    3878:	701a      	strb	r2, [r3, #0]
    387a:	e7c1      	b.n	3800 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    387c:	6802      	ldr	r2, [r0, #0]
    387e:	015b      	lsls	r3, r3, #5
    3880:	18d3      	adds	r3, r2, r3
    3882:	330a      	adds	r3, #10
    3884:	33ff      	adds	r3, #255	; 0xff
    3886:	2240      	movs	r2, #64	; 0x40
    3888:	701a      	strb	r2, [r3, #0]
    388a:	e7b9      	b.n	3800 <usb_device_endpoint_enable_callback+0x40>
    388c:	00006f74 	.word	0x00006f74

00003890 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3890:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3892:	230f      	movs	r3, #15
    3894:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3896:	18c4      	adds	r4, r0, r3
    3898:	3461      	adds	r4, #97	; 0x61
    389a:	34ff      	adds	r4, #255	; 0xff
    389c:	4d2f      	ldr	r5, [pc, #188]	; (395c <usb_device_endpoint_disable_callback+0xcc>)
    389e:	5cae      	ldrb	r6, [r5, r2]
    38a0:	7825      	ldrb	r5, [r4, #0]
    38a2:	43b5      	bics	r5, r6
    38a4:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    38a6:	2a00      	cmp	r2, #0
    38a8:	d129      	bne.n	38fe <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    38aa:	2b00      	cmp	r3, #0
    38ac:	d112      	bne.n	38d4 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    38ae:	2503      	movs	r5, #3
    38b0:	2484      	movs	r4, #132	; 0x84
    38b2:	0064      	lsls	r4, r4, #1
    38b4:	6806      	ldr	r6, [r0, #0]
    38b6:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    38b8:	2a03      	cmp	r2, #3
    38ba:	d109      	bne.n	38d0 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    38bc:	b249      	sxtb	r1, r1
    38be:	2900      	cmp	r1, #0
    38c0:	db44      	blt.n	394c <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    38c2:	6802      	ldr	r2, [r0, #0]
    38c4:	015b      	lsls	r3, r3, #5
    38c6:	18d3      	adds	r3, r2, r3
    38c8:	3309      	adds	r3, #9
    38ca:	33ff      	adds	r3, #255	; 0xff
    38cc:	2220      	movs	r2, #32
    38ce:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    38d0:	2000      	movs	r0, #0
    38d2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    38d4:	b24c      	sxtb	r4, r1
    38d6:	2c00      	cmp	r4, #0
    38d8:	db08      	blt.n	38ec <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    38da:	015c      	lsls	r4, r3, #5
    38dc:	6805      	ldr	r5, [r0, #0]
    38de:	46ac      	mov	ip, r5
    38e0:	4464      	add	r4, ip
    38e2:	3409      	adds	r4, #9
    38e4:	34ff      	adds	r4, #255	; 0xff
    38e6:	2501      	movs	r5, #1
    38e8:	7025      	strb	r5, [r4, #0]
    38ea:	e7e5      	b.n	38b8 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    38ec:	015c      	lsls	r4, r3, #5
    38ee:	6805      	ldr	r5, [r0, #0]
    38f0:	46ac      	mov	ip, r5
    38f2:	4464      	add	r4, ip
    38f4:	3409      	adds	r4, #9
    38f6:	34ff      	adds	r4, #255	; 0xff
    38f8:	2502      	movs	r5, #2
    38fa:	7025      	strb	r5, [r4, #0]
    38fc:	e7dc      	b.n	38b8 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    38fe:	2a01      	cmp	r2, #1
    3900:	d11a      	bne.n	3938 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3902:	2b00      	cmp	r3, #0
    3904:	d105      	bne.n	3912 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3906:	6802      	ldr	r2, [r0, #0]
    3908:	210c      	movs	r1, #12
    390a:	3309      	adds	r3, #9
    390c:	33ff      	adds	r3, #255	; 0xff
    390e:	54d1      	strb	r1, [r2, r3]
    3910:	e7de      	b.n	38d0 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3912:	b249      	sxtb	r1, r1
    3914:	2900      	cmp	r1, #0
    3916:	db07      	blt.n	3928 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3918:	6802      	ldr	r2, [r0, #0]
    391a:	015b      	lsls	r3, r3, #5
    391c:	18d3      	adds	r3, r2, r3
    391e:	3309      	adds	r3, #9
    3920:	33ff      	adds	r3, #255	; 0xff
    3922:	2204      	movs	r2, #4
    3924:	701a      	strb	r2, [r3, #0]
    3926:	e7d3      	b.n	38d0 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3928:	6802      	ldr	r2, [r0, #0]
    392a:	015b      	lsls	r3, r3, #5
    392c:	18d3      	adds	r3, r2, r3
    392e:	3309      	adds	r3, #9
    3930:	33ff      	adds	r3, #255	; 0xff
    3932:	2208      	movs	r2, #8
    3934:	701a      	strb	r2, [r3, #0]
    3936:	e7cb      	b.n	38d0 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3938:	2a02      	cmp	r2, #2
    393a:	d1bd      	bne.n	38b8 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    393c:	6802      	ldr	r2, [r0, #0]
    393e:	015b      	lsls	r3, r3, #5
    3940:	18d3      	adds	r3, r2, r3
    3942:	3309      	adds	r3, #9
    3944:	33ff      	adds	r3, #255	; 0xff
    3946:	2210      	movs	r2, #16
    3948:	701a      	strb	r2, [r3, #0]
    394a:	e7c1      	b.n	38d0 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    394c:	6802      	ldr	r2, [r0, #0]
    394e:	015b      	lsls	r3, r3, #5
    3950:	18d3      	adds	r3, r2, r3
    3952:	3309      	adds	r3, #9
    3954:	33ff      	adds	r3, #255	; 0xff
    3956:	2240      	movs	r2, #64	; 0x40
    3958:	701a      	strb	r2, [r3, #0]
    395a:	e7b9      	b.n	38d0 <usb_device_endpoint_disable_callback+0x40>
    395c:	00006f74 	.word	0x00006f74

00003960 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3960:	2300      	movs	r3, #0
    3962:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3964:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3966:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3968:	3301      	adds	r3, #1
    396a:	70c3      	strb	r3, [r0, #3]
}
    396c:	4770      	bx	lr
	...

00003970 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3970:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3972:	780c      	ldrb	r4, [r1, #0]
    3974:	230f      	movs	r3, #15
    3976:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3978:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    397a:	78ca      	ldrb	r2, [r1, #3]
    397c:	2a04      	cmp	r2, #4
    397e:	d870      	bhi.n	3a62 <usb_device_endpoint_set_config+0xf2>
    3980:	0092      	lsls	r2, r2, #2
    3982:	4d89      	ldr	r5, [pc, #548]	; (3ba8 <usb_device_endpoint_set_config+0x238>)
    3984:	58aa      	ldr	r2, [r5, r2]
    3986:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3988:	6802      	ldr	r2, [r0, #0]
    398a:	3308      	adds	r3, #8
    398c:	015b      	lsls	r3, r3, #5
    398e:	2100      	movs	r1, #0
    3990:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3992:	2200      	movs	r2, #0
    3994:	e082      	b.n	3a9c <usb_device_endpoint_set_config+0x12c>
    3996:	015c      	lsls	r4, r3, #5
    3998:	6802      	ldr	r2, [r0, #0]
    399a:	4694      	mov	ip, r2
    399c:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    399e:	2280      	movs	r2, #128	; 0x80
    39a0:	0052      	lsls	r2, r2, #1
    39a2:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    39a4:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    39a6:	076d      	lsls	r5, r5, #29
    39a8:	d178      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    39aa:	32e4      	adds	r2, #228	; 0xe4
    39ac:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    39ae:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    39b0:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    39b2:	422e      	tst	r6, r5
    39b4:	d172      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    39b6:	3d5f      	subs	r5, #95	; 0x5f
    39b8:	32e4      	adds	r2, #228	; 0xe4
    39ba:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    39bc:	001a      	movs	r2, r3
    39be:	3208      	adds	r2, #8
    39c0:	0152      	lsls	r2, r2, #5
    39c2:	6804      	ldr	r4, [r0, #0]
    39c4:	18a4      	adds	r4, r4, r2
    39c6:	352f      	adds	r5, #47	; 0x2f
    39c8:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    39ca:	6800      	ldr	r0, [r0, #0]
    39cc:	1882      	adds	r2, r0, r2
    39ce:	2080      	movs	r0, #128	; 0x80
    39d0:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    39d2:	788a      	ldrb	r2, [r1, #2]
    39d4:	2a00      	cmp	r2, #0
    39d6:	d01f      	beq.n	3a18 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    39d8:	0158      	lsls	r0, r3, #5
    39da:	4a74      	ldr	r2, [pc, #464]	; (3bac <usb_device_endpoint_set_config+0x23c>)
    39dc:	1812      	adds	r2, r2, r0
    39de:	6854      	ldr	r4, [r2, #4]
    39e0:	2080      	movs	r0, #128	; 0x80
    39e2:	0600      	lsls	r0, r0, #24
    39e4:	4304      	orrs	r4, r0
    39e6:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    39e8:	6954      	ldr	r4, [r2, #20]
    39ea:	4320      	orrs	r0, r4
    39ec:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    39ee:	2507      	movs	r5, #7
    39f0:	784c      	ldrb	r4, [r1, #1]
    39f2:	015a      	lsls	r2, r3, #5
    39f4:	4b6d      	ldr	r3, [pc, #436]	; (3bac <usb_device_endpoint_set_config+0x23c>)
    39f6:	189b      	adds	r3, r3, r2
    39f8:	6858      	ldr	r0, [r3, #4]
    39fa:	402c      	ands	r4, r5
    39fc:	0724      	lsls	r4, r4, #28
    39fe:	4e6c      	ldr	r6, [pc, #432]	; (3bb0 <usb_device_endpoint_set_config+0x240>)
    3a00:	4030      	ands	r0, r6
    3a02:	4320      	orrs	r0, r4
    3a04:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a06:	7849      	ldrb	r1, [r1, #1]
    3a08:	695a      	ldr	r2, [r3, #20]
    3a0a:	4029      	ands	r1, r5
    3a0c:	0709      	lsls	r1, r1, #28
    3a0e:	4032      	ands	r2, r6
    3a10:	430a      	orrs	r2, r1
    3a12:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3a14:	2200      	movs	r2, #0
    3a16:	e041      	b.n	3a9c <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a18:	0158      	lsls	r0, r3, #5
    3a1a:	4a64      	ldr	r2, [pc, #400]	; (3bac <usb_device_endpoint_set_config+0x23c>)
    3a1c:	1812      	adds	r2, r2, r0
    3a1e:	6850      	ldr	r0, [r2, #4]
    3a20:	0040      	lsls	r0, r0, #1
    3a22:	0840      	lsrs	r0, r0, #1
    3a24:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a26:	6950      	ldr	r0, [r2, #20]
    3a28:	0040      	lsls	r0, r0, #1
    3a2a:	0840      	lsrs	r0, r0, #1
    3a2c:	6150      	str	r0, [r2, #20]
    3a2e:	e7de      	b.n	39ee <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3a30:	2c00      	cmp	r4, #0
    3a32:	db35      	blt.n	3aa0 <usb_device_endpoint_set_config+0x130>
    3a34:	015d      	lsls	r5, r3, #5
    3a36:	6802      	ldr	r2, [r0, #0]
    3a38:	4694      	mov	ip, r2
    3a3a:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3a3c:	2280      	movs	r2, #128	; 0x80
    3a3e:	0052      	lsls	r2, r2, #1
    3a40:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3a42:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3a44:	0776      	lsls	r6, r6, #29
    3a46:	d129      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3a48:	2680      	movs	r6, #128	; 0x80
    3a4a:	0076      	lsls	r6, r6, #1
    3a4c:	5daa      	ldrb	r2, [r5, r6]
    3a4e:	2702      	movs	r7, #2
    3a50:	433a      	orrs	r2, r7
    3a52:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3a54:	6802      	ldr	r2, [r0, #0]
    3a56:	0018      	movs	r0, r3
    3a58:	3008      	adds	r0, #8
    3a5a:	0140      	lsls	r0, r0, #5
    3a5c:	1812      	adds	r2, r2, r0
    3a5e:	2040      	movs	r0, #64	; 0x40
    3a60:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3a62:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a64:	784f      	ldrb	r7, [r1, #1]
    3a66:	005d      	lsls	r5, r3, #1
    3a68:	18ad      	adds	r5, r5, r2
    3a6a:	012d      	lsls	r5, r5, #4
    3a6c:	4e4f      	ldr	r6, [pc, #316]	; (3bac <usb_device_endpoint_set_config+0x23c>)
    3a6e:	1975      	adds	r5, r6, r5
    3a70:	6868      	ldr	r0, [r5, #4]
    3a72:	2407      	movs	r4, #7
    3a74:	403c      	ands	r4, r7
    3a76:	0724      	lsls	r4, r4, #28
    3a78:	4e4d      	ldr	r6, [pc, #308]	; (3bb0 <usb_device_endpoint_set_config+0x240>)
    3a7a:	4030      	ands	r0, r6
    3a7c:	4320      	orrs	r0, r4
    3a7e:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3a80:	7889      	ldrb	r1, [r1, #2]
    3a82:	2900      	cmp	r1, #0
    3a84:	d000      	beq.n	3a88 <usb_device_endpoint_set_config+0x118>
    3a86:	e088      	b.n	3b9a <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a88:	005b      	lsls	r3, r3, #1
    3a8a:	189b      	adds	r3, r3, r2
    3a8c:	011b      	lsls	r3, r3, #4
    3a8e:	4a47      	ldr	r2, [pc, #284]	; (3bac <usb_device_endpoint_set_config+0x23c>)
    3a90:	18d3      	adds	r3, r2, r3
    3a92:	685a      	ldr	r2, [r3, #4]
    3a94:	0052      	lsls	r2, r2, #1
    3a96:	0852      	lsrs	r2, r2, #1
    3a98:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3a9a:	2200      	movs	r2, #0
}
    3a9c:	0010      	movs	r0, r2
    3a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa0:	015d      	lsls	r5, r3, #5
    3aa2:	6802      	ldr	r2, [r0, #0]
    3aa4:	4694      	mov	ip, r2
    3aa6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3aa8:	2280      	movs	r2, #128	; 0x80
    3aaa:	0052      	lsls	r2, r2, #1
    3aac:	5caf      	ldrb	r7, [r5, r2]
    3aae:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3ab0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3ab2:	4237      	tst	r7, r6
    3ab4:	d1f2      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3ab6:	3690      	adds	r6, #144	; 0x90
    3ab8:	5daa      	ldrb	r2, [r5, r6]
    3aba:	2720      	movs	r7, #32
    3abc:	433a      	orrs	r2, r7
    3abe:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3ac0:	6802      	ldr	r2, [r0, #0]
    3ac2:	0018      	movs	r0, r3
    3ac4:	3008      	adds	r0, #8
    3ac6:	0140      	lsls	r0, r0, #5
    3ac8:	1812      	adds	r2, r2, r0
    3aca:	2080      	movs	r0, #128	; 0x80
    3acc:	7110      	strb	r0, [r2, #4]
    3ace:	e7c8      	b.n	3a62 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3ad0:	2c00      	cmp	r4, #0
    3ad2:	db17      	blt.n	3b04 <usb_device_endpoint_set_config+0x194>
    3ad4:	015d      	lsls	r5, r3, #5
    3ad6:	6802      	ldr	r2, [r0, #0]
    3ad8:	4694      	mov	ip, r2
    3ada:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3adc:	2280      	movs	r2, #128	; 0x80
    3ade:	0052      	lsls	r2, r2, #1
    3ae0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3ae2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3ae4:	0776      	lsls	r6, r6, #29
    3ae6:	d1d9      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3ae8:	2680      	movs	r6, #128	; 0x80
    3aea:	0076      	lsls	r6, r6, #1
    3aec:	5daa      	ldrb	r2, [r5, r6]
    3aee:	2703      	movs	r7, #3
    3af0:	433a      	orrs	r2, r7
    3af2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3af4:	6802      	ldr	r2, [r0, #0]
    3af6:	0018      	movs	r0, r3
    3af8:	3008      	adds	r0, #8
    3afa:	0140      	lsls	r0, r0, #5
    3afc:	1812      	adds	r2, r2, r0
    3afe:	2040      	movs	r0, #64	; 0x40
    3b00:	7150      	strb	r0, [r2, #5]
    3b02:	e7ae      	b.n	3a62 <usb_device_endpoint_set_config+0xf2>
    3b04:	015d      	lsls	r5, r3, #5
    3b06:	6802      	ldr	r2, [r0, #0]
    3b08:	4694      	mov	ip, r2
    3b0a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b0c:	2280      	movs	r2, #128	; 0x80
    3b0e:	0052      	lsls	r2, r2, #1
    3b10:	5caf      	ldrb	r7, [r5, r2]
    3b12:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3b14:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b16:	4237      	tst	r7, r6
    3b18:	d1c0      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3b1a:	3690      	adds	r6, #144	; 0x90
    3b1c:	5daa      	ldrb	r2, [r5, r6]
    3b1e:	2730      	movs	r7, #48	; 0x30
    3b20:	433a      	orrs	r2, r7
    3b22:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3b24:	6802      	ldr	r2, [r0, #0]
    3b26:	0018      	movs	r0, r3
    3b28:	3008      	adds	r0, #8
    3b2a:	0140      	lsls	r0, r0, #5
    3b2c:	1812      	adds	r2, r2, r0
    3b2e:	2080      	movs	r0, #128	; 0x80
    3b30:	7110      	strb	r0, [r2, #4]
    3b32:	e796      	b.n	3a62 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3b34:	2c00      	cmp	r4, #0
    3b36:	db17      	blt.n	3b68 <usb_device_endpoint_set_config+0x1f8>
    3b38:	015d      	lsls	r5, r3, #5
    3b3a:	6802      	ldr	r2, [r0, #0]
    3b3c:	4694      	mov	ip, r2
    3b3e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3b40:	2280      	movs	r2, #128	; 0x80
    3b42:	0052      	lsls	r2, r2, #1
    3b44:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3b46:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3b48:	0776      	lsls	r6, r6, #29
    3b4a:	d1a7      	bne.n	3a9c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3b4c:	2680      	movs	r6, #128	; 0x80
    3b4e:	0076      	lsls	r6, r6, #1
    3b50:	5daa      	ldrb	r2, [r5, r6]
    3b52:	2704      	movs	r7, #4
    3b54:	433a      	orrs	r2, r7
    3b56:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3b58:	6802      	ldr	r2, [r0, #0]
    3b5a:	0018      	movs	r0, r3
    3b5c:	3008      	adds	r0, #8
    3b5e:	0140      	lsls	r0, r0, #5
    3b60:	1812      	adds	r2, r2, r0
    3b62:	2040      	movs	r0, #64	; 0x40
    3b64:	7150      	strb	r0, [r2, #5]
    3b66:	e77c      	b.n	3a62 <usb_device_endpoint_set_config+0xf2>
    3b68:	015d      	lsls	r5, r3, #5
    3b6a:	6802      	ldr	r2, [r0, #0]
    3b6c:	4694      	mov	ip, r2
    3b6e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b70:	2280      	movs	r2, #128	; 0x80
    3b72:	0052      	lsls	r2, r2, #1
    3b74:	5caf      	ldrb	r7, [r5, r2]
    3b76:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3b78:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b7a:	4237      	tst	r7, r6
    3b7c:	d000      	beq.n	3b80 <usb_device_endpoint_set_config+0x210>
    3b7e:	e78d      	b.n	3a9c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3b80:	3690      	adds	r6, #144	; 0x90
    3b82:	5daa      	ldrb	r2, [r5, r6]
    3b84:	2740      	movs	r7, #64	; 0x40
    3b86:	433a      	orrs	r2, r7
    3b88:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3b8a:	6802      	ldr	r2, [r0, #0]
    3b8c:	0018      	movs	r0, r3
    3b8e:	3008      	adds	r0, #8
    3b90:	0140      	lsls	r0, r0, #5
    3b92:	1812      	adds	r2, r2, r0
    3b94:	2080      	movs	r0, #128	; 0x80
    3b96:	7110      	strb	r0, [r2, #4]
    3b98:	e763      	b.n	3a62 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3b9a:	6869      	ldr	r1, [r5, #4]
    3b9c:	2380      	movs	r3, #128	; 0x80
    3b9e:	061b      	lsls	r3, r3, #24
    3ba0:	430b      	orrs	r3, r1
    3ba2:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3ba4:	2200      	movs	r2, #0
    3ba6:	e779      	b.n	3a9c <usb_device_endpoint_set_config+0x12c>
    3ba8:	00006f50 	.word	0x00006f50
    3bac:	20000838 	.word	0x20000838
    3bb0:	8fffffff 	.word	0x8fffffff

00003bb4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    3bb4:	230f      	movs	r3, #15
    3bb6:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3bb8:	b249      	sxtb	r1, r1
    3bba:	2900      	cmp	r1, #0
    3bbc:	db0a      	blt.n	3bd4 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3bbe:	3308      	adds	r3, #8
    3bc0:	015b      	lsls	r3, r3, #5
    3bc2:	6802      	ldr	r2, [r0, #0]
    3bc4:	18d2      	adds	r2, r2, r3
    3bc6:	2140      	movs	r1, #64	; 0x40
    3bc8:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3bca:	6802      	ldr	r2, [r0, #0]
    3bcc:	18d3      	adds	r3, r2, r3
    3bce:	2201      	movs	r2, #1
    3bd0:	71da      	strb	r2, [r3, #7]
	}
}
    3bd2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3bd4:	3308      	adds	r3, #8
    3bd6:	015b      	lsls	r3, r3, #5
    3bd8:	6802      	ldr	r2, [r0, #0]
    3bda:	18d2      	adds	r2, r2, r3
    3bdc:	2180      	movs	r1, #128	; 0x80
    3bde:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3be0:	6802      	ldr	r2, [r0, #0]
    3be2:	18d3      	adds	r3, r2, r3
    3be4:	2202      	movs	r2, #2
    3be6:	71da      	strb	r2, [r3, #7]
    3be8:	e7f3      	b.n	3bd2 <usb_device_endpoint_abort_job+0x1e>

00003bea <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3bea:	230f      	movs	r3, #15
    3bec:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3bee:	b249      	sxtb	r1, r1
    3bf0:	2900      	cmp	r1, #0
    3bf2:	db07      	blt.n	3c04 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    3bf4:	6802      	ldr	r2, [r0, #0]
    3bf6:	3308      	adds	r3, #8
    3bf8:	015b      	lsls	r3, r3, #5
    3bfa:	18d3      	adds	r3, r2, r3
    3bfc:	7998      	ldrb	r0, [r3, #6]
    3bfe:	06c0      	lsls	r0, r0, #27
    3c00:	0fc0      	lsrs	r0, r0, #31
	}
}
    3c02:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    3c04:	6802      	ldr	r2, [r0, #0]
    3c06:	3308      	adds	r3, #8
    3c08:	015b      	lsls	r3, r3, #5
    3c0a:	18d3      	adds	r3, r2, r3
    3c0c:	7998      	ldrb	r0, [r3, #6]
    3c0e:	0680      	lsls	r0, r0, #26
    3c10:	0fc0      	lsrs	r0, r0, #31
    3c12:	e7f6      	b.n	3c02 <usb_device_endpoint_is_halted+0x18>

00003c14 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c14:	230f      	movs	r3, #15
    3c16:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3c18:	b249      	sxtb	r1, r1
    3c1a:	2900      	cmp	r1, #0
    3c1c:	db06      	blt.n	3c2c <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3c1e:	6802      	ldr	r2, [r0, #0]
    3c20:	3308      	adds	r3, #8
    3c22:	015b      	lsls	r3, r3, #5
    3c24:	18d3      	adds	r3, r2, r3
    3c26:	2210      	movs	r2, #16
    3c28:	715a      	strb	r2, [r3, #5]
	}
}
    3c2a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3c2c:	6802      	ldr	r2, [r0, #0]
    3c2e:	3308      	adds	r3, #8
    3c30:	015b      	lsls	r3, r3, #5
    3c32:	18d3      	adds	r3, r2, r3
    3c34:	2220      	movs	r2, #32
    3c36:	715a      	strb	r2, [r3, #5]
    3c38:	e7f7      	b.n	3c2a <usb_device_endpoint_set_halt+0x16>

00003c3a <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3c3a:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c3c:	230f      	movs	r3, #15
    3c3e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3c40:	b249      	sxtb	r1, r1
    3c42:	2900      	cmp	r1, #0
    3c44:	db1d      	blt.n	3c82 <usb_device_endpoint_clear_halt+0x48>
    3c46:	0159      	lsls	r1, r3, #5
    3c48:	6802      	ldr	r2, [r0, #0]
    3c4a:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3c4c:	2483      	movs	r4, #131	; 0x83
    3c4e:	0064      	lsls	r4, r4, #1
    3c50:	5d14      	ldrb	r4, [r2, r4]
    3c52:	06e4      	lsls	r4, r4, #27
    3c54:	d514      	bpl.n	3c80 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    3c56:	2510      	movs	r5, #16
    3c58:	2482      	movs	r4, #130	; 0x82
    3c5a:	0064      	lsls	r4, r4, #1
    3c5c:	5515      	strb	r5, [r2, r4]
    3c5e:	6802      	ldr	r2, [r0, #0]
    3c60:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3c62:	2108      	movs	r1, #8
    3c64:	31ff      	adds	r1, #255	; 0xff
    3c66:	5c51      	ldrb	r1, [r2, r1]
    3c68:	0689      	lsls	r1, r1, #26
    3c6a:	d509      	bpl.n	3c80 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3c6c:	3ce4      	subs	r4, #228	; 0xe4
    3c6e:	2108      	movs	r1, #8
    3c70:	31ff      	adds	r1, #255	; 0xff
    3c72:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3c74:	6802      	ldr	r2, [r0, #0]
    3c76:	3308      	adds	r3, #8
    3c78:	015b      	lsls	r3, r3, #5
    3c7a:	18d3      	adds	r3, r2, r3
    3c7c:	2201      	movs	r2, #1
    3c7e:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    3c80:	bd30      	pop	{r4, r5, pc}
    3c82:	0159      	lsls	r1, r3, #5
    3c84:	6802      	ldr	r2, [r0, #0]
    3c86:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3c88:	2483      	movs	r4, #131	; 0x83
    3c8a:	0064      	lsls	r4, r4, #1
    3c8c:	5d14      	ldrb	r4, [r2, r4]
    3c8e:	06a4      	lsls	r4, r4, #26
    3c90:	d5f6      	bpl.n	3c80 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3c92:	2520      	movs	r5, #32
    3c94:	2482      	movs	r4, #130	; 0x82
    3c96:	0064      	lsls	r4, r4, #1
    3c98:	5515      	strb	r5, [r2, r4]
    3c9a:	6802      	ldr	r2, [r0, #0]
    3c9c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3c9e:	2108      	movs	r1, #8
    3ca0:	31ff      	adds	r1, #255	; 0xff
    3ca2:	5c51      	ldrb	r1, [r2, r1]
    3ca4:	0649      	lsls	r1, r1, #25
    3ca6:	d5eb      	bpl.n	3c80 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3ca8:	3cc4      	subs	r4, #196	; 0xc4
    3caa:	2108      	movs	r1, #8
    3cac:	31ff      	adds	r1, #255	; 0xff
    3cae:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3cb0:	6802      	ldr	r2, [r0, #0]
    3cb2:	3308      	adds	r3, #8
    3cb4:	015b      	lsls	r3, r3, #5
    3cb6:	18d3      	adds	r3, r2, r3
    3cb8:	2202      	movs	r2, #2
    3cba:	711a      	strb	r2, [r3, #4]
    3cbc:	e7e0      	b.n	3c80 <usb_device_endpoint_clear_halt+0x46>
	...

00003cc0 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3cc0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    3cc2:	000c      	movs	r4, r1
    3cc4:	3408      	adds	r4, #8
    3cc6:	0164      	lsls	r4, r4, #5
    3cc8:	6805      	ldr	r5, [r0, #0]
    3cca:	5d64      	ldrb	r4, [r4, r5]
    3ccc:	0664      	lsls	r4, r4, #25
    3cce:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3cd0:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3cd2:	2c00      	cmp	r4, #0
    3cd4:	d101      	bne.n	3cda <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    3cd6:	0028      	movs	r0, r5
    3cd8:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    3cda:	014c      	lsls	r4, r1, #5
    3cdc:	4d0b      	ldr	r5, [pc, #44]	; (3d0c <usb_device_endpoint_write_buffer_job+0x4c>)
    3cde:	192d      	adds	r5, r5, r4
    3ce0:	002c      	movs	r4, r5
    3ce2:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3ce4:	696a      	ldr	r2, [r5, #20]
    3ce6:	4d0a      	ldr	r5, [pc, #40]	; (3d10 <usb_device_endpoint_write_buffer_job+0x50>)
    3ce8:	402a      	ands	r2, r5
    3cea:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3cec:	6962      	ldr	r2, [r4, #20]
    3cee:	049b      	lsls	r3, r3, #18
    3cf0:	0c9b      	lsrs	r3, r3, #18
    3cf2:	0b92      	lsrs	r2, r2, #14
    3cf4:	0392      	lsls	r2, r2, #14
    3cf6:	4313      	orrs	r3, r2
    3cf8:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3cfa:	6803      	ldr	r3, [r0, #0]
    3cfc:	3108      	adds	r1, #8
    3cfe:	0149      	lsls	r1, r1, #5
    3d00:	1859      	adds	r1, r3, r1
    3d02:	2380      	movs	r3, #128	; 0x80
    3d04:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    3d06:	2500      	movs	r5, #0
    3d08:	e7e5      	b.n	3cd6 <usb_device_endpoint_write_buffer_job+0x16>
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	20000838 	.word	0x20000838
    3d10:	f0003fff 	.word	0xf0003fff

00003d14 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3d14:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    3d16:	000c      	movs	r4, r1
    3d18:	3408      	adds	r4, #8
    3d1a:	0164      	lsls	r4, r4, #5
    3d1c:	6805      	ldr	r5, [r0, #0]
    3d1e:	5d64      	ldrb	r4, [r4, r5]
    3d20:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3d22:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3d24:	2c00      	cmp	r4, #0
    3d26:	d101      	bne.n	3d2c <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3d28:	0028      	movs	r0, r5
    3d2a:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3d2c:	4c0b      	ldr	r4, [pc, #44]	; (3d5c <usb_device_endpoint_read_buffer_job+0x48>)
    3d2e:	014d      	lsls	r5, r1, #5
    3d30:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3d32:	1962      	adds	r2, r4, r5
    3d34:	6854      	ldr	r4, [r2, #4]
    3d36:	049b      	lsls	r3, r3, #18
    3d38:	091b      	lsrs	r3, r3, #4
    3d3a:	4d09      	ldr	r5, [pc, #36]	; (3d60 <usb_device_endpoint_read_buffer_job+0x4c>)
    3d3c:	402c      	ands	r4, r5
    3d3e:	4323      	orrs	r3, r4
    3d40:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3d42:	6853      	ldr	r3, [r2, #4]
    3d44:	0b9b      	lsrs	r3, r3, #14
    3d46:	039b      	lsls	r3, r3, #14
    3d48:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3d4a:	6803      	ldr	r3, [r0, #0]
    3d4c:	3108      	adds	r1, #8
    3d4e:	0149      	lsls	r1, r1, #5
    3d50:	1859      	adds	r1, r3, r1
    3d52:	2340      	movs	r3, #64	; 0x40
    3d54:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    3d56:	2500      	movs	r5, #0
    3d58:	e7e6      	b.n	3d28 <usb_device_endpoint_read_buffer_job+0x14>
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	20000838 	.word	0x20000838
    3d60:	f0003fff 	.word	0xf0003fff

00003d64 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3d64:	4b09      	ldr	r3, [pc, #36]	; (3d8c <usb_device_endpoint_setup_buffer_job+0x28>)
    3d66:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3d68:	685a      	ldr	r2, [r3, #4]
    3d6a:	4909      	ldr	r1, [pc, #36]	; (3d90 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3d6c:	4011      	ands	r1, r2
    3d6e:	2280      	movs	r2, #128	; 0x80
    3d70:	0292      	lsls	r2, r2, #10
    3d72:	430a      	orrs	r2, r1
    3d74:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3d76:	685a      	ldr	r2, [r3, #4]
    3d78:	0b92      	lsrs	r2, r2, #14
    3d7a:	0392      	lsls	r2, r2, #14
    3d7c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3d7e:	6802      	ldr	r2, [r0, #0]
    3d80:	2140      	movs	r1, #64	; 0x40
    3d82:	2382      	movs	r3, #130	; 0x82
    3d84:	005b      	lsls	r3, r3, #1
    3d86:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    3d88:	2000      	movs	r0, #0
    3d8a:	4770      	bx	lr
    3d8c:	20000838 	.word	0x20000838
    3d90:	f0003fff 	.word	0xf0003fff

00003d94 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3d94:	6802      	ldr	r2, [r0, #0]
    3d96:	7813      	ldrb	r3, [r2, #0]
    3d98:	2102      	movs	r1, #2
    3d9a:	430b      	orrs	r3, r1
    3d9c:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3d9e:	6802      	ldr	r2, [r0, #0]
    3da0:	7893      	ldrb	r3, [r2, #2]
    3da2:	2b02      	cmp	r3, #2
    3da4:	d0fc      	beq.n	3da0 <usb_enable+0xc>
}
    3da6:	4770      	bx	lr

00003da8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3daa:	46de      	mov	lr, fp
    3dac:	4657      	mov	r7, sl
    3dae:	464e      	mov	r6, r9
    3db0:	4645      	mov	r5, r8
    3db2:	b5e0      	push	{r5, r6, r7, lr}
    3db4:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3db6:	4bc2      	ldr	r3, [pc, #776]	; (40c0 <USB_Handler+0x318>)
    3db8:	681f      	ldr	r7, [r3, #0]
    3dba:	683d      	ldr	r5, [r7, #0]
    3dbc:	782b      	ldrb	r3, [r5, #0]
    3dbe:	09db      	lsrs	r3, r3, #7
    3dc0:	d114      	bne.n	3dec <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3dc2:	8c2e      	ldrh	r6, [r5, #32]
    3dc4:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3dc6:	2e00      	cmp	r6, #0
    3dc8:	d000      	beq.n	3dcc <USB_Handler+0x24>
    3dca:	e1a9      	b.n	4120 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3dcc:	8bae      	ldrh	r6, [r5, #28]
    3dce:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3dd0:	23ab      	movs	r3, #171	; 0xab
    3dd2:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3dd4:	5afb      	ldrh	r3, [r7, r3]
    3dd6:	22aa      	movs	r2, #170	; 0xaa
    3dd8:	0052      	lsls	r2, r2, #1
    3dda:	5abd      	ldrh	r5, [r7, r2]
    3ddc:	401d      	ands	r5, r3
    3dde:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3de0:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3de2:	4fb8      	ldr	r7, [pc, #736]	; (40c4 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3de4:	4bb6      	ldr	r3, [pc, #728]	; (40c0 <USB_Handler+0x318>)
    3de6:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3de8:	4698      	mov	r8, r3
    3dea:	e184      	b.n	40f6 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3dec:	8c2b      	ldrh	r3, [r5, #32]
    3dee:	b29b      	uxth	r3, r3
    3df0:	2b00      	cmp	r3, #0
    3df2:	d100      	bne.n	3df6 <USB_Handler+0x4e>
    3df4:	e0de      	b.n	3fb4 <USB_Handler+0x20c>
    3df6:	8c28      	ldrh	r0, [r5, #32]
    3df8:	b280      	uxth	r0, r0
    3dfa:	4bb3      	ldr	r3, [pc, #716]	; (40c8 <USB_Handler+0x320>)
    3dfc:	4798      	blx	r3
    3dfe:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3e00:	281f      	cmp	r0, #31
    3e02:	d900      	bls.n	3e06 <USB_Handler+0x5e>
    3e04:	e0d6      	b.n	3fb4 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3e06:	0003      	movs	r3, r0
    3e08:	3308      	adds	r3, #8
    3e0a:	015b      	lsls	r3, r3, #5
    3e0c:	18ed      	adds	r5, r5, r3
    3e0e:	79ed      	ldrb	r5, [r5, #7]
    3e10:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3e12:	07ab      	lsls	r3, r5, #30
    3e14:	d041      	beq.n	3e9a <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3e16:	4aad      	ldr	r2, [pc, #692]	; (40cc <USB_Handler+0x324>)
    3e18:	2301      	movs	r3, #1
    3e1a:	4083      	lsls	r3, r0
    3e1c:	6811      	ldr	r1, [r2, #0]
    3e1e:	4399      	bics	r1, r3
    3e20:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3e22:	0003      	movs	r3, r0
    3e24:	3308      	adds	r3, #8
    3e26:	015b      	lsls	r3, r3, #5
    3e28:	683a      	ldr	r2, [r7, #0]
    3e2a:	4694      	mov	ip, r2
    3e2c:	4463      	add	r3, ip
    3e2e:	2203      	movs	r2, #3
    3e30:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3e32:	183b      	adds	r3, r7, r0
    3e34:	33ae      	adds	r3, #174	; 0xae
    3e36:	781b      	ldrb	r3, [r3, #0]
    3e38:	07db      	lsls	r3, r3, #31
    3e3a:	d52e      	bpl.n	3e9a <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3e3c:	4ba4      	ldr	r3, [pc, #656]	; (40d0 <USB_Handler+0x328>)
    3e3e:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3e40:	683a      	ldr	r2, [r7, #0]
    3e42:	0003      	movs	r3, r0
    3e44:	3308      	adds	r3, #8
    3e46:	015b      	lsls	r3, r3, #5
    3e48:	5c9b      	ldrb	r3, [r3, r2]
    3e4a:	079b      	lsls	r3, r3, #30
    3e4c:	0f9b      	lsrs	r3, r3, #30
    3e4e:	2b01      	cmp	r3, #1
    3e50:	d100      	bne.n	3e54 <USB_Handler+0xac>
    3e52:	e081      	b.n	3f58 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3e54:	0142      	lsls	r2, r0, #5
    3e56:	4b9f      	ldr	r3, [pc, #636]	; (40d4 <USB_Handler+0x32c>)
    3e58:	189b      	adds	r3, r3, r2
    3e5a:	685a      	ldr	r2, [r3, #4]
    3e5c:	0112      	lsls	r2, r2, #4
    3e5e:	0c92      	lsrs	r2, r2, #18
    3e60:	b290      	uxth	r0, r2
    3e62:	499b      	ldr	r1, [pc, #620]	; (40d0 <USB_Handler+0x328>)
    3e64:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3e66:	685a      	ldr	r2, [r3, #4]
    3e68:	0492      	lsls	r2, r2, #18
    3e6a:	0c92      	lsrs	r2, r2, #18
    3e6c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3e6e:	685a      	ldr	r2, [r3, #4]
    3e70:	4999      	ldr	r1, [pc, #612]	; (40d8 <USB_Handler+0x330>)
    3e72:	400a      	ands	r2, r1
    3e74:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3e76:	2800      	cmp	r0, #0
    3e78:	d107      	bne.n	3e8a <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3e7a:	0162      	lsls	r2, r4, #5
    3e7c:	4b95      	ldr	r3, [pc, #596]	; (40d4 <USB_Handler+0x32c>)
    3e7e:	189b      	adds	r3, r3, r2
    3e80:	685b      	ldr	r3, [r3, #4]
    3e82:	049b      	lsls	r3, r3, #18
    3e84:	0c9b      	lsrs	r3, r3, #18
    3e86:	4a92      	ldr	r2, [pc, #584]	; (40d0 <USB_Handler+0x328>)
    3e88:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3e8a:	4b8d      	ldr	r3, [pc, #564]	; (40c0 <USB_Handler+0x318>)
    3e8c:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3e8e:	1ca3      	adds	r3, r4, #2
    3e90:	011b      	lsls	r3, r3, #4
    3e92:	18c3      	adds	r3, r0, r3
    3e94:	685b      	ldr	r3, [r3, #4]
    3e96:	498e      	ldr	r1, [pc, #568]	; (40d0 <USB_Handler+0x328>)
    3e98:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3e9a:	076b      	lsls	r3, r5, #29
    3e9c:	d50e      	bpl.n	3ebc <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3e9e:	4a8b      	ldr	r2, [pc, #556]	; (40cc <USB_Handler+0x324>)
    3ea0:	2301      	movs	r3, #1
    3ea2:	40a3      	lsls	r3, r4
    3ea4:	6811      	ldr	r1, [r2, #0]
    3ea6:	4399      	bics	r1, r3
    3ea8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3eaa:	4b85      	ldr	r3, [pc, #532]	; (40c0 <USB_Handler+0x318>)
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	0022      	movs	r2, r4
    3eb2:	3208      	adds	r2, #8
    3eb4:	0152      	lsls	r2, r2, #5
    3eb6:	189b      	adds	r3, r3, r2
    3eb8:	2204      	movs	r2, #4
    3eba:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3ebc:	072b      	lsls	r3, r5, #28
    3ebe:	d514      	bpl.n	3eea <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3ec0:	4a82      	ldr	r2, [pc, #520]	; (40cc <USB_Handler+0x324>)
    3ec2:	2301      	movs	r3, #1
    3ec4:	40a3      	lsls	r3, r4
    3ec6:	6811      	ldr	r1, [r2, #0]
    3ec8:	4399      	bics	r1, r3
    3eca:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ecc:	4b7c      	ldr	r3, [pc, #496]	; (40c0 <USB_Handler+0x318>)
    3ece:	6818      	ldr	r0, [r3, #0]
    3ed0:	0023      	movs	r3, r4
    3ed2:	3308      	adds	r3, #8
    3ed4:	015b      	lsls	r3, r3, #5
    3ed6:	6802      	ldr	r2, [r0, #0]
    3ed8:	4694      	mov	ip, r2
    3eda:	4463      	add	r3, ip
    3edc:	2208      	movs	r2, #8
    3ede:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3ee0:	1903      	adds	r3, r0, r4
    3ee2:	33ae      	adds	r3, #174	; 0xae
    3ee4:	781b      	ldrb	r3, [r3, #0]
    3ee6:	079b      	lsls	r3, r3, #30
    3ee8:	d447      	bmi.n	3f7a <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3eea:	06eb      	lsls	r3, r5, #27
    3eec:	d514      	bpl.n	3f18 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3eee:	4a77      	ldr	r2, [pc, #476]	; (40cc <USB_Handler+0x324>)
    3ef0:	2301      	movs	r3, #1
    3ef2:	40a3      	lsls	r3, r4
    3ef4:	6811      	ldr	r1, [r2, #0]
    3ef6:	4399      	bics	r1, r3
    3ef8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3efa:	4b71      	ldr	r3, [pc, #452]	; (40c0 <USB_Handler+0x318>)
    3efc:	6818      	ldr	r0, [r3, #0]
    3efe:	0023      	movs	r3, r4
    3f00:	3308      	adds	r3, #8
    3f02:	015b      	lsls	r3, r3, #5
    3f04:	6802      	ldr	r2, [r0, #0]
    3f06:	4694      	mov	ip, r2
    3f08:	4463      	add	r3, ip
    3f0a:	2210      	movs	r2, #16
    3f0c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3f0e:	1903      	adds	r3, r0, r4
    3f10:	33ae      	adds	r3, #174	; 0xae
    3f12:	781b      	ldrb	r3, [r3, #0]
    3f14:	075b      	lsls	r3, r3, #29
    3f16:	d43e      	bmi.n	3f96 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3f18:	06ab      	lsls	r3, r5, #26
    3f1a:	d400      	bmi.n	3f1e <USB_Handler+0x176>
    3f1c:	e0b0      	b.n	4080 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3f1e:	4a6b      	ldr	r2, [pc, #428]	; (40cc <USB_Handler+0x324>)
    3f20:	2301      	movs	r3, #1
    3f22:	40a3      	lsls	r3, r4
    3f24:	6811      	ldr	r1, [r2, #0]
    3f26:	4399      	bics	r1, r3
    3f28:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3f2a:	4b65      	ldr	r3, [pc, #404]	; (40c0 <USB_Handler+0x318>)
    3f2c:	6818      	ldr	r0, [r3, #0]
    3f2e:	0023      	movs	r3, r4
    3f30:	3308      	adds	r3, #8
    3f32:	015b      	lsls	r3, r3, #5
    3f34:	6802      	ldr	r2, [r0, #0]
    3f36:	4694      	mov	ip, r2
    3f38:	4463      	add	r3, ip
    3f3a:	2220      	movs	r2, #32
    3f3c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3f3e:	1903      	adds	r3, r0, r4
    3f40:	33ae      	adds	r3, #174	; 0xae
    3f42:	781b      	ldrb	r3, [r3, #0]
    3f44:	071b      	lsls	r3, r3, #28
    3f46:	d400      	bmi.n	3f4a <USB_Handler+0x1a2>
    3f48:	e09a      	b.n	4080 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    3f4a:	4961      	ldr	r1, [pc, #388]	; (40d0 <USB_Handler+0x328>)
    3f4c:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3f4e:	0124      	lsls	r4, r4, #4
    3f50:	1904      	adds	r4, r0, r4
    3f52:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3f54:	4798      	blx	r3
    3f56:	e093      	b.n	4080 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3f58:	0142      	lsls	r2, r0, #5
    3f5a:	4b5e      	ldr	r3, [pc, #376]	; (40d4 <USB_Handler+0x32c>)
    3f5c:	189b      	adds	r3, r3, r2
    3f5e:	685a      	ldr	r2, [r3, #4]
    3f60:	0492      	lsls	r2, r2, #18
    3f62:	0c92      	lsrs	r2, r2, #18
    3f64:	495a      	ldr	r1, [pc, #360]	; (40d0 <USB_Handler+0x328>)
    3f66:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3f68:	685a      	ldr	r2, [r3, #4]
    3f6a:	0112      	lsls	r2, r2, #4
    3f6c:	0c92      	lsrs	r2, r2, #18
    3f6e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3f70:	685a      	ldr	r2, [r3, #4]
    3f72:	0b92      	lsrs	r2, r2, #14
    3f74:	0392      	lsls	r2, r2, #14
    3f76:	605a      	str	r2, [r3, #4]
    3f78:	e787      	b.n	3e8a <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    3f7a:	4955      	ldr	r1, [pc, #340]	; (40d0 <USB_Handler+0x328>)
    3f7c:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3f7e:	0162      	lsls	r2, r4, #5
    3f80:	4b54      	ldr	r3, [pc, #336]	; (40d4 <USB_Handler+0x32c>)
    3f82:	189b      	adds	r3, r3, r2
    3f84:	89db      	ldrh	r3, [r3, #14]
    3f86:	221f      	movs	r2, #31
    3f88:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3f8a:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3f8c:	0123      	lsls	r3, r4, #4
    3f8e:	18c3      	adds	r3, r0, r3
    3f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f92:	4798      	blx	r3
    3f94:	e7a9      	b.n	3eea <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    3f96:	494e      	ldr	r1, [pc, #312]	; (40d0 <USB_Handler+0x328>)
    3f98:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3f9a:	0162      	lsls	r2, r4, #5
    3f9c:	4b4d      	ldr	r3, [pc, #308]	; (40d4 <USB_Handler+0x32c>)
    3f9e:	189b      	adds	r3, r3, r2
    3fa0:	685b      	ldr	r3, [r3, #4]
    3fa2:	011b      	lsls	r3, r3, #4
    3fa4:	0c9b      	lsrs	r3, r3, #18
    3fa6:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3fa8:	0123      	lsls	r3, r4, #4
    3faa:	18c3      	adds	r3, r0, r3
    3fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fae:	2100      	movs	r1, #0
    3fb0:	4798      	blx	r3
    3fb2:	e7b1      	b.n	3f18 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3fb4:	8bac      	ldrh	r4, [r5, #28]
    3fb6:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3fb8:	0763      	lsls	r3, r4, #29
    3fba:	d505      	bpl.n	3fc8 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3fbc:	2304      	movs	r3, #4
    3fbe:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3fc0:	33a1      	adds	r3, #161	; 0xa1
    3fc2:	5cfb      	ldrb	r3, [r7, r3]
    3fc4:	07db      	lsls	r3, r3, #31
    3fc6:	d462      	bmi.n	408e <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    3fc8:	0723      	lsls	r3, r4, #28
    3fca:	d50b      	bpl.n	3fe4 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    3fcc:	2200      	movs	r2, #0
    3fce:	4b3f      	ldr	r3, [pc, #252]	; (40cc <USB_Handler+0x324>)
    3fd0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3fd2:	4b3b      	ldr	r3, [pc, #236]	; (40c0 <USB_Handler+0x318>)
    3fd4:	6818      	ldr	r0, [r3, #0]
    3fd6:	2308      	movs	r3, #8
    3fd8:	6802      	ldr	r2, [r0, #0]
    3fda:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3fdc:	339d      	adds	r3, #157	; 0x9d
    3fde:	5cc3      	ldrb	r3, [r0, r3]
    3fe0:	079b      	lsls	r3, r3, #30
    3fe2:	d458      	bmi.n	4096 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3fe4:	0663      	lsls	r3, r4, #25
    3fe6:	d508      	bpl.n	3ffa <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3fe8:	4b35      	ldr	r3, [pc, #212]	; (40c0 <USB_Handler+0x318>)
    3fea:	6818      	ldr	r0, [r3, #0]
    3fec:	2340      	movs	r3, #64	; 0x40
    3fee:	6802      	ldr	r2, [r0, #0]
    3ff0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3ff2:	3365      	adds	r3, #101	; 0x65
    3ff4:	5cc3      	ldrb	r3, [r0, r3]
    3ff6:	06db      	lsls	r3, r3, #27
    3ff8:	d450      	bmi.n	409c <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3ffa:	06a3      	lsls	r3, r4, #26
    3ffc:	d508      	bpl.n	4010 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3ffe:	4b30      	ldr	r3, [pc, #192]	; (40c0 <USB_Handler+0x318>)
    4000:	6818      	ldr	r0, [r3, #0]
    4002:	2320      	movs	r3, #32
    4004:	6802      	ldr	r2, [r0, #0]
    4006:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4008:	3385      	adds	r3, #133	; 0x85
    400a:	5cc3      	ldrb	r3, [r0, r3]
    400c:	071b      	lsls	r3, r3, #28
    400e:	d448      	bmi.n	40a2 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4010:	06e3      	lsls	r3, r4, #27
    4012:	d508      	bpl.n	4026 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4014:	4b2a      	ldr	r3, [pc, #168]	; (40c0 <USB_Handler+0x318>)
    4016:	6818      	ldr	r0, [r3, #0]
    4018:	2310      	movs	r3, #16
    401a:	6802      	ldr	r2, [r0, #0]
    401c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    401e:	3395      	adds	r3, #149	; 0x95
    4020:	5cc3      	ldrb	r3, [r0, r3]
    4022:	075b      	lsls	r3, r3, #29
    4024:	d440      	bmi.n	40a8 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4026:	0623      	lsls	r3, r4, #24
    4028:	d50b      	bpl.n	4042 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    402a:	2200      	movs	r2, #0
    402c:	4b27      	ldr	r3, [pc, #156]	; (40cc <USB_Handler+0x324>)
    402e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4030:	4b23      	ldr	r3, [pc, #140]	; (40c0 <USB_Handler+0x318>)
    4032:	6818      	ldr	r0, [r3, #0]
    4034:	2380      	movs	r3, #128	; 0x80
    4036:	6802      	ldr	r2, [r0, #0]
    4038:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    403a:	3325      	adds	r3, #37	; 0x25
    403c:	5cc3      	ldrb	r3, [r0, r3]
    403e:	069b      	lsls	r3, r3, #26
    4040:	d435      	bmi.n	40ae <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4042:	05e3      	lsls	r3, r4, #23
    4044:	d50c      	bpl.n	4060 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4046:	2200      	movs	r2, #0
    4048:	4b20      	ldr	r3, [pc, #128]	; (40cc <USB_Handler+0x324>)
    404a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    404c:	4b1c      	ldr	r3, [pc, #112]	; (40c0 <USB_Handler+0x318>)
    404e:	6818      	ldr	r0, [r3, #0]
    4050:	2380      	movs	r3, #128	; 0x80
    4052:	005b      	lsls	r3, r3, #1
    4054:	6802      	ldr	r2, [r0, #0]
    4056:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4058:	3b5b      	subs	r3, #91	; 0x5b
    405a:	5cc3      	ldrb	r3, [r0, r3]
    405c:	065b      	lsls	r3, r3, #25
    405e:	d429      	bmi.n	40b4 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4060:	05a3      	lsls	r3, r4, #22
    4062:	d50d      	bpl.n	4080 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4064:	2200      	movs	r2, #0
    4066:	4b19      	ldr	r3, [pc, #100]	; (40cc <USB_Handler+0x324>)
    4068:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    406a:	4b15      	ldr	r3, [pc, #84]	; (40c0 <USB_Handler+0x318>)
    406c:	6818      	ldr	r0, [r3, #0]
    406e:	2380      	movs	r3, #128	; 0x80
    4070:	009b      	lsls	r3, r3, #2
    4072:	6802      	ldr	r2, [r0, #0]
    4074:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4076:	3b5c      	subs	r3, #92	; 0x5c
    4078:	3bff      	subs	r3, #255	; 0xff
    407a:	5cc3      	ldrb	r3, [r0, r3]
    407c:	2b7f      	cmp	r3, #127	; 0x7f
    407e:	d81c      	bhi.n	40ba <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4080:	b003      	add	sp, #12
    4082:	bc3c      	pop	{r2, r3, r4, r5}
    4084:	4690      	mov	r8, r2
    4086:	4699      	mov	r9, r3
    4088:	46a2      	mov	sl, r4
    408a:	46ab      	mov	fp, r5
    408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	0038      	movs	r0, r7
    4092:	4798      	blx	r3
    4094:	e798      	b.n	3fc8 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4096:	6883      	ldr	r3, [r0, #8]
    4098:	4798      	blx	r3
    409a:	e7a3      	b.n	3fe4 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    409c:	6943      	ldr	r3, [r0, #20]
    409e:	4798      	blx	r3
    40a0:	e7ab      	b.n	3ffa <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    40a2:	6903      	ldr	r3, [r0, #16]
    40a4:	4798      	blx	r3
    40a6:	e7b3      	b.n	4010 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    40a8:	68c3      	ldr	r3, [r0, #12]
    40aa:	4798      	blx	r3
    40ac:	e7bb      	b.n	4026 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    40ae:	6983      	ldr	r3, [r0, #24]
    40b0:	4798      	blx	r3
    40b2:	e7c6      	b.n	4042 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    40b4:	69c3      	ldr	r3, [r0, #28]
    40b6:	4798      	blx	r3
    40b8:	e7d2      	b.n	4060 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    40ba:	6a03      	ldr	r3, [r0, #32]
    40bc:	4798      	blx	r3
    40be:	e7df      	b.n	4080 <USB_Handler+0x2d8>
    40c0:	200003d4 	.word	0x200003d4
    40c4:	00006f64 	.word	0x00006f64
    40c8:	00004f0d 	.word	0x00004f0d
    40cc:	200003e4 	.word	0x200003e4
    40d0:	200003e8 	.word	0x200003e8
    40d4:	20000838 	.word	0x20000838
    40d8:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    40dc:	0023      	movs	r3, r4
    40de:	332e      	adds	r3, #46	; 0x2e
    40e0:	009b      	lsls	r3, r3, #2
    40e2:	4642      	mov	r2, r8
    40e4:	6812      	ldr	r2, [r2, #0]
    40e6:	589b      	ldr	r3, [r3, r2]
    40e8:	499e      	ldr	r1, [pc, #632]	; (4364 <USB_Handler+0x5bc>)
    40ea:	4642      	mov	r2, r8
    40ec:	6810      	ldr	r0, [r2, #0]
    40ee:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    40f0:	3401      	adds	r4, #1
    40f2:	2c07      	cmp	r4, #7
    40f4:	d0c4      	beq.n	4080 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    40f6:	0063      	lsls	r3, r4, #1
    40f8:	5bdb      	ldrh	r3, [r3, r7]
    40fa:	4233      	tst	r3, r6
    40fc:	d003      	beq.n	4106 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    40fe:	464a      	mov	r2, r9
    4100:	6812      	ldr	r2, [r2, #0]
    4102:	6812      	ldr	r2, [r2, #0]
    4104:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4106:	422b      	tst	r3, r5
    4108:	d0f2      	beq.n	40f0 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    410a:	2c06      	cmp	r4, #6
    410c:	d1e6      	bne.n	40dc <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    410e:	4b96      	ldr	r3, [pc, #600]	; (4368 <USB_Handler+0x5c0>)
    4110:	891b      	ldrh	r3, [r3, #8]
    4112:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4114:	2280      	movs	r2, #128	; 0x80
    4116:	0052      	lsls	r2, r2, #1
    4118:	4013      	ands	r3, r2
    411a:	4a92      	ldr	r2, [pc, #584]	; (4364 <USB_Handler+0x5bc>)
    411c:	6013      	str	r3, [r2, #0]
    411e:	e7dd      	b.n	40dc <USB_Handler+0x334>
    4120:	003c      	movs	r4, r7
    4122:	3459      	adds	r4, #89	; 0x59
    4124:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    4126:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    4128:	2201      	movs	r2, #1
    412a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    412c:	325f      	adds	r2, #95	; 0x5f
    412e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4130:	3a50      	subs	r2, #80	; 0x50
    4132:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4134:	3a0d      	subs	r2, #13
    4136:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4138:	46b8      	mov	r8, r7
    413a:	002f      	movs	r7, r5
    413c:	e0b9      	b.n	42b2 <USB_Handler+0x50a>
    413e:	002a      	movs	r2, r5
    4140:	003d      	movs	r5, r7
    4142:	4647      	mov	r7, r8
    4144:	4690      	mov	r8, r2
    4146:	015b      	lsls	r3, r3, #5
    4148:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    414a:	2308      	movs	r3, #8
    414c:	33ff      	adds	r3, #255	; 0xff
    414e:	5ceb      	ldrb	r3, [r5, r3]
    4150:	065b      	lsls	r3, r3, #25
    4152:	d516      	bpl.n	4182 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4154:	2240      	movs	r2, #64	; 0x40
    4156:	2308      	movs	r3, #8
    4158:	33ff      	adds	r3, #255	; 0xff
    415a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    415c:	3b88      	subs	r3, #136	; 0x88
    415e:	3bff      	subs	r3, #255	; 0xff
    4160:	4642      	mov	r2, r8
    4162:	4313      	orrs	r3, r2
    4164:	4a81      	ldr	r2, [pc, #516]	; (436c <USB_Handler+0x5c4>)
    4166:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4168:	2360      	movs	r3, #96	; 0x60
    416a:	420b      	tst	r3, r1
    416c:	d100      	bne.n	4170 <USB_Handler+0x3c8>
    416e:	e787      	b.n	4080 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4170:	9b01      	ldr	r3, [sp, #4]
    4172:	011b      	lsls	r3, r3, #4
    4174:	18fb      	adds	r3, r7, r3
    4176:	33e0      	adds	r3, #224	; 0xe0
    4178:	681b      	ldr	r3, [r3, #0]
    417a:	497c      	ldr	r1, [pc, #496]	; (436c <USB_Handler+0x5c4>)
    417c:	0038      	movs	r0, r7
    417e:	4798      	blx	r3
    4180:	e77e      	b.n	4080 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4182:	2308      	movs	r3, #8
    4184:	33ff      	adds	r3, #255	; 0xff
    4186:	5ceb      	ldrb	r3, [r5, r3]
    4188:	069b      	lsls	r3, r3, #26
    418a:	d5ed      	bpl.n	4168 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    418c:	2220      	movs	r2, #32
    418e:	2308      	movs	r3, #8
    4190:	33ff      	adds	r3, #255	; 0xff
    4192:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4194:	4b75      	ldr	r3, [pc, #468]	; (436c <USB_Handler+0x5c4>)
    4196:	4642      	mov	r2, r8
    4198:	719a      	strb	r2, [r3, #6]
    419a:	e7e5      	b.n	4168 <USB_Handler+0x3c0>
    419c:	003d      	movs	r5, r7
    419e:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    41a0:	9a01      	ldr	r2, [sp, #4]
    41a2:	0013      	movs	r3, r2
    41a4:	3308      	adds	r3, #8
    41a6:	015b      	lsls	r3, r3, #5
    41a8:	18ed      	adds	r5, r5, r3
    41aa:	2310      	movs	r3, #16
    41ac:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    41ae:	18bb      	adds	r3, r7, r2
    41b0:	3361      	adds	r3, #97	; 0x61
    41b2:	33ff      	adds	r3, #255	; 0xff
    41b4:	781b      	ldrb	r3, [r3, #0]
    41b6:	06db      	lsls	r3, r3, #27
    41b8:	d400      	bmi.n	41bc <USB_Handler+0x414>
    41ba:	e761      	b.n	4080 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    41bc:	0010      	movs	r0, r2
    41be:	0152      	lsls	r2, r2, #5
    41c0:	4b69      	ldr	r3, [pc, #420]	; (4368 <USB_Handler+0x5c0>)
    41c2:	189b      	adds	r3, r3, r2
    41c4:	685b      	ldr	r3, [r3, #4]
    41c6:	049b      	lsls	r3, r3, #18
    41c8:	0c9b      	lsrs	r3, r3, #18
    41ca:	4968      	ldr	r1, [pc, #416]	; (436c <USB_Handler+0x5c4>)
    41cc:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    41ce:	0103      	lsls	r3, r0, #4
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	33dc      	adds	r3, #220	; 0xdc
    41d4:	681b      	ldr	r3, [r3, #0]
    41d6:	4640      	mov	r0, r8
    41d8:	4798      	blx	r3
    41da:	e751      	b.n	4080 <USB_Handler+0x2d8>
    41dc:	002a      	movs	r2, r5
    41de:	003d      	movs	r5, r7
    41e0:	4647      	mov	r7, r8
    41e2:	4690      	mov	r8, r2
    41e4:	015b      	lsls	r3, r3, #5
    41e6:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    41e8:	2308      	movs	r3, #8
    41ea:	33ff      	adds	r3, #255	; 0xff
    41ec:	5ceb      	ldrb	r3, [r5, r3]
    41ee:	079b      	lsls	r3, r3, #30
    41f0:	d51e      	bpl.n	4230 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    41f2:	2202      	movs	r2, #2
    41f4:	2308      	movs	r3, #8
    41f6:	33ff      	adds	r3, #255	; 0xff
    41f8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    41fa:	485c      	ldr	r0, [pc, #368]	; (436c <USB_Handler+0x5c4>)
    41fc:	3b88      	subs	r3, #136	; 0x88
    41fe:	3bff      	subs	r3, #255	; 0xff
    4200:	4642      	mov	r2, r8
    4202:	4313      	orrs	r3, r2
    4204:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4206:	9b01      	ldr	r3, [sp, #4]
    4208:	015a      	lsls	r2, r3, #5
    420a:	4b57      	ldr	r3, [pc, #348]	; (4368 <USB_Handler+0x5c0>)
    420c:	189b      	adds	r3, r3, r2
    420e:	3310      	adds	r3, #16
    4210:	685b      	ldr	r3, [r3, #4]
    4212:	049b      	lsls	r3, r3, #18
    4214:	0c9b      	lsrs	r3, r3, #18
    4216:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4218:	078b      	lsls	r3, r1, #30
    421a:	d100      	bne.n	421e <USB_Handler+0x476>
    421c:	e730      	b.n	4080 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	330d      	adds	r3, #13
    4222:	011b      	lsls	r3, r3, #4
    4224:	18fb      	adds	r3, r7, r3
    4226:	685b      	ldr	r3, [r3, #4]
    4228:	4950      	ldr	r1, [pc, #320]	; (436c <USB_Handler+0x5c4>)
    422a:	0038      	movs	r0, r7
    422c:	4798      	blx	r3
    422e:	e727      	b.n	4080 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4230:	2308      	movs	r3, #8
    4232:	33ff      	adds	r3, #255	; 0xff
    4234:	5ceb      	ldrb	r3, [r5, r3]
    4236:	07db      	lsls	r3, r3, #31
    4238:	d5ee      	bpl.n	4218 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    423a:	2201      	movs	r2, #1
    423c:	2308      	movs	r3, #8
    423e:	33ff      	adds	r3, #255	; 0xff
    4240:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4242:	484a      	ldr	r0, [pc, #296]	; (436c <USB_Handler+0x5c4>)
    4244:	4643      	mov	r3, r8
    4246:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	015b      	lsls	r3, r3, #5
    424c:	4a46      	ldr	r2, [pc, #280]	; (4368 <USB_Handler+0x5c0>)
    424e:	18d2      	adds	r2, r2, r3
    4250:	6853      	ldr	r3, [r2, #4]
    4252:	049b      	lsls	r3, r3, #18
    4254:	0c9b      	lsrs	r3, r3, #18
    4256:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4258:	6853      	ldr	r3, [r2, #4]
    425a:	011b      	lsls	r3, r3, #4
    425c:	0c9b      	lsrs	r3, r3, #18
    425e:	8083      	strh	r3, [r0, #4]
    4260:	e7da      	b.n	4218 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4262:	2208      	movs	r2, #8
    4264:	32ff      	adds	r2, #255	; 0xff
    4266:	5c9a      	ldrb	r2, [r3, r2]
    4268:	0752      	lsls	r2, r2, #29
    426a:	d56e      	bpl.n	434a <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    426c:	2004      	movs	r0, #4
    426e:	2208      	movs	r2, #8
    4270:	32ff      	adds	r2, #255	; 0xff
    4272:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4274:	9801      	ldr	r0, [sp, #4]
    4276:	0142      	lsls	r2, r0, #5
    4278:	4b3b      	ldr	r3, [pc, #236]	; (4368 <USB_Handler+0x5c0>)
    427a:	189b      	adds	r3, r3, r2
    427c:	7a9b      	ldrb	r3, [r3, #10]
    427e:	079b      	lsls	r3, r3, #30
    4280:	d505      	bpl.n	428e <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4282:	4b39      	ldr	r3, [pc, #228]	; (4368 <USB_Handler+0x5c0>)
    4284:	189b      	adds	r3, r3, r2
    4286:	7a9a      	ldrb	r2, [r3, #10]
    4288:	2002      	movs	r0, #2
    428a:	4382      	bics	r2, r0
    428c:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    428e:	4b37      	ldr	r3, [pc, #220]	; (436c <USB_Handler+0x5c4>)
    4290:	4642      	mov	r2, r8
    4292:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4294:	9b01      	ldr	r3, [sp, #4]
    4296:	3308      	adds	r3, #8
    4298:	015b      	lsls	r3, r3, #5
    429a:	683a      	ldr	r2, [r7, #0]
    429c:	4694      	mov	ip, r2
    429e:	4463      	add	r3, ip
    42a0:	79db      	ldrb	r3, [r3, #7]
    42a2:	07db      	lsls	r3, r3, #31
    42a4:	d551      	bpl.n	434a <USB_Handler+0x5a2>
    42a6:	e6eb      	b.n	4080 <USB_Handler+0x2d8>
    42a8:	3301      	adds	r3, #1
    42aa:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    42ac:	2b08      	cmp	r3, #8
    42ae:	d100      	bne.n	42b2 <USB_Handler+0x50a>
    42b0:	e6e6      	b.n	4080 <USB_Handler+0x2d8>
    42b2:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    42b4:	9301      	str	r3, [sp, #4]
    42b6:	0032      	movs	r2, r6
    42b8:	411a      	asrs	r2, r3
    42ba:	4661      	mov	r1, ip
    42bc:	4211      	tst	r1, r2
    42be:	d0f3      	beq.n	42a8 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    42c0:	001a      	movs	r2, r3
    42c2:	3208      	adds	r2, #8
    42c4:	0152      	lsls	r2, r2, #5
    42c6:	18ba      	adds	r2, r7, r2
    42c8:	79d2      	ldrb	r2, [r2, #7]
    42ca:	b2d2      	uxtb	r2, r2
    42cc:	7a21      	ldrb	r1, [r4, #8]
    42ce:	4011      	ands	r1, r2
    42d0:	7820      	ldrb	r0, [r4, #0]
    42d2:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    42d4:	4648      	mov	r0, r9
    42d6:	4210      	tst	r0, r2
    42d8:	d000      	beq.n	42dc <USB_Handler+0x534>
    42da:	e730      	b.n	413e <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    42dc:	4650      	mov	r0, sl
    42de:	4210      	tst	r0, r2
    42e0:	d000      	beq.n	42e4 <USB_Handler+0x53c>
    42e2:	e75b      	b.n	419c <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    42e4:	4658      	mov	r0, fp
    42e6:	4210      	tst	r0, r2
    42e8:	d000      	beq.n	42ec <USB_Handler+0x544>
    42ea:	e777      	b.n	41dc <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    42ec:	200c      	movs	r0, #12
    42ee:	4210      	tst	r0, r2
    42f0:	d0da      	beq.n	42a8 <USB_Handler+0x500>
    42f2:	002a      	movs	r2, r5
    42f4:	003d      	movs	r5, r7
    42f6:	4647      	mov	r7, r8
    42f8:	4690      	mov	r8, r2
    42fa:	015b      	lsls	r3, r3, #5
    42fc:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    42fe:	2208      	movs	r2, #8
    4300:	32ff      	adds	r2, #255	; 0xff
    4302:	5c9a      	ldrb	r2, [r3, r2]
    4304:	0712      	lsls	r2, r2, #28
    4306:	d5ac      	bpl.n	4262 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4308:	3804      	subs	r0, #4
    430a:	2208      	movs	r2, #8
    430c:	32ff      	adds	r2, #255	; 0xff
    430e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4310:	9801      	ldr	r0, [sp, #4]
    4312:	0142      	lsls	r2, r0, #5
    4314:	4b14      	ldr	r3, [pc, #80]	; (4368 <USB_Handler+0x5c0>)
    4316:	189b      	adds	r3, r3, r2
    4318:	7e9b      	ldrb	r3, [r3, #26]
    431a:	079b      	lsls	r3, r3, #30
    431c:	d505      	bpl.n	432a <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    431e:	4b12      	ldr	r3, [pc, #72]	; (4368 <USB_Handler+0x5c0>)
    4320:	189b      	adds	r3, r3, r2
    4322:	7e9a      	ldrb	r2, [r3, #26]
    4324:	2002      	movs	r0, #2
    4326:	4382      	bics	r2, r0
    4328:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    432a:	2380      	movs	r3, #128	; 0x80
    432c:	425b      	negs	r3, r3
    432e:	4642      	mov	r2, r8
    4330:	4313      	orrs	r3, r2
    4332:	4a0e      	ldr	r2, [pc, #56]	; (436c <USB_Handler+0x5c4>)
    4334:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4336:	9b01      	ldr	r3, [sp, #4]
    4338:	3308      	adds	r3, #8
    433a:	015b      	lsls	r3, r3, #5
    433c:	683a      	ldr	r2, [r7, #0]
    433e:	4694      	mov	ip, r2
    4340:	4463      	add	r3, ip
    4342:	79db      	ldrb	r3, [r3, #7]
    4344:	079b      	lsls	r3, r3, #30
    4346:	d500      	bpl.n	434a <USB_Handler+0x5a2>
    4348:	e69a      	b.n	4080 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    434a:	230c      	movs	r3, #12
    434c:	420b      	tst	r3, r1
    434e:	d100      	bne.n	4352 <USB_Handler+0x5aa>
    4350:	e696      	b.n	4080 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4352:	9b01      	ldr	r3, [sp, #4]
    4354:	011b      	lsls	r3, r3, #4
    4356:	18fb      	adds	r3, r7, r3
    4358:	33d8      	adds	r3, #216	; 0xd8
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	4903      	ldr	r1, [pc, #12]	; (436c <USB_Handler+0x5c4>)
    435e:	0038      	movs	r0, r7
    4360:	4798      	blx	r3
    4362:	e68d      	b.n	4080 <USB_Handler+0x2d8>
    4364:	200003d8 	.word	0x200003d8
    4368:	20000838 	.word	0x20000838
    436c:	200003dc 	.word	0x200003dc

00004370 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4370:	2200      	movs	r2, #0
    4372:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4374:	2301      	movs	r3, #1
    4376:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4378:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    437a:	70c3      	strb	r3, [r0, #3]
}
    437c:	4770      	bx	lr
	...

00004380 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4380:	b5f0      	push	{r4, r5, r6, r7, lr}
    4382:	46ce      	mov	lr, r9
    4384:	4647      	mov	r7, r8
    4386:	b580      	push	{r7, lr}
    4388:	b083      	sub	sp, #12
    438a:	0004      	movs	r4, r0
    438c:	000d      	movs	r5, r1
    438e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4390:	2300      	movs	r3, #0
    4392:	4a6e      	ldr	r2, [pc, #440]	; (454c <usb_init+0x1cc>)
    4394:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4396:	4a6e      	ldr	r2, [pc, #440]	; (4550 <usb_init+0x1d0>)
    4398:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    439a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    439c:	496d      	ldr	r1, [pc, #436]	; (4554 <usb_init+0x1d4>)
    439e:	69ca      	ldr	r2, [r1, #28]
    43a0:	2020      	movs	r0, #32
    43a2:	4302      	orrs	r2, r0
    43a4:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    43a6:	af01      	add	r7, sp, #4
    43a8:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    43aa:	2201      	movs	r2, #1
    43ac:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    43ae:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    43b0:	3306      	adds	r3, #6
    43b2:	4699      	mov	r9, r3
    43b4:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    43b6:	0039      	movs	r1, r7
    43b8:	3808      	subs	r0, #8
    43ba:	4b67      	ldr	r3, [pc, #412]	; (4558 <usb_init+0x1d8>)
    43bc:	4698      	mov	r8, r3
    43be:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    43c0:	464b      	mov	r3, r9
    43c2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    43c4:	0039      	movs	r1, r7
    43c6:	2019      	movs	r0, #25
    43c8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    43ca:	78b3      	ldrb	r3, [r6, #2]
    43cc:	466a      	mov	r2, sp
    43ce:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    43d0:	4669      	mov	r1, sp
    43d2:	2006      	movs	r0, #6
    43d4:	4b61      	ldr	r3, [pc, #388]	; (455c <usb_init+0x1dc>)
    43d6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    43d8:	2006      	movs	r0, #6
    43da:	4b61      	ldr	r3, [pc, #388]	; (4560 <usb_init+0x1e0>)
    43dc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    43de:	782b      	ldrb	r3, [r5, #0]
    43e0:	2201      	movs	r2, #1
    43e2:	4313      	orrs	r3, r2
    43e4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    43e6:	78ab      	ldrb	r3, [r5, #2]
    43e8:	07db      	lsls	r3, r3, #31
    43ea:	d4fc      	bmi.n	43e6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    43ec:	4a5d      	ldr	r2, [pc, #372]	; (4564 <usb_init+0x1e4>)
    43ee:	78d3      	ldrb	r3, [r2, #3]
    43f0:	2103      	movs	r1, #3
    43f2:	438b      	bics	r3, r1
    43f4:	2102      	movs	r1, #2
    43f6:	430b      	orrs	r3, r1
    43f8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    43fa:	78d3      	ldrb	r3, [r2, #3]
    43fc:	210c      	movs	r1, #12
    43fe:	438b      	bics	r3, r1
    4400:	2108      	movs	r1, #8
    4402:	430b      	orrs	r3, r1
    4404:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4406:	4b58      	ldr	r3, [pc, #352]	; (4568 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4408:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    440a:	039b      	lsls	r3, r3, #14
    440c:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    440e:	2b1f      	cmp	r3, #31
    4410:	d100      	bne.n	4414 <usb_init+0x94>
    4412:	e08f      	b.n	4534 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4414:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4416:	019b      	lsls	r3, r3, #6
    4418:	4954      	ldr	r1, [pc, #336]	; (456c <usb_init+0x1ec>)
    441a:	400a      	ands	r2, r1
    441c:	4313      	orrs	r3, r2
    441e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4420:	4b51      	ldr	r3, [pc, #324]	; (4568 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4422:	681b      	ldr	r3, [r3, #0]
    4424:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4426:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4428:	2b1f      	cmp	r3, #31
    442a:	d100      	bne.n	442e <usb_init+0xae>
    442c:	e084      	b.n	4538 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    442e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4430:	211f      	movs	r1, #31
    4432:	438a      	bics	r2, r1
    4434:	4313      	orrs	r3, r2
    4436:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4438:	4b4b      	ldr	r3, [pc, #300]	; (4568 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    443a:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    443c:	019b      	lsls	r3, r3, #6
    443e:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4440:	2b07      	cmp	r3, #7
    4442:	d100      	bne.n	4446 <usb_init+0xc6>
    4444:	e07a      	b.n	453c <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4446:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4448:	031b      	lsls	r3, r3, #12
    444a:	4949      	ldr	r1, [pc, #292]	; (4570 <usb_init+0x1f0>)
    444c:	400a      	ands	r2, r1
    444e:	4313      	orrs	r3, r2
    4450:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4452:	7832      	ldrb	r2, [r6, #0]
    4454:	7829      	ldrb	r1, [r5, #0]
    4456:	01d2      	lsls	r2, r2, #7
    4458:	237f      	movs	r3, #127	; 0x7f
    445a:	400b      	ands	r3, r1
    445c:	4313      	orrs	r3, r2
    445e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4460:	7871      	ldrb	r1, [r6, #1]
    4462:	782b      	ldrb	r3, [r5, #0]
    4464:	2201      	movs	r2, #1
    4466:	400a      	ands	r2, r1
    4468:	0092      	lsls	r2, r2, #2
    446a:	2104      	movs	r1, #4
    446c:	438b      	bics	r3, r1
    446e:	4313      	orrs	r3, r2
    4470:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4472:	4b40      	ldr	r3, [pc, #256]	; (4574 <usb_init+0x1f4>)
    4474:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4476:	78f3      	ldrb	r3, [r6, #3]
    4478:	2b01      	cmp	r3, #1
    447a:	d061      	beq.n	4540 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    447c:	2b00      	cmp	r3, #0
    447e:	d106      	bne.n	448e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4480:	6822      	ldr	r2, [r4, #0]
    4482:	8913      	ldrh	r3, [r2, #8]
    4484:	210c      	movs	r1, #12
    4486:	438b      	bics	r3, r1
    4488:	2104      	movs	r1, #4
    448a:	430b      	orrs	r3, r1
    448c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    448e:	2280      	movs	r2, #128	; 0x80
    4490:	0052      	lsls	r2, r2, #1
    4492:	2100      	movs	r1, #0
    4494:	4837      	ldr	r0, [pc, #220]	; (4574 <usb_init+0x1f4>)
    4496:	4b38      	ldr	r3, [pc, #224]	; (4578 <usb_init+0x1f8>)
    4498:	4798      	blx	r3
    449a:	1d23      	adds	r3, r4, #4
    449c:	0021      	movs	r1, r4
    449e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    44a0:	2200      	movs	r2, #0
    44a2:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    44a4:	428b      	cmp	r3, r1
    44a6:	d1fc      	bne.n	44a2 <usb_init+0x122>
    44a8:	0021      	movs	r1, r4
    44aa:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    44ac:	2200      	movs	r2, #0
    44ae:	601a      	str	r2, [r3, #0]
    44b0:	605a      	str	r2, [r3, #4]
    44b2:	609a      	str	r2, [r3, #8]
    44b4:	60da      	str	r2, [r3, #12]
    44b6:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    44b8:	428b      	cmp	r3, r1
    44ba:	d1f8      	bne.n	44ae <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    44bc:	2300      	movs	r3, #0
    44be:	22a4      	movs	r2, #164	; 0xa4
    44c0:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    44c2:	3201      	adds	r2, #1
    44c4:	54a3      	strb	r3, [r4, r2]
    44c6:	0023      	movs	r3, r4
    44c8:	33a6      	adds	r3, #166	; 0xa6
    44ca:	0021      	movs	r1, r4
    44cc:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    44ce:	2200      	movs	r2, #0
    44d0:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    44d2:	721a      	strb	r2, [r3, #8]
    44d4:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    44d6:	4299      	cmp	r1, r3
    44d8:	d1fa      	bne.n	44d0 <usb_init+0x150>
    44da:	0023      	movs	r3, r4
    44dc:	33b8      	adds	r3, #184	; 0xb8
    44de:	0021      	movs	r1, r4
    44e0:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    44e2:	2200      	movs	r2, #0
    44e4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    44e6:	428b      	cmp	r3, r1
    44e8:	d1fc      	bne.n	44e4 <usb_init+0x164>
    44ea:	0021      	movs	r1, r4
    44ec:	3155      	adds	r1, #85	; 0x55
    44ee:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    44f0:	2200      	movs	r2, #0
    44f2:	601a      	str	r2, [r3, #0]
    44f4:	605a      	str	r2, [r3, #4]
    44f6:	609a      	str	r2, [r3, #8]
    44f8:	60da      	str	r2, [r3, #12]
    44fa:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    44fc:	428b      	cmp	r3, r1
    44fe:	d1f8      	bne.n	44f2 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4500:	2300      	movs	r3, #0
    4502:	22aa      	movs	r2, #170	; 0xaa
    4504:	0052      	lsls	r2, r2, #1
    4506:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4508:	3202      	adds	r2, #2
    450a:	52a3      	strh	r3, [r4, r2]
    450c:	0023      	movs	r3, r4
    450e:	3359      	adds	r3, #89	; 0x59
    4510:	33ff      	adds	r3, #255	; 0xff
    4512:	3461      	adds	r4, #97	; 0x61
    4514:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4516:	2200      	movs	r2, #0
    4518:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    451a:	721a      	strb	r2, [r3, #8]
    451c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    451e:	42a3      	cmp	r3, r4
    4520:	d1fa      	bne.n	4518 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4522:	2280      	movs	r2, #128	; 0x80
    4524:	4b15      	ldr	r3, [pc, #84]	; (457c <usb_init+0x1fc>)
    4526:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4528:	2000      	movs	r0, #0
    452a:	b003      	add	sp, #12
    452c:	bc0c      	pop	{r2, r3}
    452e:	4690      	mov	r8, r2
    4530:	4699      	mov	r9, r3
    4532:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4534:	3b1a      	subs	r3, #26
    4536:	e76d      	b.n	4414 <usb_init+0x94>
		pad_transp = 29;
    4538:	3b02      	subs	r3, #2
    453a:	e778      	b.n	442e <usb_init+0xae>
		pad_trim = 3;
    453c:	3b04      	subs	r3, #4
    453e:	e782      	b.n	4446 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4540:	6822      	ldr	r2, [r4, #0]
    4542:	8913      	ldrh	r3, [r2, #8]
    4544:	3108      	adds	r1, #8
    4546:	438b      	bics	r3, r1
    4548:	8113      	strh	r3, [r2, #8]
    454a:	e7a0      	b.n	448e <usb_init+0x10e>
    454c:	200003e4 	.word	0x200003e4
    4550:	200003d4 	.word	0x200003d4
    4554:	40000400 	.word	0x40000400
    4558:	000028f1 	.word	0x000028f1
    455c:	0000282d 	.word	0x0000282d
    4560:	000027a1 	.word	0x000027a1
    4564:	41005000 	.word	0x41005000
    4568:	00806024 	.word	0x00806024
    456c:	fffff83f 	.word	0xfffff83f
    4570:	ffff8fff 	.word	0xffff8fff
    4574:	20000838 	.word	0x20000838
    4578:	000064df 	.word	0x000064df
    457c:	e000e100 	.word	0xe000e100

00004580 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4580:	e7fe      	b.n	4580 <Dummy_Handler>
	...

00004584 <Reset_Handler>:
{
    4584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4586:	4a2a      	ldr	r2, [pc, #168]	; (4630 <Reset_Handler+0xac>)
    4588:	4b2a      	ldr	r3, [pc, #168]	; (4634 <Reset_Handler+0xb0>)
    458a:	429a      	cmp	r2, r3
    458c:	d011      	beq.n	45b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    458e:	001a      	movs	r2, r3
    4590:	4b29      	ldr	r3, [pc, #164]	; (4638 <Reset_Handler+0xb4>)
    4592:	429a      	cmp	r2, r3
    4594:	d20d      	bcs.n	45b2 <Reset_Handler+0x2e>
    4596:	4a29      	ldr	r2, [pc, #164]	; (463c <Reset_Handler+0xb8>)
    4598:	3303      	adds	r3, #3
    459a:	1a9b      	subs	r3, r3, r2
    459c:	089b      	lsrs	r3, r3, #2
    459e:	3301      	adds	r3, #1
    45a0:	009b      	lsls	r3, r3, #2
    45a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    45a4:	4823      	ldr	r0, [pc, #140]	; (4634 <Reset_Handler+0xb0>)
    45a6:	4922      	ldr	r1, [pc, #136]	; (4630 <Reset_Handler+0xac>)
    45a8:	588c      	ldr	r4, [r1, r2]
    45aa:	5084      	str	r4, [r0, r2]
    45ac:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    45ae:	429a      	cmp	r2, r3
    45b0:	d1fa      	bne.n	45a8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    45b2:	4a23      	ldr	r2, [pc, #140]	; (4640 <Reset_Handler+0xbc>)
    45b4:	4b23      	ldr	r3, [pc, #140]	; (4644 <Reset_Handler+0xc0>)
    45b6:	429a      	cmp	r2, r3
    45b8:	d20a      	bcs.n	45d0 <Reset_Handler+0x4c>
    45ba:	43d3      	mvns	r3, r2
    45bc:	4921      	ldr	r1, [pc, #132]	; (4644 <Reset_Handler+0xc0>)
    45be:	185b      	adds	r3, r3, r1
    45c0:	2103      	movs	r1, #3
    45c2:	438b      	bics	r3, r1
    45c4:	3304      	adds	r3, #4
    45c6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    45c8:	2100      	movs	r1, #0
    45ca:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    45cc:	4293      	cmp	r3, r2
    45ce:	d1fc      	bne.n	45ca <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    45d0:	4a1d      	ldr	r2, [pc, #116]	; (4648 <Reset_Handler+0xc4>)
    45d2:	21ff      	movs	r1, #255	; 0xff
    45d4:	4b1d      	ldr	r3, [pc, #116]	; (464c <Reset_Handler+0xc8>)
    45d6:	438b      	bics	r3, r1
    45d8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    45da:	39fd      	subs	r1, #253	; 0xfd
    45dc:	2390      	movs	r3, #144	; 0x90
    45de:	005b      	lsls	r3, r3, #1
    45e0:	4a1b      	ldr	r2, [pc, #108]	; (4650 <Reset_Handler+0xcc>)
    45e2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    45e4:	4a1b      	ldr	r2, [pc, #108]	; (4654 <Reset_Handler+0xd0>)
    45e6:	78d3      	ldrb	r3, [r2, #3]
    45e8:	2503      	movs	r5, #3
    45ea:	43ab      	bics	r3, r5
    45ec:	2402      	movs	r4, #2
    45ee:	4323      	orrs	r3, r4
    45f0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    45f2:	78d3      	ldrb	r3, [r2, #3]
    45f4:	270c      	movs	r7, #12
    45f6:	43bb      	bics	r3, r7
    45f8:	2608      	movs	r6, #8
    45fa:	4333      	orrs	r3, r6
    45fc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    45fe:	4b16      	ldr	r3, [pc, #88]	; (4658 <Reset_Handler+0xd4>)
    4600:	7b98      	ldrb	r0, [r3, #14]
    4602:	2230      	movs	r2, #48	; 0x30
    4604:	4390      	bics	r0, r2
    4606:	2220      	movs	r2, #32
    4608:	4310      	orrs	r0, r2
    460a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    460c:	7b99      	ldrb	r1, [r3, #14]
    460e:	43b9      	bics	r1, r7
    4610:	4331      	orrs	r1, r6
    4612:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4614:	7b9a      	ldrb	r2, [r3, #14]
    4616:	43aa      	bics	r2, r5
    4618:	4322      	orrs	r2, r4
    461a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    461c:	4a0f      	ldr	r2, [pc, #60]	; (465c <Reset_Handler+0xd8>)
    461e:	6853      	ldr	r3, [r2, #4]
    4620:	2180      	movs	r1, #128	; 0x80
    4622:	430b      	orrs	r3, r1
    4624:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4626:	4b0e      	ldr	r3, [pc, #56]	; (4660 <Reset_Handler+0xdc>)
    4628:	4798      	blx	r3
        main();
    462a:	4b0e      	ldr	r3, [pc, #56]	; (4664 <Reset_Handler+0xe0>)
    462c:	4798      	blx	r3
    462e:	e7fe      	b.n	462e <Reset_Handler+0xaa>
    4630:	0000704c 	.word	0x0000704c
    4634:	20000000 	.word	0x20000000
    4638:	20000174 	.word	0x20000174
    463c:	20000004 	.word	0x20000004
    4640:	20000174 	.word	0x20000174
    4644:	20000940 	.word	0x20000940
    4648:	e000ed00 	.word	0xe000ed00
    464c:	00000000 	.word	0x00000000
    4650:	41007000 	.word	0x41007000
    4654:	41005000 	.word	0x41005000
    4658:	41004800 	.word	0x41004800
    465c:	41004000 	.word	0x41004000
    4660:	00006485 	.word	0x00006485
    4664:	000046bd 	.word	0x000046bd

00004668 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4668:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    466a:	4a06      	ldr	r2, [pc, #24]	; (4684 <_sbrk+0x1c>)
    466c:	6812      	ldr	r2, [r2, #0]
    466e:	2a00      	cmp	r2, #0
    4670:	d004      	beq.n	467c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4672:	4a04      	ldr	r2, [pc, #16]	; (4684 <_sbrk+0x1c>)
    4674:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4676:	18c3      	adds	r3, r0, r3
    4678:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    467a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    467c:	4902      	ldr	r1, [pc, #8]	; (4688 <_sbrk+0x20>)
    467e:	4a01      	ldr	r2, [pc, #4]	; (4684 <_sbrk+0x1c>)
    4680:	6011      	str	r1, [r2, #0]
    4682:	e7f6      	b.n	4672 <_sbrk+0xa>
    4684:	200003f0 	.word	0x200003f0
    4688:	20002940 	.word	0x20002940

0000468c <configure_nvm>:

#include <asf.h>
#include "flash.h"

void configure_nvm(void)
{
    468c:	b500      	push	{lr}
    468e:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4690:	2200      	movs	r2, #0
    4692:	466b      	mov	r3, sp
    4694:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4696:	4b07      	ldr	r3, [pc, #28]	; (46b4 <configure_nvm+0x28>)
    4698:	685b      	ldr	r3, [r3, #4]
    469a:	06db      	lsls	r3, r3, #27
    469c:	0f1b      	lsrs	r3, r3, #28
    469e:	4669      	mov	r1, sp
    46a0:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    46a2:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    46a4:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    46a6:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    46a8:	4668      	mov	r0, sp
    46aa:	4b03      	ldr	r3, [pc, #12]	; (46b8 <configure_nvm+0x2c>)
    46ac:	4798      	blx	r3
}
    46ae:	b003      	add	sp, #12
    46b0:	bd00      	pop	{pc}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	41004000 	.word	0x41004000
    46b8:	00001f59 	.word	0x00001f59

000046bc <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    46bc:	b510      	push	{r4, lr}


	irq_initialize_vectors();
	cpu_irq_enable();
    46be:	2101      	movs	r1, #1
    46c0:	2401      	movs	r4, #1
    46c2:	4b3b      	ldr	r3, [pc, #236]	; (47b0 <main+0xf4>)
    46c4:	7019      	strb	r1, [r3, #0]
    46c6:	f3bf 8f5f 	dmb	sy
    46ca:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    46cc:	4b39      	ldr	r3, [pc, #228]	; (47b4 <main+0xf8>)
    46ce:	2200      	movs	r2, #0
    46d0:	701a      	strb	r2, [r3, #0]
    46d2:	705a      	strb	r2, [r3, #1]
    46d4:	709a      	strb	r2, [r3, #2]
    46d6:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    46d8:	7119      	strb	r1, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    46da:	4b37      	ldr	r3, [pc, #220]	; (47b8 <main+0xfc>)
    46dc:	4798      	blx	r3
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    46de:	4b37      	ldr	r3, [pc, #220]	; (47bc <main+0x100>)
    46e0:	2148      	movs	r1, #72	; 0x48
    46e2:	5c5a      	ldrb	r2, [r3, r1]
    46e4:	4322      	orrs	r2, r4
    46e6:	545a      	strb	r2, [r3, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    46e8:	2234      	movs	r2, #52	; 0x34
    46ea:	5c99      	ldrb	r1, [r3, r2]
    46ec:	200f      	movs	r0, #15
    46ee:	4381      	bics	r1, r0
    46f0:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    46f2:	5c99      	ldrb	r1, [r3, r2]
    46f4:	380c      	subs	r0, #12
    46f6:	4301      	orrs	r1, r0
    46f8:	5499      	strb	r1, [r3, r2]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    46fa:	3046      	adds	r0, #70	; 0x46
    46fc:	5c19      	ldrb	r1, [r3, r0]
    46fe:	4321      	orrs	r1, r4
    4700:	5419      	strb	r1, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    4702:	5c99      	ldrb	r1, [r3, r2]
    4704:	383a      	subs	r0, #58	; 0x3a
    4706:	4001      	ands	r1, r0
    4708:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    470a:	5c99      	ldrb	r1, [r3, r2]
    470c:	3021      	adds	r0, #33	; 0x21
    470e:	4301      	orrs	r1, r0
    4710:	5499      	strb	r1, [r3, r2]
	PM->APBCMASK.reg |= I2C_SERCOM_APBCMASK;
    4712:	4a2b      	ldr	r2, [pc, #172]	; (47c0 <main+0x104>)
    4714:	6a13      	ldr	r3, [r2, #32]
    4716:	2110      	movs	r1, #16
    4718:	430b      	orrs	r3, r1
    471a:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(I2C_SERCOM_GCLK_ID) |
    471c:	4a29      	ldr	r2, [pc, #164]	; (47c4 <main+0x108>)
    471e:	4b2a      	ldr	r3, [pc, #168]	; (47c8 <main+0x10c>)
    4720:	805a      	strh	r2, [r3, #2]
	I2C_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4722:	2280      	movs	r2, #128	; 0x80
    4724:	0052      	lsls	r2, r2, #1
    4726:	4b29      	ldr	r3, [pc, #164]	; (47cc <main+0x110>)
    4728:	605a      	str	r2, [r3, #4]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    472a:	69da      	ldr	r2, [r3, #28]
    472c:	2a00      	cmp	r2, #0
    472e:	d1fc      	bne.n	472a <main+0x6e>
	SERCOM2->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(34);
    4730:	3222      	adds	r2, #34	; 0x22
    4732:	4b26      	ldr	r3, [pc, #152]	; (47cc <main+0x110>)
    4734:	60da      	str	r2, [r3, #12]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4736:	69da      	ldr	r2, [r3, #28]
    4738:	2a00      	cmp	r2, #0
    473a:	d1fc      	bne.n	4736 <main+0x7a>
	I2C_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE |
    473c:	4a24      	ldr	r2, [pc, #144]	; (47d0 <main+0x114>)
    473e:	4b23      	ldr	r3, [pc, #140]	; (47cc <main+0x110>)
    4740:	601a      	str	r2, [r3, #0]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4742:	69da      	ldr	r2, [r3, #28]
    4744:	2a00      	cmp	r2, #0
    4746:	d1fc      	bne.n	4742 <main+0x86>
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    4748:	4a20      	ldr	r2, [pc, #128]	; (47cc <main+0x110>)
    474a:	8b53      	ldrh	r3, [r2, #26]
    474c:	2110      	movs	r1, #16
    474e:	430b      	orrs	r3, r1
    4750:	8353      	strh	r3, [r2, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);	
    4752:	0013      	movs	r3, r2
    4754:	69da      	ldr	r2, [r3, #28]
    4756:	2a00      	cmp	r2, #0
    4758:	d1fc      	bne.n	4754 <main+0x98>
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    475a:	4a19      	ldr	r2, [pc, #100]	; (47c0 <main+0x104>)
    475c:	6a11      	ldr	r1, [r2, #32]
    475e:	2380      	movs	r3, #128	; 0x80
    4760:	015b      	lsls	r3, r3, #5
    4762:	430b      	orrs	r3, r1
    4764:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    4766:	4a1b      	ldr	r2, [pc, #108]	; (47d4 <main+0x118>)
    4768:	4b17      	ldr	r3, [pc, #92]	; (47c8 <main+0x10c>)
    476a:	805a      	strh	r2, [r3, #2]
	TC4->COUNT16.CTRLA.reg =
    476c:	4b1a      	ldr	r3, [pc, #104]	; (47d8 <main+0x11c>)
    476e:	22a9      	movs	r2, #169	; 0xa9
    4770:	0152      	lsls	r2, r2, #5
    4772:	801a      	strh	r2, [r3, #0]
	TC4->COUNT16.COUNT.reg = 0;
    4774:	2200      	movs	r2, #0
    4776:	821a      	strh	r2, [r3, #16]
	TC4->COUNT16.CC[0].reg = 800u; // Count to 800 to get 0.1ms
    4778:	22c8      	movs	r2, #200	; 0xc8
    477a:	0092      	lsls	r2, r2, #2
    477c:	831a      	strh	r2, [r3, #24]
	TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    477e:	881a      	ldrh	r2, [r3, #0]
    4780:	2102      	movs	r1, #2
    4782:	430a      	orrs	r2, r1
    4784:	801a      	strh	r2, [r3, #0]
	//spiInit1();
	
	timerInit();
	
	//configue flash non-volatile memory
	configure_nvm();
    4786:	4b15      	ldr	r3, [pc, #84]	; (47dc <main+0x120>)
    4788:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    478a:	4b15      	ldr	r3, [pc, #84]	; (47e0 <main+0x124>)
    478c:	4798      	blx	r3
	//light sensor initialization
	OPT3001_init();
    478e:	4b15      	ldr	r3, [pc, #84]	; (47e4 <main+0x128>)
    4790:	4798      	blx	r3
	//temperature sensor initialization
	Si7021_init();
    4792:	4b15      	ldr	r3, [pc, #84]	; (47e8 <main+0x12c>)
    4794:	4798      	blx	r3
	//clear LCD
	i2cLcdClear();
    4796:	4b15      	ldr	r3, [pc, #84]	; (47ec <main+0x130>)
    4798:	4798      	blx	r3
	REG_PORT_DIRSET0 = PORT_PA05;
    479a:	2320      	movs	r3, #32
    479c:	4a14      	ldr	r2, [pc, #80]	; (47f0 <main+0x134>)
    479e:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR0 = PORT_PA05;
    47a0:	4a14      	ldr	r2, [pc, #80]	; (47f4 <main+0x138>)
    47a2:	6013      	str	r3, [r2, #0]
	//initialize uart(bluetooth)
	uart_init();
    47a4:	4b14      	ldr	r3, [pc, #80]	; (47f8 <main+0x13c>)
    47a6:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	configApp();
    47a8:	4b14      	ldr	r3, [pc, #80]	; (47fc <main+0x140>)
    47aa:	4798      	blx	r3
    47ac:	e7fe      	b.n	47ac <main+0xf0>
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	2000010c 	.word	0x2000010c
    47b4:	20000570 	.word	0x20000570
    47b8:	00002925 	.word	0x00002925
    47bc:	41004400 	.word	0x41004400
    47c0:	40000400 	.word	0x40000400
    47c4:	00004216 	.word	0x00004216
    47c8:	40000c00 	.word	0x40000c00
    47cc:	42001000 	.word	0x42001000
    47d0:	00300016 	.word	0x00300016
    47d4:	0000421c 	.word	0x0000421c
    47d8:	42003000 	.word	0x42003000
    47dc:	0000468d 	.word	0x0000468d
    47e0:	00001805 	.word	0x00001805
    47e4:	000049bd 	.word	0x000049bd
    47e8:	000049d9 	.word	0x000049d9
    47ec:	00000f5d 	.word	0x00000f5d
    47f0:	41004408 	.word	0x41004408
    47f4:	41004414 	.word	0x41004414
    47f8:	000014fd 	.word	0x000014fd
    47fc:	000004f1 	.word	0x000004f1

00004800 <main_suspend_action>:
	}
}


void main_suspend_action(void)
{
    4800:	b510      	push	{r4, lr}
	ui_powerdown();
    4802:	4b01      	ldr	r3, [pc, #4]	; (4808 <main_suspend_action+0x8>)
    4804:	4798      	blx	r3
}
    4806:	bd10      	pop	{r4, pc}
    4808:	000015f1 	.word	0x000015f1

0000480c <main_resume_action>:

void main_resume_action(void)
{
    480c:	b510      	push	{r4, lr}
	ui_wakeup();
    480e:	4b01      	ldr	r3, [pc, #4]	; (4814 <main_resume_action+0x8>)
    4810:	4798      	blx	r3
}
    4812:	bd10      	pop	{r4, pc}
    4814:	00001621 	.word	0x00001621

00004818 <main_sof_action>:

void main_sof_action(void)
{
    4818:	b510      	push	{r4, lr}
	test_components();
    481a:	4b06      	ldr	r3, [pc, #24]	; (4834 <main_sof_action+0x1c>)
    481c:	4798      	blx	r3
	if (!main_b_cdc_enable)
    481e:	4b06      	ldr	r3, [pc, #24]	; (4838 <main_sof_action+0x20>)
    4820:	781b      	ldrb	r3, [r3, #0]
    4822:	2b00      	cmp	r3, #0
    4824:	d100      	bne.n	4828 <main_sof_action+0x10>
	return;
	ui_process(udd_get_frame_number());
}
    4826:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    4828:	4b04      	ldr	r3, [pc, #16]	; (483c <main_sof_action+0x24>)
    482a:	4798      	blx	r3
    482c:	4b04      	ldr	r3, [pc, #16]	; (4840 <main_sof_action+0x28>)
    482e:	4798      	blx	r3
    4830:	e7f9      	b.n	4826 <main_sof_action+0xe>
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	000012ed 	.word	0x000012ed
    4838:	200003f4 	.word	0x200003f4
    483c:	0000302d 	.word	0x0000302d
    4840:	00001635 	.word	0x00001635

00004844 <main_suspend_lpm_action>:


#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    4844:	b510      	push	{r4, lr}
	ui_powerdown();
    4846:	4b01      	ldr	r3, [pc, #4]	; (484c <main_suspend_lpm_action+0x8>)
    4848:	4798      	blx	r3
}
    484a:	bd10      	pop	{r4, pc}
    484c:	000015f1 	.word	0x000015f1

00004850 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    4850:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    4852:	4b01      	ldr	r3, [pc, #4]	; (4858 <main_remotewakeup_lpm_disable+0x8>)
    4854:	4798      	blx	r3
}
    4856:	bd10      	pop	{r4, pc}
    4858:	00001611 	.word	0x00001611

0000485c <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    485c:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    485e:	4b01      	ldr	r3, [pc, #4]	; (4864 <main_remotewakeup_lpm_enable+0x8>)
    4860:	4798      	blx	r3
}
    4862:	bd10      	pop	{r4, pc}
    4864:	00001601 	.word	0x00001601

00004868 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    4868:	2201      	movs	r2, #1
    486a:	4b02      	ldr	r3, [pc, #8]	; (4874 <main_cdc_enable+0xc>)
    486c:	701a      	strb	r2, [r3, #0]
	// Open communication
	//uart_open(port);
	return true;
}
    486e:	2001      	movs	r0, #1
    4870:	4770      	bx	lr
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	200003f4 	.word	0x200003f4

00004878 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    4878:	2200      	movs	r2, #0
    487a:	4b01      	ldr	r3, [pc, #4]	; (4880 <main_cdc_disable+0x8>)
    487c:	701a      	strb	r2, [r3, #0]
	// Close communication
	//uart_close(port);
}
    487e:	4770      	bx	lr
    4880:	200003f4 	.word	0x200003f4

00004884 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    4884:	b510      	push	{r4, lr}
	if (b_enable) {
    4886:	2900      	cmp	r1, #0
    4888:	d102      	bne.n	4890 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    488a:	4b03      	ldr	r3, [pc, #12]	; (4898 <main_cdc_set_dtr+0x14>)
    488c:	4798      	blx	r3
	}
}
    488e:	bd10      	pop	{r4, pc}
		ui_com_open(port);
    4890:	4b02      	ldr	r3, [pc, #8]	; (489c <main_cdc_set_dtr+0x18>)
    4892:	4798      	blx	r3
    4894:	e7fb      	b.n	488e <main_cdc_set_dtr+0xa>
    4896:	46c0      	nop			; (mov r8, r8)
    4898:	00001633 	.word	0x00001633
    489c:	00001631 	.word	0x00001631

000048a0 <OPT3001_read>:
}

//-----------------------------------------------------------------------------
inline bool i2c_read(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    48a0:	2289      	movs	r2, #137	; 0x89
    48a2:	4b21      	ldr	r3, [pc, #132]	; (4928 <OPT3001_read+0x88>)
    48a4:	625a      	str	r2, [r3, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    48a6:	0019      	movs	r1, r3
    48a8:	3a87      	subs	r2, #135	; 0x87
    48aa:	7e0b      	ldrb	r3, [r1, #24]
    48ac:	4213      	tst	r3, r2
    48ae:	d0fc      	beq.n	48aa <OPT3001_read+0xa>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    48b0:	4b1d      	ldr	r3, [pc, #116]	; (4928 <OPT3001_read+0x88>)
    48b2:	8b5b      	ldrh	r3, [r3, #26]
    48b4:	075b      	lsls	r3, r3, #29
    48b6:	d430      	bmi.n	491a <OPT3001_read+0x7a>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		//dbg_log("I2C: RXNACK during read (address)\r\n");
		return false;
	}

	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    48b8:	4b1b      	ldr	r3, [pc, #108]	; (4928 <OPT3001_read+0x88>)
    48ba:	685a      	ldr	r2, [r3, #4]
    48bc:	491b      	ldr	r1, [pc, #108]	; (492c <OPT3001_read+0x8c>)
    48be:	400a      	ands	r2, r1
    48c0:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < size-1; i++)
	{
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    48c2:	2228      	movs	r2, #40	; 0x28
    48c4:	5c9a      	ldrb	r2, [r3, r2]
    48c6:	4b1a      	ldr	r3, [pc, #104]	; (4930 <OPT3001_read+0x90>)
    48c8:	701a      	strb	r2, [r3, #0]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    48ca:	4917      	ldr	r1, [pc, #92]	; (4928 <OPT3001_read+0x88>)
    48cc:	2202      	movs	r2, #2
    48ce:	7e0b      	ldrb	r3, [r1, #24]
    48d0:	4213      	tst	r3, r2
    48d2:	d0fc      	beq.n	48ce <OPT3001_read+0x2e>
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    48d4:	2328      	movs	r3, #40	; 0x28
    48d6:	4a14      	ldr	r2, [pc, #80]	; (4928 <OPT3001_read+0x88>)
    48d8:	5cd2      	ldrb	r2, [r2, r3]
    48da:	4b15      	ldr	r3, [pc, #84]	; (4930 <OPT3001_read+0x90>)
    48dc:	705a      	strb	r2, [r3, #1]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    48de:	4912      	ldr	r1, [pc, #72]	; (4928 <OPT3001_read+0x88>)
    48e0:	2202      	movs	r2, #2
    48e2:	7e0b      	ldrb	r3, [r1, #24]
    48e4:	4213      	tst	r3, r2
    48e6:	d0fc      	beq.n	48e2 <OPT3001_read+0x42>
	}

	if (size)
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    48e8:	4b0f      	ldr	r3, [pc, #60]	; (4928 <OPT3001_read+0x88>)
    48ea:	6859      	ldr	r1, [r3, #4]
    48ec:	2280      	movs	r2, #128	; 0x80
    48ee:	02d2      	lsls	r2, r2, #11
    48f0:	430a      	orrs	r2, r1
    48f2:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    48f4:	6859      	ldr	r1, [r3, #4]
    48f6:	22c0      	movs	r2, #192	; 0xc0
    48f8:	0292      	lsls	r2, r2, #10
    48fa:	430a      	orrs	r2, r1
    48fc:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    48fe:	2228      	movs	r2, #40	; 0x28
    4900:	5c99      	ldrb	r1, [r3, r2]
    4902:	4a0b      	ldr	r2, [pc, #44]	; (4930 <OPT3001_read+0x90>)
    4904:	7091      	strb	r1, [r2, #2]
	}
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    4906:	8b5a      	ldrh	r2, [r3, #26]
    4908:	2110      	movs	r1, #16
    490a:	430a      	orrs	r2, r1
    490c:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    490e:	001a      	movs	r2, r3
    4910:	69d3      	ldr	r3, [r2, #28]
    4912:	2b00      	cmp	r3, #0
    4914:	d1fc      	bne.n	4910 <OPT3001_read+0x70>
//Reads the register that was last written to
uint8_t* OPT3001_read(){
	
	i2c_read(OPT3001_read_buffer, 3, OPT3001_SLAVE_ADDR);
	return OPT3001_read_buffer;
}
    4916:	4806      	ldr	r0, [pc, #24]	; (4930 <OPT3001_read+0x90>)
    4918:	4770      	bx	lr
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    491a:	4a03      	ldr	r2, [pc, #12]	; (4928 <OPT3001_read+0x88>)
    491c:	6851      	ldr	r1, [r2, #4]
    491e:	23c0      	movs	r3, #192	; 0xc0
    4920:	029b      	lsls	r3, r3, #10
    4922:	430b      	orrs	r3, r1
    4924:	6053      	str	r3, [r2, #4]
    4926:	e7f6      	b.n	4916 <OPT3001_read+0x76>
    4928:	42001000 	.word	0x42001000
    492c:	fffbffff 	.word	0xfffbffff
    4930:	200003f8 	.word	0x200003f8

00004934 <OPT3001_write>:

void OPT3001_write(uint8_t reg, uint8_t byte1, uint8_t byte2){
    4934:	b570      	push	{r4, r5, r6, lr}
	
	OPT3001_write_buffer[0] = reg;
    4936:	4b1e      	ldr	r3, [pc, #120]	; (49b0 <OPT3001_write+0x7c>)
    4938:	7018      	strb	r0, [r3, #0]
	OPT3001_write_buffer[1] = byte1;
    493a:	7059      	strb	r1, [r3, #1]
	OPT3001_write_buffer[2] = byte2;
    493c:	709a      	strb	r2, [r3, #2]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    493e:	2288      	movs	r2, #136	; 0x88
    4940:	4b1c      	ldr	r3, [pc, #112]	; (49b4 <OPT3001_write+0x80>)
    4942:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4944:	0019      	movs	r1, r3
    4946:	3a87      	subs	r2, #135	; 0x87
    4948:	7e0b      	ldrb	r3, [r1, #24]
    494a:	4213      	tst	r3, r2
    494c:	d0fc      	beq.n	4948 <OPT3001_write+0x14>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    494e:	4b19      	ldr	r3, [pc, #100]	; (49b4 <OPT3001_write+0x80>)
    4950:	8b5b      	ldrh	r3, [r3, #26]
    4952:	2000      	movs	r0, #0
    4954:	075b      	lsls	r3, r3, #29
    4956:	d416      	bmi.n	4986 <OPT3001_write+0x52>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4958:	4e15      	ldr	r6, [pc, #84]	; (49b0 <OPT3001_write+0x7c>)
    495a:	4a16      	ldr	r2, [pc, #88]	; (49b4 <OPT3001_write+0x80>)
    495c:	2528      	movs	r5, #40	; 0x28
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    495e:	2101      	movs	r1, #1
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4960:	2404      	movs	r4, #4
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4962:	5d83      	ldrb	r3, [r0, r6]
    4964:	5553      	strb	r3, [r2, r5]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4966:	7e13      	ldrb	r3, [r2, #24]
    4968:	420b      	tst	r3, r1
    496a:	d0fc      	beq.n	4966 <OPT3001_write+0x32>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    496c:	8b53      	ldrh	r3, [r2, #26]
    496e:	4223      	tst	r3, r4
    4970:	d113      	bne.n	499a <OPT3001_write+0x66>
	for (int i = 0; i < size; i++)
    4972:	3001      	adds	r0, #1
    4974:	2803      	cmp	r0, #3
    4976:	d1f4      	bne.n	4962 <OPT3001_write+0x2e>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4978:	4a0e      	ldr	r2, [pc, #56]	; (49b4 <OPT3001_write+0x80>)
    497a:	6851      	ldr	r1, [r2, #4]
    497c:	23c0      	movs	r3, #192	; 0xc0
    497e:	029b      	lsls	r3, r3, #10
    4980:	430b      	orrs	r3, r1
    4982:	6053      	str	r3, [r2, #4]
	
	i2c_write(OPT3001_write_buffer, 3, OPT3001_SLAVE_ADDR);

    4984:	bd70      	pop	{r4, r5, r6, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4986:	4a0b      	ldr	r2, [pc, #44]	; (49b4 <OPT3001_write+0x80>)
    4988:	6851      	ldr	r1, [r2, #4]
    498a:	23c0      	movs	r3, #192	; 0xc0
    498c:	029b      	lsls	r3, r3, #10
    498e:	430b      	orrs	r3, r1
    4990:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    4992:	3041      	adds	r0, #65	; 0x41
    4994:	4b08      	ldr	r3, [pc, #32]	; (49b8 <OPT3001_write+0x84>)
    4996:	4798      	blx	r3
    4998:	e7f4      	b.n	4984 <OPT3001_write+0x50>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    499a:	4a06      	ldr	r2, [pc, #24]	; (49b4 <OPT3001_write+0x80>)
    499c:	6851      	ldr	r1, [r2, #4]
    499e:	23c0      	movs	r3, #192	; 0xc0
    49a0:	029b      	lsls	r3, r3, #10
    49a2:	430b      	orrs	r3, r1
    49a4:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    49a6:	2042      	movs	r0, #66	; 0x42
    49a8:	4b03      	ldr	r3, [pc, #12]	; (49b8 <OPT3001_write+0x84>)
    49aa:	4798      	blx	r3
    49ac:	e7ea      	b.n	4984 <OPT3001_write+0x50>
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	200003fc 	.word	0x200003fc
    49b4:	42001000 	.word	0x42001000
    49b8:	00000dcd 	.word	0x00000dcd

000049bc <OPT3001_init>:
void OPT3001_init(){
    49bc:	b510      	push	{r4, lr}
	OPT3001_write(OPT3001_CONFIG,0xc4,0x10);
    49be:	2210      	movs	r2, #16
    49c0:	21c4      	movs	r1, #196	; 0xc4
    49c2:	2001      	movs	r0, #1
    49c4:	4c03      	ldr	r4, [pc, #12]	; (49d4 <OPT3001_init+0x18>)
    49c6:	47a0      	blx	r4
	OPT3001_write(OPT3001_RESULT,0x00,0x00);
    49c8:	2200      	movs	r2, #0
    49ca:	2100      	movs	r1, #0
    49cc:	2000      	movs	r0, #0
    49ce:	47a0      	blx	r4
}
    49d0:	bd10      	pop	{r4, pc}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	00004935 	.word	0x00004935

000049d8 <Si7021_init>:
}

void Si7021_init(){
	
	
}
    49d8:	4770      	bx	lr
	...

000049dc <Si7021_read>:
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    49dc:	2281      	movs	r2, #129	; 0x81
    49de:	4b1c      	ldr	r3, [pc, #112]	; (4a50 <Si7021_read+0x74>)
    49e0:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    49e2:	0019      	movs	r1, r3
    49e4:	3a7f      	subs	r2, #127	; 0x7f
    49e6:	7e0b      	ldrb	r3, [r1, #24]
    49e8:	4213      	tst	r3, r2
    49ea:	d0fc      	beq.n	49e6 <Si7021_read+0xa>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    49ec:	4b18      	ldr	r3, [pc, #96]	; (4a50 <Si7021_read+0x74>)
    49ee:	8b5b      	ldrh	r3, [r3, #26]
    49f0:	075b      	lsls	r3, r3, #29
    49f2:	d507      	bpl.n	4a04 <Si7021_read+0x28>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    49f4:	4a16      	ldr	r2, [pc, #88]	; (4a50 <Si7021_read+0x74>)
    49f6:	6851      	ldr	r1, [r2, #4]
    49f8:	23c0      	movs	r3, #192	; 0xc0
    49fa:	029b      	lsls	r3, r3, #10
    49fc:	430b      	orrs	r3, r1
    49fe:	6053      	str	r3, [r2, #4]

uint8_t* Si7021_read(){
	
	i2c_read(Si7021_read_buffer,2,SI7021_SLAVE_ADDR);
	return Si7021_read_buffer;
}
    4a00:	4814      	ldr	r0, [pc, #80]	; (4a54 <Si7021_read+0x78>)
    4a02:	4770      	bx	lr
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4a04:	4b12      	ldr	r3, [pc, #72]	; (4a50 <Si7021_read+0x74>)
    4a06:	685a      	ldr	r2, [r3, #4]
    4a08:	4913      	ldr	r1, [pc, #76]	; (4a58 <Si7021_read+0x7c>)
    4a0a:	400a      	ands	r2, r1
    4a0c:	605a      	str	r2, [r3, #4]
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    4a0e:	2228      	movs	r2, #40	; 0x28
    4a10:	5c9a      	ldrb	r2, [r3, r2]
    4a12:	4b10      	ldr	r3, [pc, #64]	; (4a54 <Si7021_read+0x78>)
    4a14:	701a      	strb	r2, [r3, #0]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4a16:	490e      	ldr	r1, [pc, #56]	; (4a50 <Si7021_read+0x74>)
    4a18:	2202      	movs	r2, #2
    4a1a:	7e0b      	ldrb	r3, [r1, #24]
    4a1c:	4213      	tst	r3, r2
    4a1e:	d0fc      	beq.n	4a1a <Si7021_read+0x3e>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4a20:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <Si7021_read+0x74>)
    4a22:	6859      	ldr	r1, [r3, #4]
    4a24:	2280      	movs	r2, #128	; 0x80
    4a26:	02d2      	lsls	r2, r2, #11
    4a28:	430a      	orrs	r2, r1
    4a2a:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4a2c:	6859      	ldr	r1, [r3, #4]
    4a2e:	22c0      	movs	r2, #192	; 0xc0
    4a30:	0292      	lsls	r2, r2, #10
    4a32:	430a      	orrs	r2, r1
    4a34:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    4a36:	2228      	movs	r2, #40	; 0x28
    4a38:	5c99      	ldrb	r1, [r3, r2]
    4a3a:	4a06      	ldr	r2, [pc, #24]	; (4a54 <Si7021_read+0x78>)
    4a3c:	7051      	strb	r1, [r2, #1]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    4a3e:	8b5a      	ldrh	r2, [r3, #26]
    4a40:	2110      	movs	r1, #16
    4a42:	430a      	orrs	r2, r1
    4a44:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4a46:	001a      	movs	r2, r3
    4a48:	69d3      	ldr	r3, [r2, #28]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d1fc      	bne.n	4a48 <Si7021_read+0x6c>
    4a4e:	e7d7      	b.n	4a00 <Si7021_read+0x24>
    4a50:	42001000 	.word	0x42001000
    4a54:	20000400 	.word	0x20000400
    4a58:	fffbffff 	.word	0xfffbffff

00004a5c <Si7021_command>:

void Si7021_writereg(uint8_t reg, uint8_t byte1){
	
}

void Si7021_command(uint8_t command){
    4a5c:	b510      	push	{r4, lr}
	
	Si7021_write_buffer[0] = command;	
    4a5e:	4b1a      	ldr	r3, [pc, #104]	; (4ac8 <Si7021_command+0x6c>)
    4a60:	7018      	strb	r0, [r3, #0]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    4a62:	2280      	movs	r2, #128	; 0x80
    4a64:	4b19      	ldr	r3, [pc, #100]	; (4acc <Si7021_command+0x70>)
    4a66:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4a68:	0019      	movs	r1, r3
    4a6a:	3a7f      	subs	r2, #127	; 0x7f
    4a6c:	7e0b      	ldrb	r3, [r1, #24]
    4a6e:	4213      	tst	r3, r2
    4a70:	d0fc      	beq.n	4a6c <Si7021_command+0x10>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4a72:	4b16      	ldr	r3, [pc, #88]	; (4acc <Si7021_command+0x70>)
    4a74:	8b5b      	ldrh	r3, [r3, #26]
    4a76:	075b      	lsls	r3, r3, #29
    4a78:	d412      	bmi.n	4aa0 <Si7021_command+0x44>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4a7a:	2328      	movs	r3, #40	; 0x28
    4a7c:	4a13      	ldr	r2, [pc, #76]	; (4acc <Si7021_command+0x70>)
    4a7e:	54d0      	strb	r0, [r2, r3]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4a80:	0011      	movs	r1, r2
    4a82:	2201      	movs	r2, #1
    4a84:	7e0b      	ldrb	r3, [r1, #24]
    4a86:	4213      	tst	r3, r2
    4a88:	d0fc      	beq.n	4a84 <Si7021_command+0x28>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4a8a:	4b10      	ldr	r3, [pc, #64]	; (4acc <Si7021_command+0x70>)
    4a8c:	8b5b      	ldrh	r3, [r3, #26]
    4a8e:	075b      	lsls	r3, r3, #29
    4a90:	d410      	bmi.n	4ab4 <Si7021_command+0x58>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4a92:	4a0e      	ldr	r2, [pc, #56]	; (4acc <Si7021_command+0x70>)
    4a94:	6851      	ldr	r1, [r2, #4]
    4a96:	23c0      	movs	r3, #192	; 0xc0
    4a98:	029b      	lsls	r3, r3, #10
    4a9a:	430b      	orrs	r3, r1
    4a9c:	6053      	str	r3, [r2, #4]
	i2c_write(Si7021_write_buffer,1,SI7021_SLAVE_ADDR);

}
    4a9e:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4aa0:	4a0a      	ldr	r2, [pc, #40]	; (4acc <Si7021_command+0x70>)
    4aa2:	6851      	ldr	r1, [r2, #4]
    4aa4:	23c0      	movs	r3, #192	; 0xc0
    4aa6:	029b      	lsls	r3, r3, #10
    4aa8:	430b      	orrs	r3, r1
    4aaa:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    4aac:	2041      	movs	r0, #65	; 0x41
    4aae:	4b08      	ldr	r3, [pc, #32]	; (4ad0 <Si7021_command+0x74>)
    4ab0:	4798      	blx	r3
    4ab2:	e7f4      	b.n	4a9e <Si7021_command+0x42>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4ab4:	4a05      	ldr	r2, [pc, #20]	; (4acc <Si7021_command+0x70>)
    4ab6:	6851      	ldr	r1, [r2, #4]
    4ab8:	23c0      	movs	r3, #192	; 0xc0
    4aba:	029b      	lsls	r3, r3, #10
    4abc:	430b      	orrs	r3, r1
    4abe:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    4ac0:	2042      	movs	r0, #66	; 0x42
    4ac2:	4b03      	ldr	r3, [pc, #12]	; (4ad0 <Si7021_command+0x74>)
    4ac4:	4798      	blx	r3
    4ac6:	e7ea      	b.n	4a9e <Si7021_command+0x42>
    4ac8:	20000404 	.word	0x20000404
    4acc:	42001000 	.word	0x42001000
    4ad0:	00000dcd 	.word	0x00000dcd

00004ad4 <Si7021_GetTemp>:
uint8_t Si7021_GetTemp(){
    4ad4:	b510      	push	{r4, lr}
	Si7021_command(SI7021_MEAS_T_HMH);
    4ad6:	20e3      	movs	r0, #227	; 0xe3
    4ad8:	4b16      	ldr	r3, [pc, #88]	; (4b34 <Si7021_GetTemp+0x60>)
    4ada:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    4adc:	2200      	movs	r2, #0
    4ade:	4b16      	ldr	r3, [pc, #88]	; (4b38 <Si7021_GetTemp+0x64>)
    4ae0:	821a      	strh	r2, [r3, #16]
    4ae2:	210a      	movs	r1, #10
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4ae4:	001a      	movs	r2, r3
    4ae6:	2010      	movs	r0, #16
    4ae8:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4aea:	7b93      	ldrb	r3, [r2, #14]
    4aec:	06db      	lsls	r3, r3, #27
    4aee:	d5fc      	bpl.n	4aea <Si7021_GetTemp+0x16>
    4af0:	3901      	subs	r1, #1
    4af2:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
    4af4:	2900      	cmp	r1, #0
    4af6:	d1f7      	bne.n	4ae8 <Si7021_GetTemp+0x14>
	Si7021_data = Si7021_read();
    4af8:	4b10      	ldr	r3, [pc, #64]	; (4b3c <Si7021_GetTemp+0x68>)
    4afa:	4798      	blx	r3
    4afc:	4b10      	ldr	r3, [pc, #64]	; (4b40 <Si7021_GetTemp+0x6c>)
    4afe:	6018      	str	r0, [r3, #0]
	temp_data = (Si7021_data[0]<<8) | Si7021_data[1];
    4b00:	7803      	ldrb	r3, [r0, #0]
    4b02:	021b      	lsls	r3, r3, #8
    4b04:	7840      	ldrb	r0, [r0, #1]
    4b06:	4318      	orrs	r0, r3
    4b08:	4b0e      	ldr	r3, [pc, #56]	; (4b44 <Si7021_GetTemp+0x70>)
    4b0a:	8018      	strh	r0, [r3, #0]
	temp1 = ((175.72*temp_data)/65535)-46.85;	
    4b0c:	4b0e      	ldr	r3, [pc, #56]	; (4b48 <Si7021_GetTemp+0x74>)
    4b0e:	4798      	blx	r3
    4b10:	4a0e      	ldr	r2, [pc, #56]	; (4b4c <Si7021_GetTemp+0x78>)
    4b12:	4b0f      	ldr	r3, [pc, #60]	; (4b50 <Si7021_GetTemp+0x7c>)
    4b14:	4c0f      	ldr	r4, [pc, #60]	; (4b54 <Si7021_GetTemp+0x80>)
    4b16:	47a0      	blx	r4
    4b18:	2200      	movs	r2, #0
    4b1a:	4b0f      	ldr	r3, [pc, #60]	; (4b58 <Si7021_GetTemp+0x84>)
    4b1c:	4c0f      	ldr	r4, [pc, #60]	; (4b5c <Si7021_GetTemp+0x88>)
    4b1e:	47a0      	blx	r4
    4b20:	4a0f      	ldr	r2, [pc, #60]	; (4b60 <Si7021_GetTemp+0x8c>)
    4b22:	4b10      	ldr	r3, [pc, #64]	; (4b64 <Si7021_GetTemp+0x90>)
    4b24:	4c10      	ldr	r4, [pc, #64]	; (4b68 <Si7021_GetTemp+0x94>)
    4b26:	47a0      	blx	r4
    4b28:	4b10      	ldr	r3, [pc, #64]	; (4b6c <Si7021_GetTemp+0x98>)
    4b2a:	4798      	blx	r3
    4b2c:	b2c0      	uxtb	r0, r0
    4b2e:	4b10      	ldr	r3, [pc, #64]	; (4b70 <Si7021_GetTemp+0x9c>)
    4b30:	7018      	strb	r0, [r3, #0]
}
    4b32:	bd10      	pop	{r4, pc}
    4b34:	00004a5d 	.word	0x00004a5d
    4b38:	42003000 	.word	0x42003000
    4b3c:	000049dd 	.word	0x000049dd
    4b40:	20000508 	.word	0x20000508
    4b44:	2000093a 	.word	0x2000093a
    4b48:	00006185 	.word	0x00006185
    4b4c:	3d70a3d7 	.word	0x3d70a3d7
    4b50:	4065f70a 	.word	0x4065f70a
    4b54:	000055f1 	.word	0x000055f1
    4b58:	40efffe0 	.word	0x40efffe0
    4b5c:	00004f89 	.word	0x00004f89
    4b60:	cccccccd 	.word	0xcccccccd
    4b64:	40476ccc 	.word	0x40476ccc
    4b68:	00005af1 	.word	0x00005af1
    4b6c:	00004f4d 	.word	0x00004f4d
    4b70:	20000450 	.word	0x20000450

00004b74 <Si7021_GetRH>:
uint8_t Si7021_GetRH(){
    4b74:	b510      	push	{r4, lr}
	Si7021_command(SI7021_MEAS_RH_HMH);
    4b76:	20e5      	movs	r0, #229	; 0xe5
    4b78:	4b12      	ldr	r3, [pc, #72]	; (4bc4 <Si7021_GetRH+0x50>)
    4b7a:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    4b7c:	2200      	movs	r2, #0
    4b7e:	4b12      	ldr	r3, [pc, #72]	; (4bc8 <Si7021_GetRH+0x54>)
    4b80:	821a      	strh	r2, [r3, #16]
    4b82:	210a      	movs	r1, #10
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4b84:	001a      	movs	r2, r3
    4b86:	2010      	movs	r0, #16
    4b88:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4b8a:	7b93      	ldrb	r3, [r2, #14]
    4b8c:	06db      	lsls	r3, r3, #27
    4b8e:	d5fc      	bpl.n	4b8a <Si7021_GetRH+0x16>
    4b90:	3901      	subs	r1, #1
    4b92:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
    4b94:	2900      	cmp	r1, #0
    4b96:	d1f7      	bne.n	4b88 <Si7021_GetRH+0x14>
	Si7021_data = Si7021_read();
    4b98:	4b0c      	ldr	r3, [pc, #48]	; (4bcc <Si7021_GetRH+0x58>)
    4b9a:	4798      	blx	r3
    4b9c:	4b0c      	ldr	r3, [pc, #48]	; (4bd0 <Si7021_GetRH+0x5c>)
    4b9e:	6018      	str	r0, [r3, #0]
	RH_data = (Si7021_data[0]<<8) | Si7021_data[1];
    4ba0:	7802      	ldrb	r2, [r0, #0]
    4ba2:	0212      	lsls	r2, r2, #8
    4ba4:	7840      	ldrb	r0, [r0, #1]
    4ba6:	4302      	orrs	r2, r0
    4ba8:	4b0a      	ldr	r3, [pc, #40]	; (4bd4 <Si7021_GetRH+0x60>)
    4baa:	801a      	strh	r2, [r3, #0]
	RH1 = ((125*RH_data)/65535)-6;
    4bac:	0150      	lsls	r0, r2, #5
    4bae:	1a80      	subs	r0, r0, r2
    4bb0:	0080      	lsls	r0, r0, #2
    4bb2:	1880      	adds	r0, r0, r2
    4bb4:	4908      	ldr	r1, [pc, #32]	; (4bd8 <Si7021_GetRH+0x64>)
    4bb6:	4b09      	ldr	r3, [pc, #36]	; (4bdc <Si7021_GetRH+0x68>)
    4bb8:	4798      	blx	r3
    4bba:	3806      	subs	r0, #6
    4bbc:	b2c0      	uxtb	r0, r0
    4bbe:	4b08      	ldr	r3, [pc, #32]	; (4be0 <Si7021_GetRH+0x6c>)
    4bc0:	7018      	strb	r0, [r3, #0]
}
    4bc2:	bd10      	pop	{r4, pc}
    4bc4:	00004a5d 	.word	0x00004a5d
    4bc8:	42003000 	.word	0x42003000
    4bcc:	000049dd 	.word	0x000049dd
    4bd0:	20000508 	.word	0x20000508
    4bd4:	20000938 	.word	0x20000938
    4bd8:	0000ffff 	.word	0x0000ffff
    4bdc:	00004cf9 	.word	0x00004cf9
    4be0:	20000568 	.word	0x20000568

00004be4 <__udivsi3>:
    4be4:	2200      	movs	r2, #0
    4be6:	0843      	lsrs	r3, r0, #1
    4be8:	428b      	cmp	r3, r1
    4bea:	d374      	bcc.n	4cd6 <__udivsi3+0xf2>
    4bec:	0903      	lsrs	r3, r0, #4
    4bee:	428b      	cmp	r3, r1
    4bf0:	d35f      	bcc.n	4cb2 <__udivsi3+0xce>
    4bf2:	0a03      	lsrs	r3, r0, #8
    4bf4:	428b      	cmp	r3, r1
    4bf6:	d344      	bcc.n	4c82 <__udivsi3+0x9e>
    4bf8:	0b03      	lsrs	r3, r0, #12
    4bfa:	428b      	cmp	r3, r1
    4bfc:	d328      	bcc.n	4c50 <__udivsi3+0x6c>
    4bfe:	0c03      	lsrs	r3, r0, #16
    4c00:	428b      	cmp	r3, r1
    4c02:	d30d      	bcc.n	4c20 <__udivsi3+0x3c>
    4c04:	22ff      	movs	r2, #255	; 0xff
    4c06:	0209      	lsls	r1, r1, #8
    4c08:	ba12      	rev	r2, r2
    4c0a:	0c03      	lsrs	r3, r0, #16
    4c0c:	428b      	cmp	r3, r1
    4c0e:	d302      	bcc.n	4c16 <__udivsi3+0x32>
    4c10:	1212      	asrs	r2, r2, #8
    4c12:	0209      	lsls	r1, r1, #8
    4c14:	d065      	beq.n	4ce2 <__udivsi3+0xfe>
    4c16:	0b03      	lsrs	r3, r0, #12
    4c18:	428b      	cmp	r3, r1
    4c1a:	d319      	bcc.n	4c50 <__udivsi3+0x6c>
    4c1c:	e000      	b.n	4c20 <__udivsi3+0x3c>
    4c1e:	0a09      	lsrs	r1, r1, #8
    4c20:	0bc3      	lsrs	r3, r0, #15
    4c22:	428b      	cmp	r3, r1
    4c24:	d301      	bcc.n	4c2a <__udivsi3+0x46>
    4c26:	03cb      	lsls	r3, r1, #15
    4c28:	1ac0      	subs	r0, r0, r3
    4c2a:	4152      	adcs	r2, r2
    4c2c:	0b83      	lsrs	r3, r0, #14
    4c2e:	428b      	cmp	r3, r1
    4c30:	d301      	bcc.n	4c36 <__udivsi3+0x52>
    4c32:	038b      	lsls	r3, r1, #14
    4c34:	1ac0      	subs	r0, r0, r3
    4c36:	4152      	adcs	r2, r2
    4c38:	0b43      	lsrs	r3, r0, #13
    4c3a:	428b      	cmp	r3, r1
    4c3c:	d301      	bcc.n	4c42 <__udivsi3+0x5e>
    4c3e:	034b      	lsls	r3, r1, #13
    4c40:	1ac0      	subs	r0, r0, r3
    4c42:	4152      	adcs	r2, r2
    4c44:	0b03      	lsrs	r3, r0, #12
    4c46:	428b      	cmp	r3, r1
    4c48:	d301      	bcc.n	4c4e <__udivsi3+0x6a>
    4c4a:	030b      	lsls	r3, r1, #12
    4c4c:	1ac0      	subs	r0, r0, r3
    4c4e:	4152      	adcs	r2, r2
    4c50:	0ac3      	lsrs	r3, r0, #11
    4c52:	428b      	cmp	r3, r1
    4c54:	d301      	bcc.n	4c5a <__udivsi3+0x76>
    4c56:	02cb      	lsls	r3, r1, #11
    4c58:	1ac0      	subs	r0, r0, r3
    4c5a:	4152      	adcs	r2, r2
    4c5c:	0a83      	lsrs	r3, r0, #10
    4c5e:	428b      	cmp	r3, r1
    4c60:	d301      	bcc.n	4c66 <__udivsi3+0x82>
    4c62:	028b      	lsls	r3, r1, #10
    4c64:	1ac0      	subs	r0, r0, r3
    4c66:	4152      	adcs	r2, r2
    4c68:	0a43      	lsrs	r3, r0, #9
    4c6a:	428b      	cmp	r3, r1
    4c6c:	d301      	bcc.n	4c72 <__udivsi3+0x8e>
    4c6e:	024b      	lsls	r3, r1, #9
    4c70:	1ac0      	subs	r0, r0, r3
    4c72:	4152      	adcs	r2, r2
    4c74:	0a03      	lsrs	r3, r0, #8
    4c76:	428b      	cmp	r3, r1
    4c78:	d301      	bcc.n	4c7e <__udivsi3+0x9a>
    4c7a:	020b      	lsls	r3, r1, #8
    4c7c:	1ac0      	subs	r0, r0, r3
    4c7e:	4152      	adcs	r2, r2
    4c80:	d2cd      	bcs.n	4c1e <__udivsi3+0x3a>
    4c82:	09c3      	lsrs	r3, r0, #7
    4c84:	428b      	cmp	r3, r1
    4c86:	d301      	bcc.n	4c8c <__udivsi3+0xa8>
    4c88:	01cb      	lsls	r3, r1, #7
    4c8a:	1ac0      	subs	r0, r0, r3
    4c8c:	4152      	adcs	r2, r2
    4c8e:	0983      	lsrs	r3, r0, #6
    4c90:	428b      	cmp	r3, r1
    4c92:	d301      	bcc.n	4c98 <__udivsi3+0xb4>
    4c94:	018b      	lsls	r3, r1, #6
    4c96:	1ac0      	subs	r0, r0, r3
    4c98:	4152      	adcs	r2, r2
    4c9a:	0943      	lsrs	r3, r0, #5
    4c9c:	428b      	cmp	r3, r1
    4c9e:	d301      	bcc.n	4ca4 <__udivsi3+0xc0>
    4ca0:	014b      	lsls	r3, r1, #5
    4ca2:	1ac0      	subs	r0, r0, r3
    4ca4:	4152      	adcs	r2, r2
    4ca6:	0903      	lsrs	r3, r0, #4
    4ca8:	428b      	cmp	r3, r1
    4caa:	d301      	bcc.n	4cb0 <__udivsi3+0xcc>
    4cac:	010b      	lsls	r3, r1, #4
    4cae:	1ac0      	subs	r0, r0, r3
    4cb0:	4152      	adcs	r2, r2
    4cb2:	08c3      	lsrs	r3, r0, #3
    4cb4:	428b      	cmp	r3, r1
    4cb6:	d301      	bcc.n	4cbc <__udivsi3+0xd8>
    4cb8:	00cb      	lsls	r3, r1, #3
    4cba:	1ac0      	subs	r0, r0, r3
    4cbc:	4152      	adcs	r2, r2
    4cbe:	0883      	lsrs	r3, r0, #2
    4cc0:	428b      	cmp	r3, r1
    4cc2:	d301      	bcc.n	4cc8 <__udivsi3+0xe4>
    4cc4:	008b      	lsls	r3, r1, #2
    4cc6:	1ac0      	subs	r0, r0, r3
    4cc8:	4152      	adcs	r2, r2
    4cca:	0843      	lsrs	r3, r0, #1
    4ccc:	428b      	cmp	r3, r1
    4cce:	d301      	bcc.n	4cd4 <__udivsi3+0xf0>
    4cd0:	004b      	lsls	r3, r1, #1
    4cd2:	1ac0      	subs	r0, r0, r3
    4cd4:	4152      	adcs	r2, r2
    4cd6:	1a41      	subs	r1, r0, r1
    4cd8:	d200      	bcs.n	4cdc <__udivsi3+0xf8>
    4cda:	4601      	mov	r1, r0
    4cdc:	4152      	adcs	r2, r2
    4cde:	4610      	mov	r0, r2
    4ce0:	4770      	bx	lr
    4ce2:	e7ff      	b.n	4ce4 <__udivsi3+0x100>
    4ce4:	b501      	push	{r0, lr}
    4ce6:	2000      	movs	r0, #0
    4ce8:	f000 f8f0 	bl	4ecc <__aeabi_idiv0>
    4cec:	bd02      	pop	{r1, pc}
    4cee:	46c0      	nop			; (mov r8, r8)

00004cf0 <__aeabi_uidivmod>:
    4cf0:	2900      	cmp	r1, #0
    4cf2:	d0f7      	beq.n	4ce4 <__udivsi3+0x100>
    4cf4:	e776      	b.n	4be4 <__udivsi3>
    4cf6:	4770      	bx	lr

00004cf8 <__divsi3>:
    4cf8:	4603      	mov	r3, r0
    4cfa:	430b      	orrs	r3, r1
    4cfc:	d47f      	bmi.n	4dfe <__divsi3+0x106>
    4cfe:	2200      	movs	r2, #0
    4d00:	0843      	lsrs	r3, r0, #1
    4d02:	428b      	cmp	r3, r1
    4d04:	d374      	bcc.n	4df0 <__divsi3+0xf8>
    4d06:	0903      	lsrs	r3, r0, #4
    4d08:	428b      	cmp	r3, r1
    4d0a:	d35f      	bcc.n	4dcc <__divsi3+0xd4>
    4d0c:	0a03      	lsrs	r3, r0, #8
    4d0e:	428b      	cmp	r3, r1
    4d10:	d344      	bcc.n	4d9c <__divsi3+0xa4>
    4d12:	0b03      	lsrs	r3, r0, #12
    4d14:	428b      	cmp	r3, r1
    4d16:	d328      	bcc.n	4d6a <__divsi3+0x72>
    4d18:	0c03      	lsrs	r3, r0, #16
    4d1a:	428b      	cmp	r3, r1
    4d1c:	d30d      	bcc.n	4d3a <__divsi3+0x42>
    4d1e:	22ff      	movs	r2, #255	; 0xff
    4d20:	0209      	lsls	r1, r1, #8
    4d22:	ba12      	rev	r2, r2
    4d24:	0c03      	lsrs	r3, r0, #16
    4d26:	428b      	cmp	r3, r1
    4d28:	d302      	bcc.n	4d30 <__divsi3+0x38>
    4d2a:	1212      	asrs	r2, r2, #8
    4d2c:	0209      	lsls	r1, r1, #8
    4d2e:	d065      	beq.n	4dfc <__divsi3+0x104>
    4d30:	0b03      	lsrs	r3, r0, #12
    4d32:	428b      	cmp	r3, r1
    4d34:	d319      	bcc.n	4d6a <__divsi3+0x72>
    4d36:	e000      	b.n	4d3a <__divsi3+0x42>
    4d38:	0a09      	lsrs	r1, r1, #8
    4d3a:	0bc3      	lsrs	r3, r0, #15
    4d3c:	428b      	cmp	r3, r1
    4d3e:	d301      	bcc.n	4d44 <__divsi3+0x4c>
    4d40:	03cb      	lsls	r3, r1, #15
    4d42:	1ac0      	subs	r0, r0, r3
    4d44:	4152      	adcs	r2, r2
    4d46:	0b83      	lsrs	r3, r0, #14
    4d48:	428b      	cmp	r3, r1
    4d4a:	d301      	bcc.n	4d50 <__divsi3+0x58>
    4d4c:	038b      	lsls	r3, r1, #14
    4d4e:	1ac0      	subs	r0, r0, r3
    4d50:	4152      	adcs	r2, r2
    4d52:	0b43      	lsrs	r3, r0, #13
    4d54:	428b      	cmp	r3, r1
    4d56:	d301      	bcc.n	4d5c <__divsi3+0x64>
    4d58:	034b      	lsls	r3, r1, #13
    4d5a:	1ac0      	subs	r0, r0, r3
    4d5c:	4152      	adcs	r2, r2
    4d5e:	0b03      	lsrs	r3, r0, #12
    4d60:	428b      	cmp	r3, r1
    4d62:	d301      	bcc.n	4d68 <__divsi3+0x70>
    4d64:	030b      	lsls	r3, r1, #12
    4d66:	1ac0      	subs	r0, r0, r3
    4d68:	4152      	adcs	r2, r2
    4d6a:	0ac3      	lsrs	r3, r0, #11
    4d6c:	428b      	cmp	r3, r1
    4d6e:	d301      	bcc.n	4d74 <__divsi3+0x7c>
    4d70:	02cb      	lsls	r3, r1, #11
    4d72:	1ac0      	subs	r0, r0, r3
    4d74:	4152      	adcs	r2, r2
    4d76:	0a83      	lsrs	r3, r0, #10
    4d78:	428b      	cmp	r3, r1
    4d7a:	d301      	bcc.n	4d80 <__divsi3+0x88>
    4d7c:	028b      	lsls	r3, r1, #10
    4d7e:	1ac0      	subs	r0, r0, r3
    4d80:	4152      	adcs	r2, r2
    4d82:	0a43      	lsrs	r3, r0, #9
    4d84:	428b      	cmp	r3, r1
    4d86:	d301      	bcc.n	4d8c <__divsi3+0x94>
    4d88:	024b      	lsls	r3, r1, #9
    4d8a:	1ac0      	subs	r0, r0, r3
    4d8c:	4152      	adcs	r2, r2
    4d8e:	0a03      	lsrs	r3, r0, #8
    4d90:	428b      	cmp	r3, r1
    4d92:	d301      	bcc.n	4d98 <__divsi3+0xa0>
    4d94:	020b      	lsls	r3, r1, #8
    4d96:	1ac0      	subs	r0, r0, r3
    4d98:	4152      	adcs	r2, r2
    4d9a:	d2cd      	bcs.n	4d38 <__divsi3+0x40>
    4d9c:	09c3      	lsrs	r3, r0, #7
    4d9e:	428b      	cmp	r3, r1
    4da0:	d301      	bcc.n	4da6 <__divsi3+0xae>
    4da2:	01cb      	lsls	r3, r1, #7
    4da4:	1ac0      	subs	r0, r0, r3
    4da6:	4152      	adcs	r2, r2
    4da8:	0983      	lsrs	r3, r0, #6
    4daa:	428b      	cmp	r3, r1
    4dac:	d301      	bcc.n	4db2 <__divsi3+0xba>
    4dae:	018b      	lsls	r3, r1, #6
    4db0:	1ac0      	subs	r0, r0, r3
    4db2:	4152      	adcs	r2, r2
    4db4:	0943      	lsrs	r3, r0, #5
    4db6:	428b      	cmp	r3, r1
    4db8:	d301      	bcc.n	4dbe <__divsi3+0xc6>
    4dba:	014b      	lsls	r3, r1, #5
    4dbc:	1ac0      	subs	r0, r0, r3
    4dbe:	4152      	adcs	r2, r2
    4dc0:	0903      	lsrs	r3, r0, #4
    4dc2:	428b      	cmp	r3, r1
    4dc4:	d301      	bcc.n	4dca <__divsi3+0xd2>
    4dc6:	010b      	lsls	r3, r1, #4
    4dc8:	1ac0      	subs	r0, r0, r3
    4dca:	4152      	adcs	r2, r2
    4dcc:	08c3      	lsrs	r3, r0, #3
    4dce:	428b      	cmp	r3, r1
    4dd0:	d301      	bcc.n	4dd6 <__divsi3+0xde>
    4dd2:	00cb      	lsls	r3, r1, #3
    4dd4:	1ac0      	subs	r0, r0, r3
    4dd6:	4152      	adcs	r2, r2
    4dd8:	0883      	lsrs	r3, r0, #2
    4dda:	428b      	cmp	r3, r1
    4ddc:	d301      	bcc.n	4de2 <__divsi3+0xea>
    4dde:	008b      	lsls	r3, r1, #2
    4de0:	1ac0      	subs	r0, r0, r3
    4de2:	4152      	adcs	r2, r2
    4de4:	0843      	lsrs	r3, r0, #1
    4de6:	428b      	cmp	r3, r1
    4de8:	d301      	bcc.n	4dee <__divsi3+0xf6>
    4dea:	004b      	lsls	r3, r1, #1
    4dec:	1ac0      	subs	r0, r0, r3
    4dee:	4152      	adcs	r2, r2
    4df0:	1a41      	subs	r1, r0, r1
    4df2:	d200      	bcs.n	4df6 <__divsi3+0xfe>
    4df4:	4601      	mov	r1, r0
    4df6:	4152      	adcs	r2, r2
    4df8:	4610      	mov	r0, r2
    4dfa:	4770      	bx	lr
    4dfc:	e05d      	b.n	4eba <__divsi3+0x1c2>
    4dfe:	0fca      	lsrs	r2, r1, #31
    4e00:	d000      	beq.n	4e04 <__divsi3+0x10c>
    4e02:	4249      	negs	r1, r1
    4e04:	1003      	asrs	r3, r0, #32
    4e06:	d300      	bcc.n	4e0a <__divsi3+0x112>
    4e08:	4240      	negs	r0, r0
    4e0a:	4053      	eors	r3, r2
    4e0c:	2200      	movs	r2, #0
    4e0e:	469c      	mov	ip, r3
    4e10:	0903      	lsrs	r3, r0, #4
    4e12:	428b      	cmp	r3, r1
    4e14:	d32d      	bcc.n	4e72 <__divsi3+0x17a>
    4e16:	0a03      	lsrs	r3, r0, #8
    4e18:	428b      	cmp	r3, r1
    4e1a:	d312      	bcc.n	4e42 <__divsi3+0x14a>
    4e1c:	22fc      	movs	r2, #252	; 0xfc
    4e1e:	0189      	lsls	r1, r1, #6
    4e20:	ba12      	rev	r2, r2
    4e22:	0a03      	lsrs	r3, r0, #8
    4e24:	428b      	cmp	r3, r1
    4e26:	d30c      	bcc.n	4e42 <__divsi3+0x14a>
    4e28:	0189      	lsls	r1, r1, #6
    4e2a:	1192      	asrs	r2, r2, #6
    4e2c:	428b      	cmp	r3, r1
    4e2e:	d308      	bcc.n	4e42 <__divsi3+0x14a>
    4e30:	0189      	lsls	r1, r1, #6
    4e32:	1192      	asrs	r2, r2, #6
    4e34:	428b      	cmp	r3, r1
    4e36:	d304      	bcc.n	4e42 <__divsi3+0x14a>
    4e38:	0189      	lsls	r1, r1, #6
    4e3a:	d03a      	beq.n	4eb2 <__divsi3+0x1ba>
    4e3c:	1192      	asrs	r2, r2, #6
    4e3e:	e000      	b.n	4e42 <__divsi3+0x14a>
    4e40:	0989      	lsrs	r1, r1, #6
    4e42:	09c3      	lsrs	r3, r0, #7
    4e44:	428b      	cmp	r3, r1
    4e46:	d301      	bcc.n	4e4c <__divsi3+0x154>
    4e48:	01cb      	lsls	r3, r1, #7
    4e4a:	1ac0      	subs	r0, r0, r3
    4e4c:	4152      	adcs	r2, r2
    4e4e:	0983      	lsrs	r3, r0, #6
    4e50:	428b      	cmp	r3, r1
    4e52:	d301      	bcc.n	4e58 <__divsi3+0x160>
    4e54:	018b      	lsls	r3, r1, #6
    4e56:	1ac0      	subs	r0, r0, r3
    4e58:	4152      	adcs	r2, r2
    4e5a:	0943      	lsrs	r3, r0, #5
    4e5c:	428b      	cmp	r3, r1
    4e5e:	d301      	bcc.n	4e64 <__divsi3+0x16c>
    4e60:	014b      	lsls	r3, r1, #5
    4e62:	1ac0      	subs	r0, r0, r3
    4e64:	4152      	adcs	r2, r2
    4e66:	0903      	lsrs	r3, r0, #4
    4e68:	428b      	cmp	r3, r1
    4e6a:	d301      	bcc.n	4e70 <__divsi3+0x178>
    4e6c:	010b      	lsls	r3, r1, #4
    4e6e:	1ac0      	subs	r0, r0, r3
    4e70:	4152      	adcs	r2, r2
    4e72:	08c3      	lsrs	r3, r0, #3
    4e74:	428b      	cmp	r3, r1
    4e76:	d301      	bcc.n	4e7c <__divsi3+0x184>
    4e78:	00cb      	lsls	r3, r1, #3
    4e7a:	1ac0      	subs	r0, r0, r3
    4e7c:	4152      	adcs	r2, r2
    4e7e:	0883      	lsrs	r3, r0, #2
    4e80:	428b      	cmp	r3, r1
    4e82:	d301      	bcc.n	4e88 <__divsi3+0x190>
    4e84:	008b      	lsls	r3, r1, #2
    4e86:	1ac0      	subs	r0, r0, r3
    4e88:	4152      	adcs	r2, r2
    4e8a:	d2d9      	bcs.n	4e40 <__divsi3+0x148>
    4e8c:	0843      	lsrs	r3, r0, #1
    4e8e:	428b      	cmp	r3, r1
    4e90:	d301      	bcc.n	4e96 <__divsi3+0x19e>
    4e92:	004b      	lsls	r3, r1, #1
    4e94:	1ac0      	subs	r0, r0, r3
    4e96:	4152      	adcs	r2, r2
    4e98:	1a41      	subs	r1, r0, r1
    4e9a:	d200      	bcs.n	4e9e <__divsi3+0x1a6>
    4e9c:	4601      	mov	r1, r0
    4e9e:	4663      	mov	r3, ip
    4ea0:	4152      	adcs	r2, r2
    4ea2:	105b      	asrs	r3, r3, #1
    4ea4:	4610      	mov	r0, r2
    4ea6:	d301      	bcc.n	4eac <__divsi3+0x1b4>
    4ea8:	4240      	negs	r0, r0
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d500      	bpl.n	4eb0 <__divsi3+0x1b8>
    4eae:	4249      	negs	r1, r1
    4eb0:	4770      	bx	lr
    4eb2:	4663      	mov	r3, ip
    4eb4:	105b      	asrs	r3, r3, #1
    4eb6:	d300      	bcc.n	4eba <__divsi3+0x1c2>
    4eb8:	4240      	negs	r0, r0
    4eba:	b501      	push	{r0, lr}
    4ebc:	2000      	movs	r0, #0
    4ebe:	f000 f805 	bl	4ecc <__aeabi_idiv0>
    4ec2:	bd02      	pop	{r1, pc}

00004ec4 <__aeabi_idivmod>:
    4ec4:	2900      	cmp	r1, #0
    4ec6:	d0f8      	beq.n	4eba <__divsi3+0x1c2>
    4ec8:	e716      	b.n	4cf8 <__divsi3>
    4eca:	4770      	bx	lr

00004ecc <__aeabi_idiv0>:
    4ecc:	4770      	bx	lr
    4ece:	46c0      	nop			; (mov r8, r8)

00004ed0 <__clzsi2>:
    4ed0:	211c      	movs	r1, #28
    4ed2:	2301      	movs	r3, #1
    4ed4:	041b      	lsls	r3, r3, #16
    4ed6:	4298      	cmp	r0, r3
    4ed8:	d301      	bcc.n	4ede <__clzsi2+0xe>
    4eda:	0c00      	lsrs	r0, r0, #16
    4edc:	3910      	subs	r1, #16
    4ede:	0a1b      	lsrs	r3, r3, #8
    4ee0:	4298      	cmp	r0, r3
    4ee2:	d301      	bcc.n	4ee8 <__clzsi2+0x18>
    4ee4:	0a00      	lsrs	r0, r0, #8
    4ee6:	3908      	subs	r1, #8
    4ee8:	091b      	lsrs	r3, r3, #4
    4eea:	4298      	cmp	r0, r3
    4eec:	d301      	bcc.n	4ef2 <__clzsi2+0x22>
    4eee:	0900      	lsrs	r0, r0, #4
    4ef0:	3904      	subs	r1, #4
    4ef2:	a202      	add	r2, pc, #8	; (adr r2, 4efc <__clzsi2+0x2c>)
    4ef4:	5c10      	ldrb	r0, [r2, r0]
    4ef6:	1840      	adds	r0, r0, r1
    4ef8:	4770      	bx	lr
    4efa:	46c0      	nop			; (mov r8, r8)
    4efc:	02020304 	.word	0x02020304
    4f00:	01010101 	.word	0x01010101
	...

00004f0c <__ctzsi2>:
    4f0c:	4241      	negs	r1, r0
    4f0e:	4008      	ands	r0, r1
    4f10:	211c      	movs	r1, #28
    4f12:	2301      	movs	r3, #1
    4f14:	041b      	lsls	r3, r3, #16
    4f16:	4298      	cmp	r0, r3
    4f18:	d301      	bcc.n	4f1e <__ctzsi2+0x12>
    4f1a:	0c00      	lsrs	r0, r0, #16
    4f1c:	3910      	subs	r1, #16
    4f1e:	0a1b      	lsrs	r3, r3, #8
    4f20:	4298      	cmp	r0, r3
    4f22:	d301      	bcc.n	4f28 <__ctzsi2+0x1c>
    4f24:	0a00      	lsrs	r0, r0, #8
    4f26:	3908      	subs	r1, #8
    4f28:	091b      	lsrs	r3, r3, #4
    4f2a:	4298      	cmp	r0, r3
    4f2c:	d301      	bcc.n	4f32 <__ctzsi2+0x26>
    4f2e:	0900      	lsrs	r0, r0, #4
    4f30:	3904      	subs	r1, #4
    4f32:	a202      	add	r2, pc, #8	; (adr r2, 4f3c <__ctzsi2+0x30>)
    4f34:	5c10      	ldrb	r0, [r2, r0]
    4f36:	1a40      	subs	r0, r0, r1
    4f38:	4770      	bx	lr
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	1d1d1c1b 	.word	0x1d1d1c1b
    4f40:	1e1e1e1e 	.word	0x1e1e1e1e
    4f44:	1f1f1f1f 	.word	0x1f1f1f1f
    4f48:	1f1f1f1f 	.word	0x1f1f1f1f

00004f4c <__aeabi_d2uiz>:
    4f4c:	b570      	push	{r4, r5, r6, lr}
    4f4e:	2200      	movs	r2, #0
    4f50:	4b0c      	ldr	r3, [pc, #48]	; (4f84 <__aeabi_d2uiz+0x38>)
    4f52:	0004      	movs	r4, r0
    4f54:	000d      	movs	r5, r1
    4f56:	f001 f98b 	bl	6270 <__aeabi_dcmpge>
    4f5a:	2800      	cmp	r0, #0
    4f5c:	d104      	bne.n	4f68 <__aeabi_d2uiz+0x1c>
    4f5e:	0020      	movs	r0, r4
    4f60:	0029      	movs	r1, r5
    4f62:	f001 f8db 	bl	611c <__aeabi_d2iz>
    4f66:	bd70      	pop	{r4, r5, r6, pc}
    4f68:	4b06      	ldr	r3, [pc, #24]	; (4f84 <__aeabi_d2uiz+0x38>)
    4f6a:	2200      	movs	r2, #0
    4f6c:	0020      	movs	r0, r4
    4f6e:	0029      	movs	r1, r5
    4f70:	f000 fdbe 	bl	5af0 <__aeabi_dsub>
    4f74:	f001 f8d2 	bl	611c <__aeabi_d2iz>
    4f78:	2380      	movs	r3, #128	; 0x80
    4f7a:	061b      	lsls	r3, r3, #24
    4f7c:	469c      	mov	ip, r3
    4f7e:	4460      	add	r0, ip
    4f80:	e7f1      	b.n	4f66 <__aeabi_d2uiz+0x1a>
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	41e00000 	.word	0x41e00000

00004f88 <__aeabi_ddiv>:
    4f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f8a:	4657      	mov	r7, sl
    4f8c:	4645      	mov	r5, r8
    4f8e:	46de      	mov	lr, fp
    4f90:	464e      	mov	r6, r9
    4f92:	b5e0      	push	{r5, r6, r7, lr}
    4f94:	004c      	lsls	r4, r1, #1
    4f96:	030e      	lsls	r6, r1, #12
    4f98:	b087      	sub	sp, #28
    4f9a:	4683      	mov	fp, r0
    4f9c:	4692      	mov	sl, r2
    4f9e:	001d      	movs	r5, r3
    4fa0:	4680      	mov	r8, r0
    4fa2:	0b36      	lsrs	r6, r6, #12
    4fa4:	0d64      	lsrs	r4, r4, #21
    4fa6:	0fcf      	lsrs	r7, r1, #31
    4fa8:	2c00      	cmp	r4, #0
    4faa:	d04f      	beq.n	504c <__aeabi_ddiv+0xc4>
    4fac:	4b6f      	ldr	r3, [pc, #444]	; (516c <__aeabi_ddiv+0x1e4>)
    4fae:	429c      	cmp	r4, r3
    4fb0:	d035      	beq.n	501e <__aeabi_ddiv+0x96>
    4fb2:	2380      	movs	r3, #128	; 0x80
    4fb4:	0f42      	lsrs	r2, r0, #29
    4fb6:	041b      	lsls	r3, r3, #16
    4fb8:	00f6      	lsls	r6, r6, #3
    4fba:	4313      	orrs	r3, r2
    4fbc:	4333      	orrs	r3, r6
    4fbe:	4699      	mov	r9, r3
    4fc0:	00c3      	lsls	r3, r0, #3
    4fc2:	4698      	mov	r8, r3
    4fc4:	4b6a      	ldr	r3, [pc, #424]	; (5170 <__aeabi_ddiv+0x1e8>)
    4fc6:	2600      	movs	r6, #0
    4fc8:	469c      	mov	ip, r3
    4fca:	2300      	movs	r3, #0
    4fcc:	4464      	add	r4, ip
    4fce:	9303      	str	r3, [sp, #12]
    4fd0:	032b      	lsls	r3, r5, #12
    4fd2:	0b1b      	lsrs	r3, r3, #12
    4fd4:	469b      	mov	fp, r3
    4fd6:	006b      	lsls	r3, r5, #1
    4fd8:	0fed      	lsrs	r5, r5, #31
    4fda:	4650      	mov	r0, sl
    4fdc:	0d5b      	lsrs	r3, r3, #21
    4fde:	9501      	str	r5, [sp, #4]
    4fe0:	d05e      	beq.n	50a0 <__aeabi_ddiv+0x118>
    4fe2:	4a62      	ldr	r2, [pc, #392]	; (516c <__aeabi_ddiv+0x1e4>)
    4fe4:	4293      	cmp	r3, r2
    4fe6:	d053      	beq.n	5090 <__aeabi_ddiv+0x108>
    4fe8:	465a      	mov	r2, fp
    4fea:	00d1      	lsls	r1, r2, #3
    4fec:	2280      	movs	r2, #128	; 0x80
    4fee:	0f40      	lsrs	r0, r0, #29
    4ff0:	0412      	lsls	r2, r2, #16
    4ff2:	4302      	orrs	r2, r0
    4ff4:	430a      	orrs	r2, r1
    4ff6:	4693      	mov	fp, r2
    4ff8:	4652      	mov	r2, sl
    4ffa:	00d1      	lsls	r1, r2, #3
    4ffc:	4a5c      	ldr	r2, [pc, #368]	; (5170 <__aeabi_ddiv+0x1e8>)
    4ffe:	4694      	mov	ip, r2
    5000:	2200      	movs	r2, #0
    5002:	4463      	add	r3, ip
    5004:	0038      	movs	r0, r7
    5006:	4068      	eors	r0, r5
    5008:	4684      	mov	ip, r0
    500a:	9002      	str	r0, [sp, #8]
    500c:	1ae4      	subs	r4, r4, r3
    500e:	4316      	orrs	r6, r2
    5010:	2e0f      	cmp	r6, #15
    5012:	d900      	bls.n	5016 <__aeabi_ddiv+0x8e>
    5014:	e0b4      	b.n	5180 <__aeabi_ddiv+0x1f8>
    5016:	4b57      	ldr	r3, [pc, #348]	; (5174 <__aeabi_ddiv+0x1ec>)
    5018:	00b6      	lsls	r6, r6, #2
    501a:	599b      	ldr	r3, [r3, r6]
    501c:	469f      	mov	pc, r3
    501e:	0003      	movs	r3, r0
    5020:	4333      	orrs	r3, r6
    5022:	4699      	mov	r9, r3
    5024:	d16c      	bne.n	5100 <__aeabi_ddiv+0x178>
    5026:	2300      	movs	r3, #0
    5028:	4698      	mov	r8, r3
    502a:	3302      	adds	r3, #2
    502c:	2608      	movs	r6, #8
    502e:	9303      	str	r3, [sp, #12]
    5030:	e7ce      	b.n	4fd0 <__aeabi_ddiv+0x48>
    5032:	46cb      	mov	fp, r9
    5034:	4641      	mov	r1, r8
    5036:	9a03      	ldr	r2, [sp, #12]
    5038:	9701      	str	r7, [sp, #4]
    503a:	2a02      	cmp	r2, #2
    503c:	d165      	bne.n	510a <__aeabi_ddiv+0x182>
    503e:	9b01      	ldr	r3, [sp, #4]
    5040:	4c4a      	ldr	r4, [pc, #296]	; (516c <__aeabi_ddiv+0x1e4>)
    5042:	469c      	mov	ip, r3
    5044:	2300      	movs	r3, #0
    5046:	2200      	movs	r2, #0
    5048:	4698      	mov	r8, r3
    504a:	e06b      	b.n	5124 <__aeabi_ddiv+0x19c>
    504c:	0003      	movs	r3, r0
    504e:	4333      	orrs	r3, r6
    5050:	4699      	mov	r9, r3
    5052:	d04e      	beq.n	50f2 <__aeabi_ddiv+0x16a>
    5054:	2e00      	cmp	r6, #0
    5056:	d100      	bne.n	505a <__aeabi_ddiv+0xd2>
    5058:	e1bc      	b.n	53d4 <__aeabi_ddiv+0x44c>
    505a:	0030      	movs	r0, r6
    505c:	f7ff ff38 	bl	4ed0 <__clzsi2>
    5060:	0003      	movs	r3, r0
    5062:	3b0b      	subs	r3, #11
    5064:	2b1c      	cmp	r3, #28
    5066:	dd00      	ble.n	506a <__aeabi_ddiv+0xe2>
    5068:	e1ac      	b.n	53c4 <__aeabi_ddiv+0x43c>
    506a:	221d      	movs	r2, #29
    506c:	1ad3      	subs	r3, r2, r3
    506e:	465a      	mov	r2, fp
    5070:	0001      	movs	r1, r0
    5072:	40da      	lsrs	r2, r3
    5074:	3908      	subs	r1, #8
    5076:	408e      	lsls	r6, r1
    5078:	0013      	movs	r3, r2
    507a:	4333      	orrs	r3, r6
    507c:	4699      	mov	r9, r3
    507e:	465b      	mov	r3, fp
    5080:	408b      	lsls	r3, r1
    5082:	4698      	mov	r8, r3
    5084:	2300      	movs	r3, #0
    5086:	4c3c      	ldr	r4, [pc, #240]	; (5178 <__aeabi_ddiv+0x1f0>)
    5088:	2600      	movs	r6, #0
    508a:	1a24      	subs	r4, r4, r0
    508c:	9303      	str	r3, [sp, #12]
    508e:	e79f      	b.n	4fd0 <__aeabi_ddiv+0x48>
    5090:	4651      	mov	r1, sl
    5092:	465a      	mov	r2, fp
    5094:	4311      	orrs	r1, r2
    5096:	d129      	bne.n	50ec <__aeabi_ddiv+0x164>
    5098:	2200      	movs	r2, #0
    509a:	4693      	mov	fp, r2
    509c:	3202      	adds	r2, #2
    509e:	e7b1      	b.n	5004 <__aeabi_ddiv+0x7c>
    50a0:	4659      	mov	r1, fp
    50a2:	4301      	orrs	r1, r0
    50a4:	d01e      	beq.n	50e4 <__aeabi_ddiv+0x15c>
    50a6:	465b      	mov	r3, fp
    50a8:	2b00      	cmp	r3, #0
    50aa:	d100      	bne.n	50ae <__aeabi_ddiv+0x126>
    50ac:	e19e      	b.n	53ec <__aeabi_ddiv+0x464>
    50ae:	4658      	mov	r0, fp
    50b0:	f7ff ff0e 	bl	4ed0 <__clzsi2>
    50b4:	0003      	movs	r3, r0
    50b6:	3b0b      	subs	r3, #11
    50b8:	2b1c      	cmp	r3, #28
    50ba:	dd00      	ble.n	50be <__aeabi_ddiv+0x136>
    50bc:	e18f      	b.n	53de <__aeabi_ddiv+0x456>
    50be:	0002      	movs	r2, r0
    50c0:	4659      	mov	r1, fp
    50c2:	3a08      	subs	r2, #8
    50c4:	4091      	lsls	r1, r2
    50c6:	468b      	mov	fp, r1
    50c8:	211d      	movs	r1, #29
    50ca:	1acb      	subs	r3, r1, r3
    50cc:	4651      	mov	r1, sl
    50ce:	40d9      	lsrs	r1, r3
    50d0:	000b      	movs	r3, r1
    50d2:	4659      	mov	r1, fp
    50d4:	430b      	orrs	r3, r1
    50d6:	4651      	mov	r1, sl
    50d8:	469b      	mov	fp, r3
    50da:	4091      	lsls	r1, r2
    50dc:	4b26      	ldr	r3, [pc, #152]	; (5178 <__aeabi_ddiv+0x1f0>)
    50de:	2200      	movs	r2, #0
    50e0:	1a1b      	subs	r3, r3, r0
    50e2:	e78f      	b.n	5004 <__aeabi_ddiv+0x7c>
    50e4:	2300      	movs	r3, #0
    50e6:	2201      	movs	r2, #1
    50e8:	469b      	mov	fp, r3
    50ea:	e78b      	b.n	5004 <__aeabi_ddiv+0x7c>
    50ec:	4651      	mov	r1, sl
    50ee:	2203      	movs	r2, #3
    50f0:	e788      	b.n	5004 <__aeabi_ddiv+0x7c>
    50f2:	2300      	movs	r3, #0
    50f4:	4698      	mov	r8, r3
    50f6:	3301      	adds	r3, #1
    50f8:	2604      	movs	r6, #4
    50fa:	2400      	movs	r4, #0
    50fc:	9303      	str	r3, [sp, #12]
    50fe:	e767      	b.n	4fd0 <__aeabi_ddiv+0x48>
    5100:	2303      	movs	r3, #3
    5102:	46b1      	mov	r9, r6
    5104:	9303      	str	r3, [sp, #12]
    5106:	260c      	movs	r6, #12
    5108:	e762      	b.n	4fd0 <__aeabi_ddiv+0x48>
    510a:	2a03      	cmp	r2, #3
    510c:	d100      	bne.n	5110 <__aeabi_ddiv+0x188>
    510e:	e25c      	b.n	55ca <__aeabi_ddiv+0x642>
    5110:	9b01      	ldr	r3, [sp, #4]
    5112:	2a01      	cmp	r2, #1
    5114:	d000      	beq.n	5118 <__aeabi_ddiv+0x190>
    5116:	e1e4      	b.n	54e2 <__aeabi_ddiv+0x55a>
    5118:	4013      	ands	r3, r2
    511a:	469c      	mov	ip, r3
    511c:	2300      	movs	r3, #0
    511e:	2400      	movs	r4, #0
    5120:	2200      	movs	r2, #0
    5122:	4698      	mov	r8, r3
    5124:	2100      	movs	r1, #0
    5126:	0312      	lsls	r2, r2, #12
    5128:	0b13      	lsrs	r3, r2, #12
    512a:	0d0a      	lsrs	r2, r1, #20
    512c:	0512      	lsls	r2, r2, #20
    512e:	431a      	orrs	r2, r3
    5130:	0523      	lsls	r3, r4, #20
    5132:	4c12      	ldr	r4, [pc, #72]	; (517c <__aeabi_ddiv+0x1f4>)
    5134:	4640      	mov	r0, r8
    5136:	4022      	ands	r2, r4
    5138:	4313      	orrs	r3, r2
    513a:	4662      	mov	r2, ip
    513c:	005b      	lsls	r3, r3, #1
    513e:	07d2      	lsls	r2, r2, #31
    5140:	085b      	lsrs	r3, r3, #1
    5142:	4313      	orrs	r3, r2
    5144:	0019      	movs	r1, r3
    5146:	b007      	add	sp, #28
    5148:	bc3c      	pop	{r2, r3, r4, r5}
    514a:	4690      	mov	r8, r2
    514c:	4699      	mov	r9, r3
    514e:	46a2      	mov	sl, r4
    5150:	46ab      	mov	fp, r5
    5152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5154:	2300      	movs	r3, #0
    5156:	2280      	movs	r2, #128	; 0x80
    5158:	469c      	mov	ip, r3
    515a:	0312      	lsls	r2, r2, #12
    515c:	4698      	mov	r8, r3
    515e:	4c03      	ldr	r4, [pc, #12]	; (516c <__aeabi_ddiv+0x1e4>)
    5160:	e7e0      	b.n	5124 <__aeabi_ddiv+0x19c>
    5162:	2300      	movs	r3, #0
    5164:	4c01      	ldr	r4, [pc, #4]	; (516c <__aeabi_ddiv+0x1e4>)
    5166:	2200      	movs	r2, #0
    5168:	4698      	mov	r8, r3
    516a:	e7db      	b.n	5124 <__aeabi_ddiv+0x19c>
    516c:	000007ff 	.word	0x000007ff
    5170:	fffffc01 	.word	0xfffffc01
    5174:	00006f78 	.word	0x00006f78
    5178:	fffffc0d 	.word	0xfffffc0d
    517c:	800fffff 	.word	0x800fffff
    5180:	45d9      	cmp	r9, fp
    5182:	d900      	bls.n	5186 <__aeabi_ddiv+0x1fe>
    5184:	e139      	b.n	53fa <__aeabi_ddiv+0x472>
    5186:	d100      	bne.n	518a <__aeabi_ddiv+0x202>
    5188:	e134      	b.n	53f4 <__aeabi_ddiv+0x46c>
    518a:	2300      	movs	r3, #0
    518c:	4646      	mov	r6, r8
    518e:	464d      	mov	r5, r9
    5190:	469a      	mov	sl, r3
    5192:	3c01      	subs	r4, #1
    5194:	465b      	mov	r3, fp
    5196:	0e0a      	lsrs	r2, r1, #24
    5198:	021b      	lsls	r3, r3, #8
    519a:	431a      	orrs	r2, r3
    519c:	020b      	lsls	r3, r1, #8
    519e:	0c17      	lsrs	r7, r2, #16
    51a0:	9303      	str	r3, [sp, #12]
    51a2:	0413      	lsls	r3, r2, #16
    51a4:	0c1b      	lsrs	r3, r3, #16
    51a6:	0039      	movs	r1, r7
    51a8:	0028      	movs	r0, r5
    51aa:	4690      	mov	r8, r2
    51ac:	9301      	str	r3, [sp, #4]
    51ae:	f7ff fd19 	bl	4be4 <__udivsi3>
    51b2:	0002      	movs	r2, r0
    51b4:	9b01      	ldr	r3, [sp, #4]
    51b6:	4683      	mov	fp, r0
    51b8:	435a      	muls	r2, r3
    51ba:	0028      	movs	r0, r5
    51bc:	0039      	movs	r1, r7
    51be:	4691      	mov	r9, r2
    51c0:	f7ff fd96 	bl	4cf0 <__aeabi_uidivmod>
    51c4:	0c35      	lsrs	r5, r6, #16
    51c6:	0409      	lsls	r1, r1, #16
    51c8:	430d      	orrs	r5, r1
    51ca:	45a9      	cmp	r9, r5
    51cc:	d90d      	bls.n	51ea <__aeabi_ddiv+0x262>
    51ce:	465b      	mov	r3, fp
    51d0:	4445      	add	r5, r8
    51d2:	3b01      	subs	r3, #1
    51d4:	45a8      	cmp	r8, r5
    51d6:	d900      	bls.n	51da <__aeabi_ddiv+0x252>
    51d8:	e13a      	b.n	5450 <__aeabi_ddiv+0x4c8>
    51da:	45a9      	cmp	r9, r5
    51dc:	d800      	bhi.n	51e0 <__aeabi_ddiv+0x258>
    51de:	e137      	b.n	5450 <__aeabi_ddiv+0x4c8>
    51e0:	2302      	movs	r3, #2
    51e2:	425b      	negs	r3, r3
    51e4:	469c      	mov	ip, r3
    51e6:	4445      	add	r5, r8
    51e8:	44e3      	add	fp, ip
    51ea:	464b      	mov	r3, r9
    51ec:	1aeb      	subs	r3, r5, r3
    51ee:	0039      	movs	r1, r7
    51f0:	0018      	movs	r0, r3
    51f2:	9304      	str	r3, [sp, #16]
    51f4:	f7ff fcf6 	bl	4be4 <__udivsi3>
    51f8:	9b01      	ldr	r3, [sp, #4]
    51fa:	0005      	movs	r5, r0
    51fc:	4343      	muls	r3, r0
    51fe:	0039      	movs	r1, r7
    5200:	9804      	ldr	r0, [sp, #16]
    5202:	4699      	mov	r9, r3
    5204:	f7ff fd74 	bl	4cf0 <__aeabi_uidivmod>
    5208:	0433      	lsls	r3, r6, #16
    520a:	0409      	lsls	r1, r1, #16
    520c:	0c1b      	lsrs	r3, r3, #16
    520e:	430b      	orrs	r3, r1
    5210:	4599      	cmp	r9, r3
    5212:	d909      	bls.n	5228 <__aeabi_ddiv+0x2a0>
    5214:	4443      	add	r3, r8
    5216:	1e6a      	subs	r2, r5, #1
    5218:	4598      	cmp	r8, r3
    521a:	d900      	bls.n	521e <__aeabi_ddiv+0x296>
    521c:	e11a      	b.n	5454 <__aeabi_ddiv+0x4cc>
    521e:	4599      	cmp	r9, r3
    5220:	d800      	bhi.n	5224 <__aeabi_ddiv+0x29c>
    5222:	e117      	b.n	5454 <__aeabi_ddiv+0x4cc>
    5224:	3d02      	subs	r5, #2
    5226:	4443      	add	r3, r8
    5228:	464a      	mov	r2, r9
    522a:	1a9b      	subs	r3, r3, r2
    522c:	465a      	mov	r2, fp
    522e:	0412      	lsls	r2, r2, #16
    5230:	432a      	orrs	r2, r5
    5232:	9903      	ldr	r1, [sp, #12]
    5234:	4693      	mov	fp, r2
    5236:	0c10      	lsrs	r0, r2, #16
    5238:	0c0a      	lsrs	r2, r1, #16
    523a:	4691      	mov	r9, r2
    523c:	0409      	lsls	r1, r1, #16
    523e:	465a      	mov	r2, fp
    5240:	0c09      	lsrs	r1, r1, #16
    5242:	464e      	mov	r6, r9
    5244:	000d      	movs	r5, r1
    5246:	0412      	lsls	r2, r2, #16
    5248:	0c12      	lsrs	r2, r2, #16
    524a:	4345      	muls	r5, r0
    524c:	9105      	str	r1, [sp, #20]
    524e:	4351      	muls	r1, r2
    5250:	4372      	muls	r2, r6
    5252:	4370      	muls	r0, r6
    5254:	1952      	adds	r2, r2, r5
    5256:	0c0e      	lsrs	r6, r1, #16
    5258:	18b2      	adds	r2, r6, r2
    525a:	4295      	cmp	r5, r2
    525c:	d903      	bls.n	5266 <__aeabi_ddiv+0x2de>
    525e:	2580      	movs	r5, #128	; 0x80
    5260:	026d      	lsls	r5, r5, #9
    5262:	46ac      	mov	ip, r5
    5264:	4460      	add	r0, ip
    5266:	0c15      	lsrs	r5, r2, #16
    5268:	0409      	lsls	r1, r1, #16
    526a:	0412      	lsls	r2, r2, #16
    526c:	0c09      	lsrs	r1, r1, #16
    526e:	1828      	adds	r0, r5, r0
    5270:	1852      	adds	r2, r2, r1
    5272:	4283      	cmp	r3, r0
    5274:	d200      	bcs.n	5278 <__aeabi_ddiv+0x2f0>
    5276:	e0ce      	b.n	5416 <__aeabi_ddiv+0x48e>
    5278:	d100      	bne.n	527c <__aeabi_ddiv+0x2f4>
    527a:	e0c8      	b.n	540e <__aeabi_ddiv+0x486>
    527c:	1a1d      	subs	r5, r3, r0
    527e:	4653      	mov	r3, sl
    5280:	1a9e      	subs	r6, r3, r2
    5282:	45b2      	cmp	sl, r6
    5284:	4192      	sbcs	r2, r2
    5286:	4252      	negs	r2, r2
    5288:	1aab      	subs	r3, r5, r2
    528a:	469a      	mov	sl, r3
    528c:	4598      	cmp	r8, r3
    528e:	d100      	bne.n	5292 <__aeabi_ddiv+0x30a>
    5290:	e117      	b.n	54c2 <__aeabi_ddiv+0x53a>
    5292:	0039      	movs	r1, r7
    5294:	0018      	movs	r0, r3
    5296:	f7ff fca5 	bl	4be4 <__udivsi3>
    529a:	9b01      	ldr	r3, [sp, #4]
    529c:	0005      	movs	r5, r0
    529e:	4343      	muls	r3, r0
    52a0:	0039      	movs	r1, r7
    52a2:	4650      	mov	r0, sl
    52a4:	9304      	str	r3, [sp, #16]
    52a6:	f7ff fd23 	bl	4cf0 <__aeabi_uidivmod>
    52aa:	9804      	ldr	r0, [sp, #16]
    52ac:	040b      	lsls	r3, r1, #16
    52ae:	0c31      	lsrs	r1, r6, #16
    52b0:	4319      	orrs	r1, r3
    52b2:	4288      	cmp	r0, r1
    52b4:	d909      	bls.n	52ca <__aeabi_ddiv+0x342>
    52b6:	4441      	add	r1, r8
    52b8:	1e6b      	subs	r3, r5, #1
    52ba:	4588      	cmp	r8, r1
    52bc:	d900      	bls.n	52c0 <__aeabi_ddiv+0x338>
    52be:	e107      	b.n	54d0 <__aeabi_ddiv+0x548>
    52c0:	4288      	cmp	r0, r1
    52c2:	d800      	bhi.n	52c6 <__aeabi_ddiv+0x33e>
    52c4:	e104      	b.n	54d0 <__aeabi_ddiv+0x548>
    52c6:	3d02      	subs	r5, #2
    52c8:	4441      	add	r1, r8
    52ca:	9b04      	ldr	r3, [sp, #16]
    52cc:	1acb      	subs	r3, r1, r3
    52ce:	0018      	movs	r0, r3
    52d0:	0039      	movs	r1, r7
    52d2:	9304      	str	r3, [sp, #16]
    52d4:	f7ff fc86 	bl	4be4 <__udivsi3>
    52d8:	9b01      	ldr	r3, [sp, #4]
    52da:	4682      	mov	sl, r0
    52dc:	4343      	muls	r3, r0
    52de:	0039      	movs	r1, r7
    52e0:	9804      	ldr	r0, [sp, #16]
    52e2:	9301      	str	r3, [sp, #4]
    52e4:	f7ff fd04 	bl	4cf0 <__aeabi_uidivmod>
    52e8:	9801      	ldr	r0, [sp, #4]
    52ea:	040b      	lsls	r3, r1, #16
    52ec:	0431      	lsls	r1, r6, #16
    52ee:	0c09      	lsrs	r1, r1, #16
    52f0:	4319      	orrs	r1, r3
    52f2:	4288      	cmp	r0, r1
    52f4:	d90d      	bls.n	5312 <__aeabi_ddiv+0x38a>
    52f6:	4653      	mov	r3, sl
    52f8:	4441      	add	r1, r8
    52fa:	3b01      	subs	r3, #1
    52fc:	4588      	cmp	r8, r1
    52fe:	d900      	bls.n	5302 <__aeabi_ddiv+0x37a>
    5300:	e0e8      	b.n	54d4 <__aeabi_ddiv+0x54c>
    5302:	4288      	cmp	r0, r1
    5304:	d800      	bhi.n	5308 <__aeabi_ddiv+0x380>
    5306:	e0e5      	b.n	54d4 <__aeabi_ddiv+0x54c>
    5308:	2302      	movs	r3, #2
    530a:	425b      	negs	r3, r3
    530c:	469c      	mov	ip, r3
    530e:	4441      	add	r1, r8
    5310:	44e2      	add	sl, ip
    5312:	9b01      	ldr	r3, [sp, #4]
    5314:	042d      	lsls	r5, r5, #16
    5316:	1ace      	subs	r6, r1, r3
    5318:	4651      	mov	r1, sl
    531a:	4329      	orrs	r1, r5
    531c:	9d05      	ldr	r5, [sp, #20]
    531e:	464f      	mov	r7, r9
    5320:	002a      	movs	r2, r5
    5322:	040b      	lsls	r3, r1, #16
    5324:	0c08      	lsrs	r0, r1, #16
    5326:	0c1b      	lsrs	r3, r3, #16
    5328:	435a      	muls	r2, r3
    532a:	4345      	muls	r5, r0
    532c:	437b      	muls	r3, r7
    532e:	4378      	muls	r0, r7
    5330:	195b      	adds	r3, r3, r5
    5332:	0c17      	lsrs	r7, r2, #16
    5334:	18fb      	adds	r3, r7, r3
    5336:	429d      	cmp	r5, r3
    5338:	d903      	bls.n	5342 <__aeabi_ddiv+0x3ba>
    533a:	2580      	movs	r5, #128	; 0x80
    533c:	026d      	lsls	r5, r5, #9
    533e:	46ac      	mov	ip, r5
    5340:	4460      	add	r0, ip
    5342:	0c1d      	lsrs	r5, r3, #16
    5344:	0412      	lsls	r2, r2, #16
    5346:	041b      	lsls	r3, r3, #16
    5348:	0c12      	lsrs	r2, r2, #16
    534a:	1828      	adds	r0, r5, r0
    534c:	189b      	adds	r3, r3, r2
    534e:	4286      	cmp	r6, r0
    5350:	d200      	bcs.n	5354 <__aeabi_ddiv+0x3cc>
    5352:	e093      	b.n	547c <__aeabi_ddiv+0x4f4>
    5354:	d100      	bne.n	5358 <__aeabi_ddiv+0x3d0>
    5356:	e08e      	b.n	5476 <__aeabi_ddiv+0x4ee>
    5358:	2301      	movs	r3, #1
    535a:	4319      	orrs	r1, r3
    535c:	4ba0      	ldr	r3, [pc, #640]	; (55e0 <__aeabi_ddiv+0x658>)
    535e:	18e3      	adds	r3, r4, r3
    5360:	2b00      	cmp	r3, #0
    5362:	dc00      	bgt.n	5366 <__aeabi_ddiv+0x3de>
    5364:	e099      	b.n	549a <__aeabi_ddiv+0x512>
    5366:	074a      	lsls	r2, r1, #29
    5368:	d000      	beq.n	536c <__aeabi_ddiv+0x3e4>
    536a:	e09e      	b.n	54aa <__aeabi_ddiv+0x522>
    536c:	465a      	mov	r2, fp
    536e:	01d2      	lsls	r2, r2, #7
    5370:	d506      	bpl.n	5380 <__aeabi_ddiv+0x3f8>
    5372:	465a      	mov	r2, fp
    5374:	4b9b      	ldr	r3, [pc, #620]	; (55e4 <__aeabi_ddiv+0x65c>)
    5376:	401a      	ands	r2, r3
    5378:	2380      	movs	r3, #128	; 0x80
    537a:	4693      	mov	fp, r2
    537c:	00db      	lsls	r3, r3, #3
    537e:	18e3      	adds	r3, r4, r3
    5380:	4a99      	ldr	r2, [pc, #612]	; (55e8 <__aeabi_ddiv+0x660>)
    5382:	4293      	cmp	r3, r2
    5384:	dd68      	ble.n	5458 <__aeabi_ddiv+0x4d0>
    5386:	2301      	movs	r3, #1
    5388:	9a02      	ldr	r2, [sp, #8]
    538a:	4c98      	ldr	r4, [pc, #608]	; (55ec <__aeabi_ddiv+0x664>)
    538c:	401a      	ands	r2, r3
    538e:	2300      	movs	r3, #0
    5390:	4694      	mov	ip, r2
    5392:	4698      	mov	r8, r3
    5394:	2200      	movs	r2, #0
    5396:	e6c5      	b.n	5124 <__aeabi_ddiv+0x19c>
    5398:	2280      	movs	r2, #128	; 0x80
    539a:	464b      	mov	r3, r9
    539c:	0312      	lsls	r2, r2, #12
    539e:	4213      	tst	r3, r2
    53a0:	d00a      	beq.n	53b8 <__aeabi_ddiv+0x430>
    53a2:	465b      	mov	r3, fp
    53a4:	4213      	tst	r3, r2
    53a6:	d106      	bne.n	53b6 <__aeabi_ddiv+0x42e>
    53a8:	431a      	orrs	r2, r3
    53aa:	0312      	lsls	r2, r2, #12
    53ac:	0b12      	lsrs	r2, r2, #12
    53ae:	46ac      	mov	ip, r5
    53b0:	4688      	mov	r8, r1
    53b2:	4c8e      	ldr	r4, [pc, #568]	; (55ec <__aeabi_ddiv+0x664>)
    53b4:	e6b6      	b.n	5124 <__aeabi_ddiv+0x19c>
    53b6:	464b      	mov	r3, r9
    53b8:	431a      	orrs	r2, r3
    53ba:	0312      	lsls	r2, r2, #12
    53bc:	0b12      	lsrs	r2, r2, #12
    53be:	46bc      	mov	ip, r7
    53c0:	4c8a      	ldr	r4, [pc, #552]	; (55ec <__aeabi_ddiv+0x664>)
    53c2:	e6af      	b.n	5124 <__aeabi_ddiv+0x19c>
    53c4:	0003      	movs	r3, r0
    53c6:	465a      	mov	r2, fp
    53c8:	3b28      	subs	r3, #40	; 0x28
    53ca:	409a      	lsls	r2, r3
    53cc:	2300      	movs	r3, #0
    53ce:	4691      	mov	r9, r2
    53d0:	4698      	mov	r8, r3
    53d2:	e657      	b.n	5084 <__aeabi_ddiv+0xfc>
    53d4:	4658      	mov	r0, fp
    53d6:	f7ff fd7b 	bl	4ed0 <__clzsi2>
    53da:	3020      	adds	r0, #32
    53dc:	e640      	b.n	5060 <__aeabi_ddiv+0xd8>
    53de:	0003      	movs	r3, r0
    53e0:	4652      	mov	r2, sl
    53e2:	3b28      	subs	r3, #40	; 0x28
    53e4:	409a      	lsls	r2, r3
    53e6:	2100      	movs	r1, #0
    53e8:	4693      	mov	fp, r2
    53ea:	e677      	b.n	50dc <__aeabi_ddiv+0x154>
    53ec:	f7ff fd70 	bl	4ed0 <__clzsi2>
    53f0:	3020      	adds	r0, #32
    53f2:	e65f      	b.n	50b4 <__aeabi_ddiv+0x12c>
    53f4:	4588      	cmp	r8, r1
    53f6:	d200      	bcs.n	53fa <__aeabi_ddiv+0x472>
    53f8:	e6c7      	b.n	518a <__aeabi_ddiv+0x202>
    53fa:	464b      	mov	r3, r9
    53fc:	07de      	lsls	r6, r3, #31
    53fe:	085d      	lsrs	r5, r3, #1
    5400:	4643      	mov	r3, r8
    5402:	085b      	lsrs	r3, r3, #1
    5404:	431e      	orrs	r6, r3
    5406:	4643      	mov	r3, r8
    5408:	07db      	lsls	r3, r3, #31
    540a:	469a      	mov	sl, r3
    540c:	e6c2      	b.n	5194 <__aeabi_ddiv+0x20c>
    540e:	2500      	movs	r5, #0
    5410:	4592      	cmp	sl, r2
    5412:	d300      	bcc.n	5416 <__aeabi_ddiv+0x48e>
    5414:	e733      	b.n	527e <__aeabi_ddiv+0x2f6>
    5416:	9e03      	ldr	r6, [sp, #12]
    5418:	4659      	mov	r1, fp
    541a:	46b4      	mov	ip, r6
    541c:	44e2      	add	sl, ip
    541e:	45b2      	cmp	sl, r6
    5420:	41ad      	sbcs	r5, r5
    5422:	426d      	negs	r5, r5
    5424:	4445      	add	r5, r8
    5426:	18eb      	adds	r3, r5, r3
    5428:	3901      	subs	r1, #1
    542a:	4598      	cmp	r8, r3
    542c:	d207      	bcs.n	543e <__aeabi_ddiv+0x4b6>
    542e:	4298      	cmp	r0, r3
    5430:	d900      	bls.n	5434 <__aeabi_ddiv+0x4ac>
    5432:	e07f      	b.n	5534 <__aeabi_ddiv+0x5ac>
    5434:	d100      	bne.n	5438 <__aeabi_ddiv+0x4b0>
    5436:	e0bc      	b.n	55b2 <__aeabi_ddiv+0x62a>
    5438:	1a1d      	subs	r5, r3, r0
    543a:	468b      	mov	fp, r1
    543c:	e71f      	b.n	527e <__aeabi_ddiv+0x2f6>
    543e:	4598      	cmp	r8, r3
    5440:	d1fa      	bne.n	5438 <__aeabi_ddiv+0x4b0>
    5442:	9d03      	ldr	r5, [sp, #12]
    5444:	4555      	cmp	r5, sl
    5446:	d9f2      	bls.n	542e <__aeabi_ddiv+0x4a6>
    5448:	4643      	mov	r3, r8
    544a:	468b      	mov	fp, r1
    544c:	1a1d      	subs	r5, r3, r0
    544e:	e716      	b.n	527e <__aeabi_ddiv+0x2f6>
    5450:	469b      	mov	fp, r3
    5452:	e6ca      	b.n	51ea <__aeabi_ddiv+0x262>
    5454:	0015      	movs	r5, r2
    5456:	e6e7      	b.n	5228 <__aeabi_ddiv+0x2a0>
    5458:	465a      	mov	r2, fp
    545a:	08c9      	lsrs	r1, r1, #3
    545c:	0752      	lsls	r2, r2, #29
    545e:	430a      	orrs	r2, r1
    5460:	055b      	lsls	r3, r3, #21
    5462:	4690      	mov	r8, r2
    5464:	0d5c      	lsrs	r4, r3, #21
    5466:	465a      	mov	r2, fp
    5468:	2301      	movs	r3, #1
    546a:	9902      	ldr	r1, [sp, #8]
    546c:	0252      	lsls	r2, r2, #9
    546e:	4019      	ands	r1, r3
    5470:	0b12      	lsrs	r2, r2, #12
    5472:	468c      	mov	ip, r1
    5474:	e656      	b.n	5124 <__aeabi_ddiv+0x19c>
    5476:	2b00      	cmp	r3, #0
    5478:	d100      	bne.n	547c <__aeabi_ddiv+0x4f4>
    547a:	e76f      	b.n	535c <__aeabi_ddiv+0x3d4>
    547c:	4446      	add	r6, r8
    547e:	1e4a      	subs	r2, r1, #1
    5480:	45b0      	cmp	r8, r6
    5482:	d929      	bls.n	54d8 <__aeabi_ddiv+0x550>
    5484:	0011      	movs	r1, r2
    5486:	4286      	cmp	r6, r0
    5488:	d000      	beq.n	548c <__aeabi_ddiv+0x504>
    548a:	e765      	b.n	5358 <__aeabi_ddiv+0x3d0>
    548c:	9a03      	ldr	r2, [sp, #12]
    548e:	4293      	cmp	r3, r2
    5490:	d000      	beq.n	5494 <__aeabi_ddiv+0x50c>
    5492:	e761      	b.n	5358 <__aeabi_ddiv+0x3d0>
    5494:	e762      	b.n	535c <__aeabi_ddiv+0x3d4>
    5496:	2101      	movs	r1, #1
    5498:	4249      	negs	r1, r1
    549a:	2001      	movs	r0, #1
    549c:	1ac2      	subs	r2, r0, r3
    549e:	2a38      	cmp	r2, #56	; 0x38
    54a0:	dd21      	ble.n	54e6 <__aeabi_ddiv+0x55e>
    54a2:	9b02      	ldr	r3, [sp, #8]
    54a4:	4003      	ands	r3, r0
    54a6:	469c      	mov	ip, r3
    54a8:	e638      	b.n	511c <__aeabi_ddiv+0x194>
    54aa:	220f      	movs	r2, #15
    54ac:	400a      	ands	r2, r1
    54ae:	2a04      	cmp	r2, #4
    54b0:	d100      	bne.n	54b4 <__aeabi_ddiv+0x52c>
    54b2:	e75b      	b.n	536c <__aeabi_ddiv+0x3e4>
    54b4:	000a      	movs	r2, r1
    54b6:	1d11      	adds	r1, r2, #4
    54b8:	4291      	cmp	r1, r2
    54ba:	4192      	sbcs	r2, r2
    54bc:	4252      	negs	r2, r2
    54be:	4493      	add	fp, r2
    54c0:	e754      	b.n	536c <__aeabi_ddiv+0x3e4>
    54c2:	4b47      	ldr	r3, [pc, #284]	; (55e0 <__aeabi_ddiv+0x658>)
    54c4:	18e3      	adds	r3, r4, r3
    54c6:	2b00      	cmp	r3, #0
    54c8:	dde5      	ble.n	5496 <__aeabi_ddiv+0x50e>
    54ca:	2201      	movs	r2, #1
    54cc:	4252      	negs	r2, r2
    54ce:	e7f2      	b.n	54b6 <__aeabi_ddiv+0x52e>
    54d0:	001d      	movs	r5, r3
    54d2:	e6fa      	b.n	52ca <__aeabi_ddiv+0x342>
    54d4:	469a      	mov	sl, r3
    54d6:	e71c      	b.n	5312 <__aeabi_ddiv+0x38a>
    54d8:	42b0      	cmp	r0, r6
    54da:	d839      	bhi.n	5550 <__aeabi_ddiv+0x5c8>
    54dc:	d06e      	beq.n	55bc <__aeabi_ddiv+0x634>
    54de:	0011      	movs	r1, r2
    54e0:	e73a      	b.n	5358 <__aeabi_ddiv+0x3d0>
    54e2:	9302      	str	r3, [sp, #8]
    54e4:	e73a      	b.n	535c <__aeabi_ddiv+0x3d4>
    54e6:	2a1f      	cmp	r2, #31
    54e8:	dc3c      	bgt.n	5564 <__aeabi_ddiv+0x5dc>
    54ea:	2320      	movs	r3, #32
    54ec:	1a9b      	subs	r3, r3, r2
    54ee:	000c      	movs	r4, r1
    54f0:	4658      	mov	r0, fp
    54f2:	4099      	lsls	r1, r3
    54f4:	4098      	lsls	r0, r3
    54f6:	1e4b      	subs	r3, r1, #1
    54f8:	4199      	sbcs	r1, r3
    54fa:	465b      	mov	r3, fp
    54fc:	40d4      	lsrs	r4, r2
    54fe:	40d3      	lsrs	r3, r2
    5500:	4320      	orrs	r0, r4
    5502:	4308      	orrs	r0, r1
    5504:	001a      	movs	r2, r3
    5506:	0743      	lsls	r3, r0, #29
    5508:	d009      	beq.n	551e <__aeabi_ddiv+0x596>
    550a:	230f      	movs	r3, #15
    550c:	4003      	ands	r3, r0
    550e:	2b04      	cmp	r3, #4
    5510:	d005      	beq.n	551e <__aeabi_ddiv+0x596>
    5512:	0001      	movs	r1, r0
    5514:	1d08      	adds	r0, r1, #4
    5516:	4288      	cmp	r0, r1
    5518:	419b      	sbcs	r3, r3
    551a:	425b      	negs	r3, r3
    551c:	18d2      	adds	r2, r2, r3
    551e:	0213      	lsls	r3, r2, #8
    5520:	d53a      	bpl.n	5598 <__aeabi_ddiv+0x610>
    5522:	2301      	movs	r3, #1
    5524:	9a02      	ldr	r2, [sp, #8]
    5526:	2401      	movs	r4, #1
    5528:	401a      	ands	r2, r3
    552a:	2300      	movs	r3, #0
    552c:	4694      	mov	ip, r2
    552e:	4698      	mov	r8, r3
    5530:	2200      	movs	r2, #0
    5532:	e5f7      	b.n	5124 <__aeabi_ddiv+0x19c>
    5534:	2102      	movs	r1, #2
    5536:	4249      	negs	r1, r1
    5538:	468c      	mov	ip, r1
    553a:	9d03      	ldr	r5, [sp, #12]
    553c:	44e3      	add	fp, ip
    553e:	46ac      	mov	ip, r5
    5540:	44e2      	add	sl, ip
    5542:	45aa      	cmp	sl, r5
    5544:	41ad      	sbcs	r5, r5
    5546:	426d      	negs	r5, r5
    5548:	4445      	add	r5, r8
    554a:	18ed      	adds	r5, r5, r3
    554c:	1a2d      	subs	r5, r5, r0
    554e:	e696      	b.n	527e <__aeabi_ddiv+0x2f6>
    5550:	1e8a      	subs	r2, r1, #2
    5552:	9903      	ldr	r1, [sp, #12]
    5554:	004d      	lsls	r5, r1, #1
    5556:	428d      	cmp	r5, r1
    5558:	4189      	sbcs	r1, r1
    555a:	4249      	negs	r1, r1
    555c:	4441      	add	r1, r8
    555e:	1876      	adds	r6, r6, r1
    5560:	9503      	str	r5, [sp, #12]
    5562:	e78f      	b.n	5484 <__aeabi_ddiv+0x4fc>
    5564:	201f      	movs	r0, #31
    5566:	4240      	negs	r0, r0
    5568:	1ac3      	subs	r3, r0, r3
    556a:	4658      	mov	r0, fp
    556c:	40d8      	lsrs	r0, r3
    556e:	0003      	movs	r3, r0
    5570:	2a20      	cmp	r2, #32
    5572:	d028      	beq.n	55c6 <__aeabi_ddiv+0x63e>
    5574:	2040      	movs	r0, #64	; 0x40
    5576:	465d      	mov	r5, fp
    5578:	1a82      	subs	r2, r0, r2
    557a:	4095      	lsls	r5, r2
    557c:	4329      	orrs	r1, r5
    557e:	1e4a      	subs	r2, r1, #1
    5580:	4191      	sbcs	r1, r2
    5582:	4319      	orrs	r1, r3
    5584:	2307      	movs	r3, #7
    5586:	2200      	movs	r2, #0
    5588:	400b      	ands	r3, r1
    558a:	d009      	beq.n	55a0 <__aeabi_ddiv+0x618>
    558c:	230f      	movs	r3, #15
    558e:	2200      	movs	r2, #0
    5590:	400b      	ands	r3, r1
    5592:	0008      	movs	r0, r1
    5594:	2b04      	cmp	r3, #4
    5596:	d1bd      	bne.n	5514 <__aeabi_ddiv+0x58c>
    5598:	0001      	movs	r1, r0
    559a:	0753      	lsls	r3, r2, #29
    559c:	0252      	lsls	r2, r2, #9
    559e:	0b12      	lsrs	r2, r2, #12
    55a0:	08c9      	lsrs	r1, r1, #3
    55a2:	4319      	orrs	r1, r3
    55a4:	2301      	movs	r3, #1
    55a6:	4688      	mov	r8, r1
    55a8:	9902      	ldr	r1, [sp, #8]
    55aa:	2400      	movs	r4, #0
    55ac:	4019      	ands	r1, r3
    55ae:	468c      	mov	ip, r1
    55b0:	e5b8      	b.n	5124 <__aeabi_ddiv+0x19c>
    55b2:	4552      	cmp	r2, sl
    55b4:	d8be      	bhi.n	5534 <__aeabi_ddiv+0x5ac>
    55b6:	468b      	mov	fp, r1
    55b8:	2500      	movs	r5, #0
    55ba:	e660      	b.n	527e <__aeabi_ddiv+0x2f6>
    55bc:	9d03      	ldr	r5, [sp, #12]
    55be:	429d      	cmp	r5, r3
    55c0:	d3c6      	bcc.n	5550 <__aeabi_ddiv+0x5c8>
    55c2:	0011      	movs	r1, r2
    55c4:	e762      	b.n	548c <__aeabi_ddiv+0x504>
    55c6:	2500      	movs	r5, #0
    55c8:	e7d8      	b.n	557c <__aeabi_ddiv+0x5f4>
    55ca:	2280      	movs	r2, #128	; 0x80
    55cc:	465b      	mov	r3, fp
    55ce:	0312      	lsls	r2, r2, #12
    55d0:	431a      	orrs	r2, r3
    55d2:	9b01      	ldr	r3, [sp, #4]
    55d4:	0312      	lsls	r2, r2, #12
    55d6:	0b12      	lsrs	r2, r2, #12
    55d8:	469c      	mov	ip, r3
    55da:	4688      	mov	r8, r1
    55dc:	4c03      	ldr	r4, [pc, #12]	; (55ec <__aeabi_ddiv+0x664>)
    55de:	e5a1      	b.n	5124 <__aeabi_ddiv+0x19c>
    55e0:	000003ff 	.word	0x000003ff
    55e4:	feffffff 	.word	0xfeffffff
    55e8:	000007fe 	.word	0x000007fe
    55ec:	000007ff 	.word	0x000007ff

000055f0 <__aeabi_dmul>:
    55f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55f2:	4657      	mov	r7, sl
    55f4:	4645      	mov	r5, r8
    55f6:	46de      	mov	lr, fp
    55f8:	464e      	mov	r6, r9
    55fa:	b5e0      	push	{r5, r6, r7, lr}
    55fc:	030c      	lsls	r4, r1, #12
    55fe:	4698      	mov	r8, r3
    5600:	004e      	lsls	r6, r1, #1
    5602:	0b23      	lsrs	r3, r4, #12
    5604:	b087      	sub	sp, #28
    5606:	0007      	movs	r7, r0
    5608:	4692      	mov	sl, r2
    560a:	469b      	mov	fp, r3
    560c:	0d76      	lsrs	r6, r6, #21
    560e:	0fcd      	lsrs	r5, r1, #31
    5610:	2e00      	cmp	r6, #0
    5612:	d06b      	beq.n	56ec <__aeabi_dmul+0xfc>
    5614:	4b6d      	ldr	r3, [pc, #436]	; (57cc <__aeabi_dmul+0x1dc>)
    5616:	429e      	cmp	r6, r3
    5618:	d035      	beq.n	5686 <__aeabi_dmul+0x96>
    561a:	2480      	movs	r4, #128	; 0x80
    561c:	465b      	mov	r3, fp
    561e:	0f42      	lsrs	r2, r0, #29
    5620:	0424      	lsls	r4, r4, #16
    5622:	00db      	lsls	r3, r3, #3
    5624:	4314      	orrs	r4, r2
    5626:	431c      	orrs	r4, r3
    5628:	00c3      	lsls	r3, r0, #3
    562a:	4699      	mov	r9, r3
    562c:	4b68      	ldr	r3, [pc, #416]	; (57d0 <__aeabi_dmul+0x1e0>)
    562e:	46a3      	mov	fp, r4
    5630:	469c      	mov	ip, r3
    5632:	2300      	movs	r3, #0
    5634:	2700      	movs	r7, #0
    5636:	4466      	add	r6, ip
    5638:	9302      	str	r3, [sp, #8]
    563a:	4643      	mov	r3, r8
    563c:	031c      	lsls	r4, r3, #12
    563e:	005a      	lsls	r2, r3, #1
    5640:	0fdb      	lsrs	r3, r3, #31
    5642:	4650      	mov	r0, sl
    5644:	0b24      	lsrs	r4, r4, #12
    5646:	0d52      	lsrs	r2, r2, #21
    5648:	4698      	mov	r8, r3
    564a:	d100      	bne.n	564e <__aeabi_dmul+0x5e>
    564c:	e076      	b.n	573c <__aeabi_dmul+0x14c>
    564e:	4b5f      	ldr	r3, [pc, #380]	; (57cc <__aeabi_dmul+0x1dc>)
    5650:	429a      	cmp	r2, r3
    5652:	d06d      	beq.n	5730 <__aeabi_dmul+0x140>
    5654:	2380      	movs	r3, #128	; 0x80
    5656:	0f41      	lsrs	r1, r0, #29
    5658:	041b      	lsls	r3, r3, #16
    565a:	430b      	orrs	r3, r1
    565c:	495c      	ldr	r1, [pc, #368]	; (57d0 <__aeabi_dmul+0x1e0>)
    565e:	00e4      	lsls	r4, r4, #3
    5660:	468c      	mov	ip, r1
    5662:	431c      	orrs	r4, r3
    5664:	00c3      	lsls	r3, r0, #3
    5666:	2000      	movs	r0, #0
    5668:	4462      	add	r2, ip
    566a:	4641      	mov	r1, r8
    566c:	18b6      	adds	r6, r6, r2
    566e:	4069      	eors	r1, r5
    5670:	1c72      	adds	r2, r6, #1
    5672:	9101      	str	r1, [sp, #4]
    5674:	4694      	mov	ip, r2
    5676:	4307      	orrs	r7, r0
    5678:	2f0f      	cmp	r7, #15
    567a:	d900      	bls.n	567e <__aeabi_dmul+0x8e>
    567c:	e0b0      	b.n	57e0 <__aeabi_dmul+0x1f0>
    567e:	4a55      	ldr	r2, [pc, #340]	; (57d4 <__aeabi_dmul+0x1e4>)
    5680:	00bf      	lsls	r7, r7, #2
    5682:	59d2      	ldr	r2, [r2, r7]
    5684:	4697      	mov	pc, r2
    5686:	465b      	mov	r3, fp
    5688:	4303      	orrs	r3, r0
    568a:	4699      	mov	r9, r3
    568c:	d000      	beq.n	5690 <__aeabi_dmul+0xa0>
    568e:	e087      	b.n	57a0 <__aeabi_dmul+0x1b0>
    5690:	2300      	movs	r3, #0
    5692:	469b      	mov	fp, r3
    5694:	3302      	adds	r3, #2
    5696:	2708      	movs	r7, #8
    5698:	9302      	str	r3, [sp, #8]
    569a:	e7ce      	b.n	563a <__aeabi_dmul+0x4a>
    569c:	4642      	mov	r2, r8
    569e:	9201      	str	r2, [sp, #4]
    56a0:	2802      	cmp	r0, #2
    56a2:	d067      	beq.n	5774 <__aeabi_dmul+0x184>
    56a4:	2803      	cmp	r0, #3
    56a6:	d100      	bne.n	56aa <__aeabi_dmul+0xba>
    56a8:	e20e      	b.n	5ac8 <__aeabi_dmul+0x4d8>
    56aa:	2801      	cmp	r0, #1
    56ac:	d000      	beq.n	56b0 <__aeabi_dmul+0xc0>
    56ae:	e162      	b.n	5976 <__aeabi_dmul+0x386>
    56b0:	2300      	movs	r3, #0
    56b2:	2400      	movs	r4, #0
    56b4:	2200      	movs	r2, #0
    56b6:	4699      	mov	r9, r3
    56b8:	9901      	ldr	r1, [sp, #4]
    56ba:	4001      	ands	r1, r0
    56bc:	b2cd      	uxtb	r5, r1
    56be:	2100      	movs	r1, #0
    56c0:	0312      	lsls	r2, r2, #12
    56c2:	0d0b      	lsrs	r3, r1, #20
    56c4:	0b12      	lsrs	r2, r2, #12
    56c6:	051b      	lsls	r3, r3, #20
    56c8:	4313      	orrs	r3, r2
    56ca:	4a43      	ldr	r2, [pc, #268]	; (57d8 <__aeabi_dmul+0x1e8>)
    56cc:	0524      	lsls	r4, r4, #20
    56ce:	4013      	ands	r3, r2
    56d0:	431c      	orrs	r4, r3
    56d2:	0064      	lsls	r4, r4, #1
    56d4:	07ed      	lsls	r5, r5, #31
    56d6:	0864      	lsrs	r4, r4, #1
    56d8:	432c      	orrs	r4, r5
    56da:	4648      	mov	r0, r9
    56dc:	0021      	movs	r1, r4
    56de:	b007      	add	sp, #28
    56e0:	bc3c      	pop	{r2, r3, r4, r5}
    56e2:	4690      	mov	r8, r2
    56e4:	4699      	mov	r9, r3
    56e6:	46a2      	mov	sl, r4
    56e8:	46ab      	mov	fp, r5
    56ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56ec:	4303      	orrs	r3, r0
    56ee:	4699      	mov	r9, r3
    56f0:	d04f      	beq.n	5792 <__aeabi_dmul+0x1a2>
    56f2:	465b      	mov	r3, fp
    56f4:	2b00      	cmp	r3, #0
    56f6:	d100      	bne.n	56fa <__aeabi_dmul+0x10a>
    56f8:	e189      	b.n	5a0e <__aeabi_dmul+0x41e>
    56fa:	4658      	mov	r0, fp
    56fc:	f7ff fbe8 	bl	4ed0 <__clzsi2>
    5700:	0003      	movs	r3, r0
    5702:	3b0b      	subs	r3, #11
    5704:	2b1c      	cmp	r3, #28
    5706:	dd00      	ble.n	570a <__aeabi_dmul+0x11a>
    5708:	e17a      	b.n	5a00 <__aeabi_dmul+0x410>
    570a:	221d      	movs	r2, #29
    570c:	1ad3      	subs	r3, r2, r3
    570e:	003a      	movs	r2, r7
    5710:	0001      	movs	r1, r0
    5712:	465c      	mov	r4, fp
    5714:	40da      	lsrs	r2, r3
    5716:	3908      	subs	r1, #8
    5718:	408c      	lsls	r4, r1
    571a:	0013      	movs	r3, r2
    571c:	408f      	lsls	r7, r1
    571e:	4323      	orrs	r3, r4
    5720:	469b      	mov	fp, r3
    5722:	46b9      	mov	r9, r7
    5724:	2300      	movs	r3, #0
    5726:	4e2d      	ldr	r6, [pc, #180]	; (57dc <__aeabi_dmul+0x1ec>)
    5728:	2700      	movs	r7, #0
    572a:	1a36      	subs	r6, r6, r0
    572c:	9302      	str	r3, [sp, #8]
    572e:	e784      	b.n	563a <__aeabi_dmul+0x4a>
    5730:	4653      	mov	r3, sl
    5732:	4323      	orrs	r3, r4
    5734:	d12a      	bne.n	578c <__aeabi_dmul+0x19c>
    5736:	2400      	movs	r4, #0
    5738:	2002      	movs	r0, #2
    573a:	e796      	b.n	566a <__aeabi_dmul+0x7a>
    573c:	4653      	mov	r3, sl
    573e:	4323      	orrs	r3, r4
    5740:	d020      	beq.n	5784 <__aeabi_dmul+0x194>
    5742:	2c00      	cmp	r4, #0
    5744:	d100      	bne.n	5748 <__aeabi_dmul+0x158>
    5746:	e157      	b.n	59f8 <__aeabi_dmul+0x408>
    5748:	0020      	movs	r0, r4
    574a:	f7ff fbc1 	bl	4ed0 <__clzsi2>
    574e:	0003      	movs	r3, r0
    5750:	3b0b      	subs	r3, #11
    5752:	2b1c      	cmp	r3, #28
    5754:	dd00      	ble.n	5758 <__aeabi_dmul+0x168>
    5756:	e149      	b.n	59ec <__aeabi_dmul+0x3fc>
    5758:	211d      	movs	r1, #29
    575a:	1acb      	subs	r3, r1, r3
    575c:	4651      	mov	r1, sl
    575e:	0002      	movs	r2, r0
    5760:	40d9      	lsrs	r1, r3
    5762:	4653      	mov	r3, sl
    5764:	3a08      	subs	r2, #8
    5766:	4094      	lsls	r4, r2
    5768:	4093      	lsls	r3, r2
    576a:	430c      	orrs	r4, r1
    576c:	4a1b      	ldr	r2, [pc, #108]	; (57dc <__aeabi_dmul+0x1ec>)
    576e:	1a12      	subs	r2, r2, r0
    5770:	2000      	movs	r0, #0
    5772:	e77a      	b.n	566a <__aeabi_dmul+0x7a>
    5774:	2501      	movs	r5, #1
    5776:	9b01      	ldr	r3, [sp, #4]
    5778:	4c14      	ldr	r4, [pc, #80]	; (57cc <__aeabi_dmul+0x1dc>)
    577a:	401d      	ands	r5, r3
    577c:	2300      	movs	r3, #0
    577e:	2200      	movs	r2, #0
    5780:	4699      	mov	r9, r3
    5782:	e79c      	b.n	56be <__aeabi_dmul+0xce>
    5784:	2400      	movs	r4, #0
    5786:	2200      	movs	r2, #0
    5788:	2001      	movs	r0, #1
    578a:	e76e      	b.n	566a <__aeabi_dmul+0x7a>
    578c:	4653      	mov	r3, sl
    578e:	2003      	movs	r0, #3
    5790:	e76b      	b.n	566a <__aeabi_dmul+0x7a>
    5792:	2300      	movs	r3, #0
    5794:	469b      	mov	fp, r3
    5796:	3301      	adds	r3, #1
    5798:	2704      	movs	r7, #4
    579a:	2600      	movs	r6, #0
    579c:	9302      	str	r3, [sp, #8]
    579e:	e74c      	b.n	563a <__aeabi_dmul+0x4a>
    57a0:	2303      	movs	r3, #3
    57a2:	4681      	mov	r9, r0
    57a4:	270c      	movs	r7, #12
    57a6:	9302      	str	r3, [sp, #8]
    57a8:	e747      	b.n	563a <__aeabi_dmul+0x4a>
    57aa:	2280      	movs	r2, #128	; 0x80
    57ac:	2300      	movs	r3, #0
    57ae:	2500      	movs	r5, #0
    57b0:	0312      	lsls	r2, r2, #12
    57b2:	4699      	mov	r9, r3
    57b4:	4c05      	ldr	r4, [pc, #20]	; (57cc <__aeabi_dmul+0x1dc>)
    57b6:	e782      	b.n	56be <__aeabi_dmul+0xce>
    57b8:	465c      	mov	r4, fp
    57ba:	464b      	mov	r3, r9
    57bc:	9802      	ldr	r0, [sp, #8]
    57be:	e76f      	b.n	56a0 <__aeabi_dmul+0xb0>
    57c0:	465c      	mov	r4, fp
    57c2:	464b      	mov	r3, r9
    57c4:	9501      	str	r5, [sp, #4]
    57c6:	9802      	ldr	r0, [sp, #8]
    57c8:	e76a      	b.n	56a0 <__aeabi_dmul+0xb0>
    57ca:	46c0      	nop			; (mov r8, r8)
    57cc:	000007ff 	.word	0x000007ff
    57d0:	fffffc01 	.word	0xfffffc01
    57d4:	00006fb8 	.word	0x00006fb8
    57d8:	800fffff 	.word	0x800fffff
    57dc:	fffffc0d 	.word	0xfffffc0d
    57e0:	464a      	mov	r2, r9
    57e2:	4649      	mov	r1, r9
    57e4:	0c17      	lsrs	r7, r2, #16
    57e6:	0c1a      	lsrs	r2, r3, #16
    57e8:	041b      	lsls	r3, r3, #16
    57ea:	0c1b      	lsrs	r3, r3, #16
    57ec:	0408      	lsls	r0, r1, #16
    57ee:	0019      	movs	r1, r3
    57f0:	0c00      	lsrs	r0, r0, #16
    57f2:	4341      	muls	r1, r0
    57f4:	0015      	movs	r5, r2
    57f6:	4688      	mov	r8, r1
    57f8:	0019      	movs	r1, r3
    57fa:	437d      	muls	r5, r7
    57fc:	4379      	muls	r1, r7
    57fe:	9503      	str	r5, [sp, #12]
    5800:	4689      	mov	r9, r1
    5802:	0029      	movs	r1, r5
    5804:	0015      	movs	r5, r2
    5806:	4345      	muls	r5, r0
    5808:	444d      	add	r5, r9
    580a:	9502      	str	r5, [sp, #8]
    580c:	4645      	mov	r5, r8
    580e:	0c2d      	lsrs	r5, r5, #16
    5810:	46aa      	mov	sl, r5
    5812:	9d02      	ldr	r5, [sp, #8]
    5814:	4455      	add	r5, sl
    5816:	45a9      	cmp	r9, r5
    5818:	d906      	bls.n	5828 <__aeabi_dmul+0x238>
    581a:	468a      	mov	sl, r1
    581c:	2180      	movs	r1, #128	; 0x80
    581e:	0249      	lsls	r1, r1, #9
    5820:	4689      	mov	r9, r1
    5822:	44ca      	add	sl, r9
    5824:	4651      	mov	r1, sl
    5826:	9103      	str	r1, [sp, #12]
    5828:	0c29      	lsrs	r1, r5, #16
    582a:	9104      	str	r1, [sp, #16]
    582c:	4641      	mov	r1, r8
    582e:	0409      	lsls	r1, r1, #16
    5830:	042d      	lsls	r5, r5, #16
    5832:	0c09      	lsrs	r1, r1, #16
    5834:	4688      	mov	r8, r1
    5836:	0029      	movs	r1, r5
    5838:	0c25      	lsrs	r5, r4, #16
    583a:	0424      	lsls	r4, r4, #16
    583c:	4441      	add	r1, r8
    583e:	0c24      	lsrs	r4, r4, #16
    5840:	9105      	str	r1, [sp, #20]
    5842:	0021      	movs	r1, r4
    5844:	4341      	muls	r1, r0
    5846:	4688      	mov	r8, r1
    5848:	0021      	movs	r1, r4
    584a:	4379      	muls	r1, r7
    584c:	468a      	mov	sl, r1
    584e:	4368      	muls	r0, r5
    5850:	4641      	mov	r1, r8
    5852:	4450      	add	r0, sl
    5854:	4681      	mov	r9, r0
    5856:	0c08      	lsrs	r0, r1, #16
    5858:	4448      	add	r0, r9
    585a:	436f      	muls	r7, r5
    585c:	4582      	cmp	sl, r0
    585e:	d903      	bls.n	5868 <__aeabi_dmul+0x278>
    5860:	2180      	movs	r1, #128	; 0x80
    5862:	0249      	lsls	r1, r1, #9
    5864:	4689      	mov	r9, r1
    5866:	444f      	add	r7, r9
    5868:	0c01      	lsrs	r1, r0, #16
    586a:	4689      	mov	r9, r1
    586c:	0039      	movs	r1, r7
    586e:	4449      	add	r1, r9
    5870:	9102      	str	r1, [sp, #8]
    5872:	4641      	mov	r1, r8
    5874:	040f      	lsls	r7, r1, #16
    5876:	9904      	ldr	r1, [sp, #16]
    5878:	0c3f      	lsrs	r7, r7, #16
    587a:	4688      	mov	r8, r1
    587c:	0400      	lsls	r0, r0, #16
    587e:	19c0      	adds	r0, r0, r7
    5880:	4480      	add	r8, r0
    5882:	4641      	mov	r1, r8
    5884:	9104      	str	r1, [sp, #16]
    5886:	4659      	mov	r1, fp
    5888:	0c0f      	lsrs	r7, r1, #16
    588a:	0409      	lsls	r1, r1, #16
    588c:	0c09      	lsrs	r1, r1, #16
    588e:	4688      	mov	r8, r1
    5890:	4359      	muls	r1, r3
    5892:	468a      	mov	sl, r1
    5894:	0039      	movs	r1, r7
    5896:	4351      	muls	r1, r2
    5898:	4689      	mov	r9, r1
    589a:	4641      	mov	r1, r8
    589c:	434a      	muls	r2, r1
    589e:	4651      	mov	r1, sl
    58a0:	0c09      	lsrs	r1, r1, #16
    58a2:	468b      	mov	fp, r1
    58a4:	437b      	muls	r3, r7
    58a6:	18d2      	adds	r2, r2, r3
    58a8:	445a      	add	r2, fp
    58aa:	4293      	cmp	r3, r2
    58ac:	d903      	bls.n	58b6 <__aeabi_dmul+0x2c6>
    58ae:	2380      	movs	r3, #128	; 0x80
    58b0:	025b      	lsls	r3, r3, #9
    58b2:	469b      	mov	fp, r3
    58b4:	44d9      	add	r9, fp
    58b6:	4651      	mov	r1, sl
    58b8:	0409      	lsls	r1, r1, #16
    58ba:	0c09      	lsrs	r1, r1, #16
    58bc:	468a      	mov	sl, r1
    58be:	4641      	mov	r1, r8
    58c0:	4361      	muls	r1, r4
    58c2:	437c      	muls	r4, r7
    58c4:	0c13      	lsrs	r3, r2, #16
    58c6:	0412      	lsls	r2, r2, #16
    58c8:	444b      	add	r3, r9
    58ca:	4452      	add	r2, sl
    58cc:	46a1      	mov	r9, r4
    58ce:	468a      	mov	sl, r1
    58d0:	003c      	movs	r4, r7
    58d2:	4641      	mov	r1, r8
    58d4:	436c      	muls	r4, r5
    58d6:	434d      	muls	r5, r1
    58d8:	4651      	mov	r1, sl
    58da:	444d      	add	r5, r9
    58dc:	0c0f      	lsrs	r7, r1, #16
    58de:	197d      	adds	r5, r7, r5
    58e0:	45a9      	cmp	r9, r5
    58e2:	d903      	bls.n	58ec <__aeabi_dmul+0x2fc>
    58e4:	2180      	movs	r1, #128	; 0x80
    58e6:	0249      	lsls	r1, r1, #9
    58e8:	4688      	mov	r8, r1
    58ea:	4444      	add	r4, r8
    58ec:	9f04      	ldr	r7, [sp, #16]
    58ee:	9903      	ldr	r1, [sp, #12]
    58f0:	46b8      	mov	r8, r7
    58f2:	4441      	add	r1, r8
    58f4:	468b      	mov	fp, r1
    58f6:	4583      	cmp	fp, r0
    58f8:	4180      	sbcs	r0, r0
    58fa:	4241      	negs	r1, r0
    58fc:	4688      	mov	r8, r1
    58fe:	4651      	mov	r1, sl
    5900:	0408      	lsls	r0, r1, #16
    5902:	042f      	lsls	r7, r5, #16
    5904:	0c00      	lsrs	r0, r0, #16
    5906:	183f      	adds	r7, r7, r0
    5908:	4658      	mov	r0, fp
    590a:	9902      	ldr	r1, [sp, #8]
    590c:	1810      	adds	r0, r2, r0
    590e:	4689      	mov	r9, r1
    5910:	4290      	cmp	r0, r2
    5912:	4192      	sbcs	r2, r2
    5914:	444f      	add	r7, r9
    5916:	46ba      	mov	sl, r7
    5918:	4252      	negs	r2, r2
    591a:	4699      	mov	r9, r3
    591c:	4693      	mov	fp, r2
    591e:	44c2      	add	sl, r8
    5920:	44d1      	add	r9, sl
    5922:	44cb      	add	fp, r9
    5924:	428f      	cmp	r7, r1
    5926:	41bf      	sbcs	r7, r7
    5928:	45c2      	cmp	sl, r8
    592a:	4189      	sbcs	r1, r1
    592c:	4599      	cmp	r9, r3
    592e:	419b      	sbcs	r3, r3
    5930:	4593      	cmp	fp, r2
    5932:	4192      	sbcs	r2, r2
    5934:	427f      	negs	r7, r7
    5936:	4249      	negs	r1, r1
    5938:	0c2d      	lsrs	r5, r5, #16
    593a:	4252      	negs	r2, r2
    593c:	430f      	orrs	r7, r1
    593e:	425b      	negs	r3, r3
    5940:	4313      	orrs	r3, r2
    5942:	197f      	adds	r7, r7, r5
    5944:	18ff      	adds	r7, r7, r3
    5946:	465b      	mov	r3, fp
    5948:	193c      	adds	r4, r7, r4
    594a:	0ddb      	lsrs	r3, r3, #23
    594c:	9a05      	ldr	r2, [sp, #20]
    594e:	0264      	lsls	r4, r4, #9
    5950:	431c      	orrs	r4, r3
    5952:	0243      	lsls	r3, r0, #9
    5954:	4313      	orrs	r3, r2
    5956:	1e5d      	subs	r5, r3, #1
    5958:	41ab      	sbcs	r3, r5
    595a:	465a      	mov	r2, fp
    595c:	0dc0      	lsrs	r0, r0, #23
    595e:	4303      	orrs	r3, r0
    5960:	0252      	lsls	r2, r2, #9
    5962:	4313      	orrs	r3, r2
    5964:	01e2      	lsls	r2, r4, #7
    5966:	d556      	bpl.n	5a16 <__aeabi_dmul+0x426>
    5968:	2001      	movs	r0, #1
    596a:	085a      	lsrs	r2, r3, #1
    596c:	4003      	ands	r3, r0
    596e:	4313      	orrs	r3, r2
    5970:	07e2      	lsls	r2, r4, #31
    5972:	4313      	orrs	r3, r2
    5974:	0864      	lsrs	r4, r4, #1
    5976:	485a      	ldr	r0, [pc, #360]	; (5ae0 <__aeabi_dmul+0x4f0>)
    5978:	4460      	add	r0, ip
    597a:	2800      	cmp	r0, #0
    597c:	dd4d      	ble.n	5a1a <__aeabi_dmul+0x42a>
    597e:	075a      	lsls	r2, r3, #29
    5980:	d009      	beq.n	5996 <__aeabi_dmul+0x3a6>
    5982:	220f      	movs	r2, #15
    5984:	401a      	ands	r2, r3
    5986:	2a04      	cmp	r2, #4
    5988:	d005      	beq.n	5996 <__aeabi_dmul+0x3a6>
    598a:	1d1a      	adds	r2, r3, #4
    598c:	429a      	cmp	r2, r3
    598e:	419b      	sbcs	r3, r3
    5990:	425b      	negs	r3, r3
    5992:	18e4      	adds	r4, r4, r3
    5994:	0013      	movs	r3, r2
    5996:	01e2      	lsls	r2, r4, #7
    5998:	d504      	bpl.n	59a4 <__aeabi_dmul+0x3b4>
    599a:	2080      	movs	r0, #128	; 0x80
    599c:	4a51      	ldr	r2, [pc, #324]	; (5ae4 <__aeabi_dmul+0x4f4>)
    599e:	00c0      	lsls	r0, r0, #3
    59a0:	4014      	ands	r4, r2
    59a2:	4460      	add	r0, ip
    59a4:	4a50      	ldr	r2, [pc, #320]	; (5ae8 <__aeabi_dmul+0x4f8>)
    59a6:	4290      	cmp	r0, r2
    59a8:	dd00      	ble.n	59ac <__aeabi_dmul+0x3bc>
    59aa:	e6e3      	b.n	5774 <__aeabi_dmul+0x184>
    59ac:	2501      	movs	r5, #1
    59ae:	08db      	lsrs	r3, r3, #3
    59b0:	0762      	lsls	r2, r4, #29
    59b2:	431a      	orrs	r2, r3
    59b4:	0264      	lsls	r4, r4, #9
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	4691      	mov	r9, r2
    59ba:	0b22      	lsrs	r2, r4, #12
    59bc:	0544      	lsls	r4, r0, #21
    59be:	0d64      	lsrs	r4, r4, #21
    59c0:	401d      	ands	r5, r3
    59c2:	e67c      	b.n	56be <__aeabi_dmul+0xce>
    59c4:	2280      	movs	r2, #128	; 0x80
    59c6:	4659      	mov	r1, fp
    59c8:	0312      	lsls	r2, r2, #12
    59ca:	4211      	tst	r1, r2
    59cc:	d008      	beq.n	59e0 <__aeabi_dmul+0x3f0>
    59ce:	4214      	tst	r4, r2
    59d0:	d106      	bne.n	59e0 <__aeabi_dmul+0x3f0>
    59d2:	4322      	orrs	r2, r4
    59d4:	0312      	lsls	r2, r2, #12
    59d6:	0b12      	lsrs	r2, r2, #12
    59d8:	4645      	mov	r5, r8
    59da:	4699      	mov	r9, r3
    59dc:	4c43      	ldr	r4, [pc, #268]	; (5aec <__aeabi_dmul+0x4fc>)
    59de:	e66e      	b.n	56be <__aeabi_dmul+0xce>
    59e0:	465b      	mov	r3, fp
    59e2:	431a      	orrs	r2, r3
    59e4:	0312      	lsls	r2, r2, #12
    59e6:	0b12      	lsrs	r2, r2, #12
    59e8:	4c40      	ldr	r4, [pc, #256]	; (5aec <__aeabi_dmul+0x4fc>)
    59ea:	e668      	b.n	56be <__aeabi_dmul+0xce>
    59ec:	0003      	movs	r3, r0
    59ee:	4654      	mov	r4, sl
    59f0:	3b28      	subs	r3, #40	; 0x28
    59f2:	409c      	lsls	r4, r3
    59f4:	2300      	movs	r3, #0
    59f6:	e6b9      	b.n	576c <__aeabi_dmul+0x17c>
    59f8:	f7ff fa6a 	bl	4ed0 <__clzsi2>
    59fc:	3020      	adds	r0, #32
    59fe:	e6a6      	b.n	574e <__aeabi_dmul+0x15e>
    5a00:	0003      	movs	r3, r0
    5a02:	3b28      	subs	r3, #40	; 0x28
    5a04:	409f      	lsls	r7, r3
    5a06:	2300      	movs	r3, #0
    5a08:	46bb      	mov	fp, r7
    5a0a:	4699      	mov	r9, r3
    5a0c:	e68a      	b.n	5724 <__aeabi_dmul+0x134>
    5a0e:	f7ff fa5f 	bl	4ed0 <__clzsi2>
    5a12:	3020      	adds	r0, #32
    5a14:	e674      	b.n	5700 <__aeabi_dmul+0x110>
    5a16:	46b4      	mov	ip, r6
    5a18:	e7ad      	b.n	5976 <__aeabi_dmul+0x386>
    5a1a:	2501      	movs	r5, #1
    5a1c:	1a2a      	subs	r2, r5, r0
    5a1e:	2a38      	cmp	r2, #56	; 0x38
    5a20:	dd06      	ble.n	5a30 <__aeabi_dmul+0x440>
    5a22:	9b01      	ldr	r3, [sp, #4]
    5a24:	2400      	movs	r4, #0
    5a26:	401d      	ands	r5, r3
    5a28:	2300      	movs	r3, #0
    5a2a:	2200      	movs	r2, #0
    5a2c:	4699      	mov	r9, r3
    5a2e:	e646      	b.n	56be <__aeabi_dmul+0xce>
    5a30:	2a1f      	cmp	r2, #31
    5a32:	dc21      	bgt.n	5a78 <__aeabi_dmul+0x488>
    5a34:	2520      	movs	r5, #32
    5a36:	0020      	movs	r0, r4
    5a38:	1aad      	subs	r5, r5, r2
    5a3a:	001e      	movs	r6, r3
    5a3c:	40ab      	lsls	r3, r5
    5a3e:	40a8      	lsls	r0, r5
    5a40:	40d6      	lsrs	r6, r2
    5a42:	1e5d      	subs	r5, r3, #1
    5a44:	41ab      	sbcs	r3, r5
    5a46:	4330      	orrs	r0, r6
    5a48:	4318      	orrs	r0, r3
    5a4a:	40d4      	lsrs	r4, r2
    5a4c:	0743      	lsls	r3, r0, #29
    5a4e:	d009      	beq.n	5a64 <__aeabi_dmul+0x474>
    5a50:	230f      	movs	r3, #15
    5a52:	4003      	ands	r3, r0
    5a54:	2b04      	cmp	r3, #4
    5a56:	d005      	beq.n	5a64 <__aeabi_dmul+0x474>
    5a58:	0003      	movs	r3, r0
    5a5a:	1d18      	adds	r0, r3, #4
    5a5c:	4298      	cmp	r0, r3
    5a5e:	419b      	sbcs	r3, r3
    5a60:	425b      	negs	r3, r3
    5a62:	18e4      	adds	r4, r4, r3
    5a64:	0223      	lsls	r3, r4, #8
    5a66:	d521      	bpl.n	5aac <__aeabi_dmul+0x4bc>
    5a68:	2501      	movs	r5, #1
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	2401      	movs	r4, #1
    5a6e:	401d      	ands	r5, r3
    5a70:	2300      	movs	r3, #0
    5a72:	2200      	movs	r2, #0
    5a74:	4699      	mov	r9, r3
    5a76:	e622      	b.n	56be <__aeabi_dmul+0xce>
    5a78:	251f      	movs	r5, #31
    5a7a:	0021      	movs	r1, r4
    5a7c:	426d      	negs	r5, r5
    5a7e:	1a28      	subs	r0, r5, r0
    5a80:	40c1      	lsrs	r1, r0
    5a82:	0008      	movs	r0, r1
    5a84:	2a20      	cmp	r2, #32
    5a86:	d01d      	beq.n	5ac4 <__aeabi_dmul+0x4d4>
    5a88:	355f      	adds	r5, #95	; 0x5f
    5a8a:	1aaa      	subs	r2, r5, r2
    5a8c:	4094      	lsls	r4, r2
    5a8e:	4323      	orrs	r3, r4
    5a90:	1e5c      	subs	r4, r3, #1
    5a92:	41a3      	sbcs	r3, r4
    5a94:	2507      	movs	r5, #7
    5a96:	4303      	orrs	r3, r0
    5a98:	401d      	ands	r5, r3
    5a9a:	2200      	movs	r2, #0
    5a9c:	2d00      	cmp	r5, #0
    5a9e:	d009      	beq.n	5ab4 <__aeabi_dmul+0x4c4>
    5aa0:	220f      	movs	r2, #15
    5aa2:	2400      	movs	r4, #0
    5aa4:	401a      	ands	r2, r3
    5aa6:	0018      	movs	r0, r3
    5aa8:	2a04      	cmp	r2, #4
    5aaa:	d1d6      	bne.n	5a5a <__aeabi_dmul+0x46a>
    5aac:	0003      	movs	r3, r0
    5aae:	0765      	lsls	r5, r4, #29
    5ab0:	0264      	lsls	r4, r4, #9
    5ab2:	0b22      	lsrs	r2, r4, #12
    5ab4:	08db      	lsrs	r3, r3, #3
    5ab6:	432b      	orrs	r3, r5
    5ab8:	2501      	movs	r5, #1
    5aba:	4699      	mov	r9, r3
    5abc:	9b01      	ldr	r3, [sp, #4]
    5abe:	2400      	movs	r4, #0
    5ac0:	401d      	ands	r5, r3
    5ac2:	e5fc      	b.n	56be <__aeabi_dmul+0xce>
    5ac4:	2400      	movs	r4, #0
    5ac6:	e7e2      	b.n	5a8e <__aeabi_dmul+0x49e>
    5ac8:	2280      	movs	r2, #128	; 0x80
    5aca:	2501      	movs	r5, #1
    5acc:	0312      	lsls	r2, r2, #12
    5ace:	4322      	orrs	r2, r4
    5ad0:	9901      	ldr	r1, [sp, #4]
    5ad2:	0312      	lsls	r2, r2, #12
    5ad4:	0b12      	lsrs	r2, r2, #12
    5ad6:	400d      	ands	r5, r1
    5ad8:	4699      	mov	r9, r3
    5ada:	4c04      	ldr	r4, [pc, #16]	; (5aec <__aeabi_dmul+0x4fc>)
    5adc:	e5ef      	b.n	56be <__aeabi_dmul+0xce>
    5ade:	46c0      	nop			; (mov r8, r8)
    5ae0:	000003ff 	.word	0x000003ff
    5ae4:	feffffff 	.word	0xfeffffff
    5ae8:	000007fe 	.word	0x000007fe
    5aec:	000007ff 	.word	0x000007ff

00005af0 <__aeabi_dsub>:
    5af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5af2:	4646      	mov	r6, r8
    5af4:	46d6      	mov	lr, sl
    5af6:	464f      	mov	r7, r9
    5af8:	030c      	lsls	r4, r1, #12
    5afa:	b5c0      	push	{r6, r7, lr}
    5afc:	0fcd      	lsrs	r5, r1, #31
    5afe:	004e      	lsls	r6, r1, #1
    5b00:	0a61      	lsrs	r1, r4, #9
    5b02:	0f44      	lsrs	r4, r0, #29
    5b04:	430c      	orrs	r4, r1
    5b06:	00c1      	lsls	r1, r0, #3
    5b08:	0058      	lsls	r0, r3, #1
    5b0a:	0d40      	lsrs	r0, r0, #21
    5b0c:	4684      	mov	ip, r0
    5b0e:	468a      	mov	sl, r1
    5b10:	000f      	movs	r7, r1
    5b12:	0319      	lsls	r1, r3, #12
    5b14:	0f50      	lsrs	r0, r2, #29
    5b16:	0a49      	lsrs	r1, r1, #9
    5b18:	4301      	orrs	r1, r0
    5b1a:	48c6      	ldr	r0, [pc, #792]	; (5e34 <__aeabi_dsub+0x344>)
    5b1c:	0d76      	lsrs	r6, r6, #21
    5b1e:	46a8      	mov	r8, r5
    5b20:	0fdb      	lsrs	r3, r3, #31
    5b22:	00d2      	lsls	r2, r2, #3
    5b24:	4584      	cmp	ip, r0
    5b26:	d100      	bne.n	5b2a <__aeabi_dsub+0x3a>
    5b28:	e0d8      	b.n	5cdc <__aeabi_dsub+0x1ec>
    5b2a:	2001      	movs	r0, #1
    5b2c:	4043      	eors	r3, r0
    5b2e:	42ab      	cmp	r3, r5
    5b30:	d100      	bne.n	5b34 <__aeabi_dsub+0x44>
    5b32:	e0a6      	b.n	5c82 <__aeabi_dsub+0x192>
    5b34:	4660      	mov	r0, ip
    5b36:	1a35      	subs	r5, r6, r0
    5b38:	2d00      	cmp	r5, #0
    5b3a:	dc00      	bgt.n	5b3e <__aeabi_dsub+0x4e>
    5b3c:	e105      	b.n	5d4a <__aeabi_dsub+0x25a>
    5b3e:	2800      	cmp	r0, #0
    5b40:	d110      	bne.n	5b64 <__aeabi_dsub+0x74>
    5b42:	000b      	movs	r3, r1
    5b44:	4313      	orrs	r3, r2
    5b46:	d100      	bne.n	5b4a <__aeabi_dsub+0x5a>
    5b48:	e0d7      	b.n	5cfa <__aeabi_dsub+0x20a>
    5b4a:	1e6b      	subs	r3, r5, #1
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d000      	beq.n	5b52 <__aeabi_dsub+0x62>
    5b50:	e14b      	b.n	5dea <__aeabi_dsub+0x2fa>
    5b52:	4653      	mov	r3, sl
    5b54:	1a9f      	subs	r7, r3, r2
    5b56:	45ba      	cmp	sl, r7
    5b58:	4180      	sbcs	r0, r0
    5b5a:	1a64      	subs	r4, r4, r1
    5b5c:	4240      	negs	r0, r0
    5b5e:	1a24      	subs	r4, r4, r0
    5b60:	2601      	movs	r6, #1
    5b62:	e01e      	b.n	5ba2 <__aeabi_dsub+0xb2>
    5b64:	4bb3      	ldr	r3, [pc, #716]	; (5e34 <__aeabi_dsub+0x344>)
    5b66:	429e      	cmp	r6, r3
    5b68:	d048      	beq.n	5bfc <__aeabi_dsub+0x10c>
    5b6a:	2380      	movs	r3, #128	; 0x80
    5b6c:	041b      	lsls	r3, r3, #16
    5b6e:	4319      	orrs	r1, r3
    5b70:	2d38      	cmp	r5, #56	; 0x38
    5b72:	dd00      	ble.n	5b76 <__aeabi_dsub+0x86>
    5b74:	e119      	b.n	5daa <__aeabi_dsub+0x2ba>
    5b76:	2d1f      	cmp	r5, #31
    5b78:	dd00      	ble.n	5b7c <__aeabi_dsub+0x8c>
    5b7a:	e14c      	b.n	5e16 <__aeabi_dsub+0x326>
    5b7c:	2320      	movs	r3, #32
    5b7e:	000f      	movs	r7, r1
    5b80:	1b5b      	subs	r3, r3, r5
    5b82:	0010      	movs	r0, r2
    5b84:	409a      	lsls	r2, r3
    5b86:	409f      	lsls	r7, r3
    5b88:	40e8      	lsrs	r0, r5
    5b8a:	1e53      	subs	r3, r2, #1
    5b8c:	419a      	sbcs	r2, r3
    5b8e:	40e9      	lsrs	r1, r5
    5b90:	4307      	orrs	r7, r0
    5b92:	4317      	orrs	r7, r2
    5b94:	4653      	mov	r3, sl
    5b96:	1bdf      	subs	r7, r3, r7
    5b98:	1a61      	subs	r1, r4, r1
    5b9a:	45ba      	cmp	sl, r7
    5b9c:	41a4      	sbcs	r4, r4
    5b9e:	4264      	negs	r4, r4
    5ba0:	1b0c      	subs	r4, r1, r4
    5ba2:	0223      	lsls	r3, r4, #8
    5ba4:	d400      	bmi.n	5ba8 <__aeabi_dsub+0xb8>
    5ba6:	e0c5      	b.n	5d34 <__aeabi_dsub+0x244>
    5ba8:	0264      	lsls	r4, r4, #9
    5baa:	0a65      	lsrs	r5, r4, #9
    5bac:	2d00      	cmp	r5, #0
    5bae:	d100      	bne.n	5bb2 <__aeabi_dsub+0xc2>
    5bb0:	e0f6      	b.n	5da0 <__aeabi_dsub+0x2b0>
    5bb2:	0028      	movs	r0, r5
    5bb4:	f7ff f98c 	bl	4ed0 <__clzsi2>
    5bb8:	0003      	movs	r3, r0
    5bba:	3b08      	subs	r3, #8
    5bbc:	2b1f      	cmp	r3, #31
    5bbe:	dd00      	ble.n	5bc2 <__aeabi_dsub+0xd2>
    5bc0:	e0e9      	b.n	5d96 <__aeabi_dsub+0x2a6>
    5bc2:	2220      	movs	r2, #32
    5bc4:	003c      	movs	r4, r7
    5bc6:	1ad2      	subs	r2, r2, r3
    5bc8:	409d      	lsls	r5, r3
    5bca:	40d4      	lsrs	r4, r2
    5bcc:	409f      	lsls	r7, r3
    5bce:	4325      	orrs	r5, r4
    5bd0:	429e      	cmp	r6, r3
    5bd2:	dd00      	ble.n	5bd6 <__aeabi_dsub+0xe6>
    5bd4:	e0db      	b.n	5d8e <__aeabi_dsub+0x29e>
    5bd6:	1b9e      	subs	r6, r3, r6
    5bd8:	1c73      	adds	r3, r6, #1
    5bda:	2b1f      	cmp	r3, #31
    5bdc:	dd00      	ble.n	5be0 <__aeabi_dsub+0xf0>
    5bde:	e10a      	b.n	5df6 <__aeabi_dsub+0x306>
    5be0:	2220      	movs	r2, #32
    5be2:	0038      	movs	r0, r7
    5be4:	1ad2      	subs	r2, r2, r3
    5be6:	0029      	movs	r1, r5
    5be8:	4097      	lsls	r7, r2
    5bea:	002c      	movs	r4, r5
    5bec:	4091      	lsls	r1, r2
    5bee:	40d8      	lsrs	r0, r3
    5bf0:	1e7a      	subs	r2, r7, #1
    5bf2:	4197      	sbcs	r7, r2
    5bf4:	40dc      	lsrs	r4, r3
    5bf6:	2600      	movs	r6, #0
    5bf8:	4301      	orrs	r1, r0
    5bfa:	430f      	orrs	r7, r1
    5bfc:	077b      	lsls	r3, r7, #29
    5bfe:	d009      	beq.n	5c14 <__aeabi_dsub+0x124>
    5c00:	230f      	movs	r3, #15
    5c02:	403b      	ands	r3, r7
    5c04:	2b04      	cmp	r3, #4
    5c06:	d005      	beq.n	5c14 <__aeabi_dsub+0x124>
    5c08:	1d3b      	adds	r3, r7, #4
    5c0a:	42bb      	cmp	r3, r7
    5c0c:	41bf      	sbcs	r7, r7
    5c0e:	427f      	negs	r7, r7
    5c10:	19e4      	adds	r4, r4, r7
    5c12:	001f      	movs	r7, r3
    5c14:	0223      	lsls	r3, r4, #8
    5c16:	d525      	bpl.n	5c64 <__aeabi_dsub+0x174>
    5c18:	4b86      	ldr	r3, [pc, #536]	; (5e34 <__aeabi_dsub+0x344>)
    5c1a:	3601      	adds	r6, #1
    5c1c:	429e      	cmp	r6, r3
    5c1e:	d100      	bne.n	5c22 <__aeabi_dsub+0x132>
    5c20:	e0af      	b.n	5d82 <__aeabi_dsub+0x292>
    5c22:	4b85      	ldr	r3, [pc, #532]	; (5e38 <__aeabi_dsub+0x348>)
    5c24:	2501      	movs	r5, #1
    5c26:	401c      	ands	r4, r3
    5c28:	4643      	mov	r3, r8
    5c2a:	0762      	lsls	r2, r4, #29
    5c2c:	08ff      	lsrs	r7, r7, #3
    5c2e:	0264      	lsls	r4, r4, #9
    5c30:	0576      	lsls	r6, r6, #21
    5c32:	4317      	orrs	r7, r2
    5c34:	0b24      	lsrs	r4, r4, #12
    5c36:	0d76      	lsrs	r6, r6, #21
    5c38:	401d      	ands	r5, r3
    5c3a:	2100      	movs	r1, #0
    5c3c:	0324      	lsls	r4, r4, #12
    5c3e:	0b23      	lsrs	r3, r4, #12
    5c40:	0d0c      	lsrs	r4, r1, #20
    5c42:	4a7e      	ldr	r2, [pc, #504]	; (5e3c <__aeabi_dsub+0x34c>)
    5c44:	0524      	lsls	r4, r4, #20
    5c46:	431c      	orrs	r4, r3
    5c48:	4014      	ands	r4, r2
    5c4a:	0533      	lsls	r3, r6, #20
    5c4c:	4323      	orrs	r3, r4
    5c4e:	005b      	lsls	r3, r3, #1
    5c50:	07ed      	lsls	r5, r5, #31
    5c52:	085b      	lsrs	r3, r3, #1
    5c54:	432b      	orrs	r3, r5
    5c56:	0038      	movs	r0, r7
    5c58:	0019      	movs	r1, r3
    5c5a:	bc1c      	pop	{r2, r3, r4}
    5c5c:	4690      	mov	r8, r2
    5c5e:	4699      	mov	r9, r3
    5c60:	46a2      	mov	sl, r4
    5c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c64:	2501      	movs	r5, #1
    5c66:	4643      	mov	r3, r8
    5c68:	0762      	lsls	r2, r4, #29
    5c6a:	08ff      	lsrs	r7, r7, #3
    5c6c:	4317      	orrs	r7, r2
    5c6e:	08e4      	lsrs	r4, r4, #3
    5c70:	401d      	ands	r5, r3
    5c72:	4b70      	ldr	r3, [pc, #448]	; (5e34 <__aeabi_dsub+0x344>)
    5c74:	429e      	cmp	r6, r3
    5c76:	d036      	beq.n	5ce6 <__aeabi_dsub+0x1f6>
    5c78:	0324      	lsls	r4, r4, #12
    5c7a:	0576      	lsls	r6, r6, #21
    5c7c:	0b24      	lsrs	r4, r4, #12
    5c7e:	0d76      	lsrs	r6, r6, #21
    5c80:	e7db      	b.n	5c3a <__aeabi_dsub+0x14a>
    5c82:	4663      	mov	r3, ip
    5c84:	1af3      	subs	r3, r6, r3
    5c86:	2b00      	cmp	r3, #0
    5c88:	dc00      	bgt.n	5c8c <__aeabi_dsub+0x19c>
    5c8a:	e094      	b.n	5db6 <__aeabi_dsub+0x2c6>
    5c8c:	4660      	mov	r0, ip
    5c8e:	2800      	cmp	r0, #0
    5c90:	d035      	beq.n	5cfe <__aeabi_dsub+0x20e>
    5c92:	4868      	ldr	r0, [pc, #416]	; (5e34 <__aeabi_dsub+0x344>)
    5c94:	4286      	cmp	r6, r0
    5c96:	d0b1      	beq.n	5bfc <__aeabi_dsub+0x10c>
    5c98:	2780      	movs	r7, #128	; 0x80
    5c9a:	043f      	lsls	r7, r7, #16
    5c9c:	4339      	orrs	r1, r7
    5c9e:	2b38      	cmp	r3, #56	; 0x38
    5ca0:	dc00      	bgt.n	5ca4 <__aeabi_dsub+0x1b4>
    5ca2:	e0fd      	b.n	5ea0 <__aeabi_dsub+0x3b0>
    5ca4:	430a      	orrs	r2, r1
    5ca6:	0017      	movs	r7, r2
    5ca8:	2100      	movs	r1, #0
    5caa:	1e7a      	subs	r2, r7, #1
    5cac:	4197      	sbcs	r7, r2
    5cae:	4457      	add	r7, sl
    5cb0:	4557      	cmp	r7, sl
    5cb2:	4180      	sbcs	r0, r0
    5cb4:	1909      	adds	r1, r1, r4
    5cb6:	4244      	negs	r4, r0
    5cb8:	190c      	adds	r4, r1, r4
    5cba:	0223      	lsls	r3, r4, #8
    5cbc:	d53a      	bpl.n	5d34 <__aeabi_dsub+0x244>
    5cbe:	4b5d      	ldr	r3, [pc, #372]	; (5e34 <__aeabi_dsub+0x344>)
    5cc0:	3601      	adds	r6, #1
    5cc2:	429e      	cmp	r6, r3
    5cc4:	d100      	bne.n	5cc8 <__aeabi_dsub+0x1d8>
    5cc6:	e14b      	b.n	5f60 <__aeabi_dsub+0x470>
    5cc8:	2201      	movs	r2, #1
    5cca:	4b5b      	ldr	r3, [pc, #364]	; (5e38 <__aeabi_dsub+0x348>)
    5ccc:	401c      	ands	r4, r3
    5cce:	087b      	lsrs	r3, r7, #1
    5cd0:	4017      	ands	r7, r2
    5cd2:	431f      	orrs	r7, r3
    5cd4:	07e2      	lsls	r2, r4, #31
    5cd6:	4317      	orrs	r7, r2
    5cd8:	0864      	lsrs	r4, r4, #1
    5cda:	e78f      	b.n	5bfc <__aeabi_dsub+0x10c>
    5cdc:	0008      	movs	r0, r1
    5cde:	4310      	orrs	r0, r2
    5ce0:	d000      	beq.n	5ce4 <__aeabi_dsub+0x1f4>
    5ce2:	e724      	b.n	5b2e <__aeabi_dsub+0x3e>
    5ce4:	e721      	b.n	5b2a <__aeabi_dsub+0x3a>
    5ce6:	0023      	movs	r3, r4
    5ce8:	433b      	orrs	r3, r7
    5cea:	d100      	bne.n	5cee <__aeabi_dsub+0x1fe>
    5cec:	e1b9      	b.n	6062 <__aeabi_dsub+0x572>
    5cee:	2280      	movs	r2, #128	; 0x80
    5cf0:	0312      	lsls	r2, r2, #12
    5cf2:	4314      	orrs	r4, r2
    5cf4:	0324      	lsls	r4, r4, #12
    5cf6:	0b24      	lsrs	r4, r4, #12
    5cf8:	e79f      	b.n	5c3a <__aeabi_dsub+0x14a>
    5cfa:	002e      	movs	r6, r5
    5cfc:	e77e      	b.n	5bfc <__aeabi_dsub+0x10c>
    5cfe:	0008      	movs	r0, r1
    5d00:	4310      	orrs	r0, r2
    5d02:	d100      	bne.n	5d06 <__aeabi_dsub+0x216>
    5d04:	e0ca      	b.n	5e9c <__aeabi_dsub+0x3ac>
    5d06:	1e58      	subs	r0, r3, #1
    5d08:	4684      	mov	ip, r0
    5d0a:	2800      	cmp	r0, #0
    5d0c:	d000      	beq.n	5d10 <__aeabi_dsub+0x220>
    5d0e:	e0e7      	b.n	5ee0 <__aeabi_dsub+0x3f0>
    5d10:	4452      	add	r2, sl
    5d12:	4552      	cmp	r2, sl
    5d14:	4180      	sbcs	r0, r0
    5d16:	1864      	adds	r4, r4, r1
    5d18:	4240      	negs	r0, r0
    5d1a:	1824      	adds	r4, r4, r0
    5d1c:	0017      	movs	r7, r2
    5d1e:	2601      	movs	r6, #1
    5d20:	0223      	lsls	r3, r4, #8
    5d22:	d507      	bpl.n	5d34 <__aeabi_dsub+0x244>
    5d24:	2602      	movs	r6, #2
    5d26:	e7cf      	b.n	5cc8 <__aeabi_dsub+0x1d8>
    5d28:	4664      	mov	r4, ip
    5d2a:	432c      	orrs	r4, r5
    5d2c:	d100      	bne.n	5d30 <__aeabi_dsub+0x240>
    5d2e:	e1b3      	b.n	6098 <__aeabi_dsub+0x5a8>
    5d30:	002c      	movs	r4, r5
    5d32:	4667      	mov	r7, ip
    5d34:	077b      	lsls	r3, r7, #29
    5d36:	d000      	beq.n	5d3a <__aeabi_dsub+0x24a>
    5d38:	e762      	b.n	5c00 <__aeabi_dsub+0x110>
    5d3a:	0763      	lsls	r3, r4, #29
    5d3c:	08ff      	lsrs	r7, r7, #3
    5d3e:	431f      	orrs	r7, r3
    5d40:	2501      	movs	r5, #1
    5d42:	4643      	mov	r3, r8
    5d44:	08e4      	lsrs	r4, r4, #3
    5d46:	401d      	ands	r5, r3
    5d48:	e793      	b.n	5c72 <__aeabi_dsub+0x182>
    5d4a:	2d00      	cmp	r5, #0
    5d4c:	d178      	bne.n	5e40 <__aeabi_dsub+0x350>
    5d4e:	1c75      	adds	r5, r6, #1
    5d50:	056d      	lsls	r5, r5, #21
    5d52:	0d6d      	lsrs	r5, r5, #21
    5d54:	2d01      	cmp	r5, #1
    5d56:	dc00      	bgt.n	5d5a <__aeabi_dsub+0x26a>
    5d58:	e0f2      	b.n	5f40 <__aeabi_dsub+0x450>
    5d5a:	4650      	mov	r0, sl
    5d5c:	1a80      	subs	r0, r0, r2
    5d5e:	4582      	cmp	sl, r0
    5d60:	41bf      	sbcs	r7, r7
    5d62:	1a65      	subs	r5, r4, r1
    5d64:	427f      	negs	r7, r7
    5d66:	1bed      	subs	r5, r5, r7
    5d68:	4684      	mov	ip, r0
    5d6a:	0228      	lsls	r0, r5, #8
    5d6c:	d400      	bmi.n	5d70 <__aeabi_dsub+0x280>
    5d6e:	e08c      	b.n	5e8a <__aeabi_dsub+0x39a>
    5d70:	4650      	mov	r0, sl
    5d72:	1a17      	subs	r7, r2, r0
    5d74:	42ba      	cmp	r2, r7
    5d76:	4192      	sbcs	r2, r2
    5d78:	1b0c      	subs	r4, r1, r4
    5d7a:	4255      	negs	r5, r2
    5d7c:	1b65      	subs	r5, r4, r5
    5d7e:	4698      	mov	r8, r3
    5d80:	e714      	b.n	5bac <__aeabi_dsub+0xbc>
    5d82:	2501      	movs	r5, #1
    5d84:	4643      	mov	r3, r8
    5d86:	2400      	movs	r4, #0
    5d88:	401d      	ands	r5, r3
    5d8a:	2700      	movs	r7, #0
    5d8c:	e755      	b.n	5c3a <__aeabi_dsub+0x14a>
    5d8e:	4c2a      	ldr	r4, [pc, #168]	; (5e38 <__aeabi_dsub+0x348>)
    5d90:	1af6      	subs	r6, r6, r3
    5d92:	402c      	ands	r4, r5
    5d94:	e732      	b.n	5bfc <__aeabi_dsub+0x10c>
    5d96:	003d      	movs	r5, r7
    5d98:	3828      	subs	r0, #40	; 0x28
    5d9a:	4085      	lsls	r5, r0
    5d9c:	2700      	movs	r7, #0
    5d9e:	e717      	b.n	5bd0 <__aeabi_dsub+0xe0>
    5da0:	0038      	movs	r0, r7
    5da2:	f7ff f895 	bl	4ed0 <__clzsi2>
    5da6:	3020      	adds	r0, #32
    5da8:	e706      	b.n	5bb8 <__aeabi_dsub+0xc8>
    5daa:	430a      	orrs	r2, r1
    5dac:	0017      	movs	r7, r2
    5dae:	2100      	movs	r1, #0
    5db0:	1e7a      	subs	r2, r7, #1
    5db2:	4197      	sbcs	r7, r2
    5db4:	e6ee      	b.n	5b94 <__aeabi_dsub+0xa4>
    5db6:	2b00      	cmp	r3, #0
    5db8:	d000      	beq.n	5dbc <__aeabi_dsub+0x2cc>
    5dba:	e0e5      	b.n	5f88 <__aeabi_dsub+0x498>
    5dbc:	1c73      	adds	r3, r6, #1
    5dbe:	469c      	mov	ip, r3
    5dc0:	055b      	lsls	r3, r3, #21
    5dc2:	0d5b      	lsrs	r3, r3, #21
    5dc4:	2b01      	cmp	r3, #1
    5dc6:	dc00      	bgt.n	5dca <__aeabi_dsub+0x2da>
    5dc8:	e09f      	b.n	5f0a <__aeabi_dsub+0x41a>
    5dca:	4b1a      	ldr	r3, [pc, #104]	; (5e34 <__aeabi_dsub+0x344>)
    5dcc:	459c      	cmp	ip, r3
    5dce:	d100      	bne.n	5dd2 <__aeabi_dsub+0x2e2>
    5dd0:	e0c5      	b.n	5f5e <__aeabi_dsub+0x46e>
    5dd2:	4452      	add	r2, sl
    5dd4:	4552      	cmp	r2, sl
    5dd6:	4180      	sbcs	r0, r0
    5dd8:	1864      	adds	r4, r4, r1
    5dda:	4240      	negs	r0, r0
    5ddc:	1824      	adds	r4, r4, r0
    5dde:	07e7      	lsls	r7, r4, #31
    5de0:	0852      	lsrs	r2, r2, #1
    5de2:	4317      	orrs	r7, r2
    5de4:	0864      	lsrs	r4, r4, #1
    5de6:	4666      	mov	r6, ip
    5de8:	e708      	b.n	5bfc <__aeabi_dsub+0x10c>
    5dea:	4812      	ldr	r0, [pc, #72]	; (5e34 <__aeabi_dsub+0x344>)
    5dec:	4285      	cmp	r5, r0
    5dee:	d100      	bne.n	5df2 <__aeabi_dsub+0x302>
    5df0:	e085      	b.n	5efe <__aeabi_dsub+0x40e>
    5df2:	001d      	movs	r5, r3
    5df4:	e6bc      	b.n	5b70 <__aeabi_dsub+0x80>
    5df6:	0029      	movs	r1, r5
    5df8:	3e1f      	subs	r6, #31
    5dfa:	40f1      	lsrs	r1, r6
    5dfc:	2b20      	cmp	r3, #32
    5dfe:	d100      	bne.n	5e02 <__aeabi_dsub+0x312>
    5e00:	e07f      	b.n	5f02 <__aeabi_dsub+0x412>
    5e02:	2240      	movs	r2, #64	; 0x40
    5e04:	1ad3      	subs	r3, r2, r3
    5e06:	409d      	lsls	r5, r3
    5e08:	432f      	orrs	r7, r5
    5e0a:	1e7d      	subs	r5, r7, #1
    5e0c:	41af      	sbcs	r7, r5
    5e0e:	2400      	movs	r4, #0
    5e10:	430f      	orrs	r7, r1
    5e12:	2600      	movs	r6, #0
    5e14:	e78e      	b.n	5d34 <__aeabi_dsub+0x244>
    5e16:	002b      	movs	r3, r5
    5e18:	000f      	movs	r7, r1
    5e1a:	3b20      	subs	r3, #32
    5e1c:	40df      	lsrs	r7, r3
    5e1e:	2d20      	cmp	r5, #32
    5e20:	d071      	beq.n	5f06 <__aeabi_dsub+0x416>
    5e22:	2340      	movs	r3, #64	; 0x40
    5e24:	1b5d      	subs	r5, r3, r5
    5e26:	40a9      	lsls	r1, r5
    5e28:	430a      	orrs	r2, r1
    5e2a:	1e51      	subs	r1, r2, #1
    5e2c:	418a      	sbcs	r2, r1
    5e2e:	2100      	movs	r1, #0
    5e30:	4317      	orrs	r7, r2
    5e32:	e6af      	b.n	5b94 <__aeabi_dsub+0xa4>
    5e34:	000007ff 	.word	0x000007ff
    5e38:	ff7fffff 	.word	0xff7fffff
    5e3c:	800fffff 	.word	0x800fffff
    5e40:	2e00      	cmp	r6, #0
    5e42:	d03e      	beq.n	5ec2 <__aeabi_dsub+0x3d2>
    5e44:	4eb3      	ldr	r6, [pc, #716]	; (6114 <__aeabi_dsub+0x624>)
    5e46:	45b4      	cmp	ip, r6
    5e48:	d045      	beq.n	5ed6 <__aeabi_dsub+0x3e6>
    5e4a:	2680      	movs	r6, #128	; 0x80
    5e4c:	0436      	lsls	r6, r6, #16
    5e4e:	426d      	negs	r5, r5
    5e50:	4334      	orrs	r4, r6
    5e52:	2d38      	cmp	r5, #56	; 0x38
    5e54:	dd00      	ble.n	5e58 <__aeabi_dsub+0x368>
    5e56:	e0a8      	b.n	5faa <__aeabi_dsub+0x4ba>
    5e58:	2d1f      	cmp	r5, #31
    5e5a:	dd00      	ble.n	5e5e <__aeabi_dsub+0x36e>
    5e5c:	e11f      	b.n	609e <__aeabi_dsub+0x5ae>
    5e5e:	2620      	movs	r6, #32
    5e60:	0027      	movs	r7, r4
    5e62:	4650      	mov	r0, sl
    5e64:	1b76      	subs	r6, r6, r5
    5e66:	40b7      	lsls	r7, r6
    5e68:	40e8      	lsrs	r0, r5
    5e6a:	4307      	orrs	r7, r0
    5e6c:	4650      	mov	r0, sl
    5e6e:	40b0      	lsls	r0, r6
    5e70:	1e46      	subs	r6, r0, #1
    5e72:	41b0      	sbcs	r0, r6
    5e74:	40ec      	lsrs	r4, r5
    5e76:	4338      	orrs	r0, r7
    5e78:	1a17      	subs	r7, r2, r0
    5e7a:	42ba      	cmp	r2, r7
    5e7c:	4192      	sbcs	r2, r2
    5e7e:	1b0c      	subs	r4, r1, r4
    5e80:	4252      	negs	r2, r2
    5e82:	1aa4      	subs	r4, r4, r2
    5e84:	4666      	mov	r6, ip
    5e86:	4698      	mov	r8, r3
    5e88:	e68b      	b.n	5ba2 <__aeabi_dsub+0xb2>
    5e8a:	4664      	mov	r4, ip
    5e8c:	4667      	mov	r7, ip
    5e8e:	432c      	orrs	r4, r5
    5e90:	d000      	beq.n	5e94 <__aeabi_dsub+0x3a4>
    5e92:	e68b      	b.n	5bac <__aeabi_dsub+0xbc>
    5e94:	2500      	movs	r5, #0
    5e96:	2600      	movs	r6, #0
    5e98:	2700      	movs	r7, #0
    5e9a:	e6ea      	b.n	5c72 <__aeabi_dsub+0x182>
    5e9c:	001e      	movs	r6, r3
    5e9e:	e6ad      	b.n	5bfc <__aeabi_dsub+0x10c>
    5ea0:	2b1f      	cmp	r3, #31
    5ea2:	dc60      	bgt.n	5f66 <__aeabi_dsub+0x476>
    5ea4:	2720      	movs	r7, #32
    5ea6:	1af8      	subs	r0, r7, r3
    5ea8:	000f      	movs	r7, r1
    5eaa:	4684      	mov	ip, r0
    5eac:	4087      	lsls	r7, r0
    5eae:	0010      	movs	r0, r2
    5eb0:	40d8      	lsrs	r0, r3
    5eb2:	4307      	orrs	r7, r0
    5eb4:	4660      	mov	r0, ip
    5eb6:	4082      	lsls	r2, r0
    5eb8:	1e50      	subs	r0, r2, #1
    5eba:	4182      	sbcs	r2, r0
    5ebc:	40d9      	lsrs	r1, r3
    5ebe:	4317      	orrs	r7, r2
    5ec0:	e6f5      	b.n	5cae <__aeabi_dsub+0x1be>
    5ec2:	0026      	movs	r6, r4
    5ec4:	4650      	mov	r0, sl
    5ec6:	4306      	orrs	r6, r0
    5ec8:	d005      	beq.n	5ed6 <__aeabi_dsub+0x3e6>
    5eca:	43ed      	mvns	r5, r5
    5ecc:	2d00      	cmp	r5, #0
    5ece:	d0d3      	beq.n	5e78 <__aeabi_dsub+0x388>
    5ed0:	4e90      	ldr	r6, [pc, #576]	; (6114 <__aeabi_dsub+0x624>)
    5ed2:	45b4      	cmp	ip, r6
    5ed4:	d1bd      	bne.n	5e52 <__aeabi_dsub+0x362>
    5ed6:	000c      	movs	r4, r1
    5ed8:	0017      	movs	r7, r2
    5eda:	4666      	mov	r6, ip
    5edc:	4698      	mov	r8, r3
    5ede:	e68d      	b.n	5bfc <__aeabi_dsub+0x10c>
    5ee0:	488c      	ldr	r0, [pc, #560]	; (6114 <__aeabi_dsub+0x624>)
    5ee2:	4283      	cmp	r3, r0
    5ee4:	d00b      	beq.n	5efe <__aeabi_dsub+0x40e>
    5ee6:	4663      	mov	r3, ip
    5ee8:	e6d9      	b.n	5c9e <__aeabi_dsub+0x1ae>
    5eea:	2d00      	cmp	r5, #0
    5eec:	d000      	beq.n	5ef0 <__aeabi_dsub+0x400>
    5eee:	e096      	b.n	601e <__aeabi_dsub+0x52e>
    5ef0:	0008      	movs	r0, r1
    5ef2:	4310      	orrs	r0, r2
    5ef4:	d100      	bne.n	5ef8 <__aeabi_dsub+0x408>
    5ef6:	e0e2      	b.n	60be <__aeabi_dsub+0x5ce>
    5ef8:	000c      	movs	r4, r1
    5efa:	0017      	movs	r7, r2
    5efc:	4698      	mov	r8, r3
    5efe:	4e85      	ldr	r6, [pc, #532]	; (6114 <__aeabi_dsub+0x624>)
    5f00:	e67c      	b.n	5bfc <__aeabi_dsub+0x10c>
    5f02:	2500      	movs	r5, #0
    5f04:	e780      	b.n	5e08 <__aeabi_dsub+0x318>
    5f06:	2100      	movs	r1, #0
    5f08:	e78e      	b.n	5e28 <__aeabi_dsub+0x338>
    5f0a:	0023      	movs	r3, r4
    5f0c:	4650      	mov	r0, sl
    5f0e:	4303      	orrs	r3, r0
    5f10:	2e00      	cmp	r6, #0
    5f12:	d000      	beq.n	5f16 <__aeabi_dsub+0x426>
    5f14:	e0a8      	b.n	6068 <__aeabi_dsub+0x578>
    5f16:	2b00      	cmp	r3, #0
    5f18:	d100      	bne.n	5f1c <__aeabi_dsub+0x42c>
    5f1a:	e0de      	b.n	60da <__aeabi_dsub+0x5ea>
    5f1c:	000b      	movs	r3, r1
    5f1e:	4313      	orrs	r3, r2
    5f20:	d100      	bne.n	5f24 <__aeabi_dsub+0x434>
    5f22:	e66b      	b.n	5bfc <__aeabi_dsub+0x10c>
    5f24:	4452      	add	r2, sl
    5f26:	4552      	cmp	r2, sl
    5f28:	4180      	sbcs	r0, r0
    5f2a:	1864      	adds	r4, r4, r1
    5f2c:	4240      	negs	r0, r0
    5f2e:	1824      	adds	r4, r4, r0
    5f30:	0017      	movs	r7, r2
    5f32:	0223      	lsls	r3, r4, #8
    5f34:	d400      	bmi.n	5f38 <__aeabi_dsub+0x448>
    5f36:	e6fd      	b.n	5d34 <__aeabi_dsub+0x244>
    5f38:	4b77      	ldr	r3, [pc, #476]	; (6118 <__aeabi_dsub+0x628>)
    5f3a:	4666      	mov	r6, ip
    5f3c:	401c      	ands	r4, r3
    5f3e:	e65d      	b.n	5bfc <__aeabi_dsub+0x10c>
    5f40:	0025      	movs	r5, r4
    5f42:	4650      	mov	r0, sl
    5f44:	4305      	orrs	r5, r0
    5f46:	2e00      	cmp	r6, #0
    5f48:	d1cf      	bne.n	5eea <__aeabi_dsub+0x3fa>
    5f4a:	2d00      	cmp	r5, #0
    5f4c:	d14f      	bne.n	5fee <__aeabi_dsub+0x4fe>
    5f4e:	000c      	movs	r4, r1
    5f50:	4314      	orrs	r4, r2
    5f52:	d100      	bne.n	5f56 <__aeabi_dsub+0x466>
    5f54:	e0a0      	b.n	6098 <__aeabi_dsub+0x5a8>
    5f56:	000c      	movs	r4, r1
    5f58:	0017      	movs	r7, r2
    5f5a:	4698      	mov	r8, r3
    5f5c:	e64e      	b.n	5bfc <__aeabi_dsub+0x10c>
    5f5e:	4666      	mov	r6, ip
    5f60:	2400      	movs	r4, #0
    5f62:	2700      	movs	r7, #0
    5f64:	e685      	b.n	5c72 <__aeabi_dsub+0x182>
    5f66:	001f      	movs	r7, r3
    5f68:	0008      	movs	r0, r1
    5f6a:	3f20      	subs	r7, #32
    5f6c:	40f8      	lsrs	r0, r7
    5f6e:	0007      	movs	r7, r0
    5f70:	2b20      	cmp	r3, #32
    5f72:	d100      	bne.n	5f76 <__aeabi_dsub+0x486>
    5f74:	e08e      	b.n	6094 <__aeabi_dsub+0x5a4>
    5f76:	2040      	movs	r0, #64	; 0x40
    5f78:	1ac3      	subs	r3, r0, r3
    5f7a:	4099      	lsls	r1, r3
    5f7c:	430a      	orrs	r2, r1
    5f7e:	1e51      	subs	r1, r2, #1
    5f80:	418a      	sbcs	r2, r1
    5f82:	2100      	movs	r1, #0
    5f84:	4317      	orrs	r7, r2
    5f86:	e692      	b.n	5cae <__aeabi_dsub+0x1be>
    5f88:	2e00      	cmp	r6, #0
    5f8a:	d114      	bne.n	5fb6 <__aeabi_dsub+0x4c6>
    5f8c:	0026      	movs	r6, r4
    5f8e:	4650      	mov	r0, sl
    5f90:	4306      	orrs	r6, r0
    5f92:	d062      	beq.n	605a <__aeabi_dsub+0x56a>
    5f94:	43db      	mvns	r3, r3
    5f96:	2b00      	cmp	r3, #0
    5f98:	d15c      	bne.n	6054 <__aeabi_dsub+0x564>
    5f9a:	1887      	adds	r7, r0, r2
    5f9c:	4297      	cmp	r7, r2
    5f9e:	4192      	sbcs	r2, r2
    5fa0:	1864      	adds	r4, r4, r1
    5fa2:	4252      	negs	r2, r2
    5fa4:	18a4      	adds	r4, r4, r2
    5fa6:	4666      	mov	r6, ip
    5fa8:	e687      	b.n	5cba <__aeabi_dsub+0x1ca>
    5faa:	4650      	mov	r0, sl
    5fac:	4320      	orrs	r0, r4
    5fae:	1e44      	subs	r4, r0, #1
    5fb0:	41a0      	sbcs	r0, r4
    5fb2:	2400      	movs	r4, #0
    5fb4:	e760      	b.n	5e78 <__aeabi_dsub+0x388>
    5fb6:	4e57      	ldr	r6, [pc, #348]	; (6114 <__aeabi_dsub+0x624>)
    5fb8:	45b4      	cmp	ip, r6
    5fba:	d04e      	beq.n	605a <__aeabi_dsub+0x56a>
    5fbc:	2680      	movs	r6, #128	; 0x80
    5fbe:	0436      	lsls	r6, r6, #16
    5fc0:	425b      	negs	r3, r3
    5fc2:	4334      	orrs	r4, r6
    5fc4:	2b38      	cmp	r3, #56	; 0x38
    5fc6:	dd00      	ble.n	5fca <__aeabi_dsub+0x4da>
    5fc8:	e07f      	b.n	60ca <__aeabi_dsub+0x5da>
    5fca:	2b1f      	cmp	r3, #31
    5fcc:	dd00      	ble.n	5fd0 <__aeabi_dsub+0x4e0>
    5fce:	e08b      	b.n	60e8 <__aeabi_dsub+0x5f8>
    5fd0:	2620      	movs	r6, #32
    5fd2:	0027      	movs	r7, r4
    5fd4:	4650      	mov	r0, sl
    5fd6:	1af6      	subs	r6, r6, r3
    5fd8:	40b7      	lsls	r7, r6
    5fda:	40d8      	lsrs	r0, r3
    5fdc:	4307      	orrs	r7, r0
    5fde:	4650      	mov	r0, sl
    5fe0:	40b0      	lsls	r0, r6
    5fe2:	1e46      	subs	r6, r0, #1
    5fe4:	41b0      	sbcs	r0, r6
    5fe6:	4307      	orrs	r7, r0
    5fe8:	40dc      	lsrs	r4, r3
    5fea:	18bf      	adds	r7, r7, r2
    5fec:	e7d6      	b.n	5f9c <__aeabi_dsub+0x4ac>
    5fee:	000d      	movs	r5, r1
    5ff0:	4315      	orrs	r5, r2
    5ff2:	d100      	bne.n	5ff6 <__aeabi_dsub+0x506>
    5ff4:	e602      	b.n	5bfc <__aeabi_dsub+0x10c>
    5ff6:	4650      	mov	r0, sl
    5ff8:	1a80      	subs	r0, r0, r2
    5ffa:	4582      	cmp	sl, r0
    5ffc:	41bf      	sbcs	r7, r7
    5ffe:	1a65      	subs	r5, r4, r1
    6000:	427f      	negs	r7, r7
    6002:	1bed      	subs	r5, r5, r7
    6004:	4684      	mov	ip, r0
    6006:	0228      	lsls	r0, r5, #8
    6008:	d400      	bmi.n	600c <__aeabi_dsub+0x51c>
    600a:	e68d      	b.n	5d28 <__aeabi_dsub+0x238>
    600c:	4650      	mov	r0, sl
    600e:	1a17      	subs	r7, r2, r0
    6010:	42ba      	cmp	r2, r7
    6012:	4192      	sbcs	r2, r2
    6014:	1b0c      	subs	r4, r1, r4
    6016:	4252      	negs	r2, r2
    6018:	1aa4      	subs	r4, r4, r2
    601a:	4698      	mov	r8, r3
    601c:	e5ee      	b.n	5bfc <__aeabi_dsub+0x10c>
    601e:	000d      	movs	r5, r1
    6020:	4315      	orrs	r5, r2
    6022:	d100      	bne.n	6026 <__aeabi_dsub+0x536>
    6024:	e76b      	b.n	5efe <__aeabi_dsub+0x40e>
    6026:	4650      	mov	r0, sl
    6028:	0767      	lsls	r7, r4, #29
    602a:	08c0      	lsrs	r0, r0, #3
    602c:	4307      	orrs	r7, r0
    602e:	2080      	movs	r0, #128	; 0x80
    6030:	08e4      	lsrs	r4, r4, #3
    6032:	0300      	lsls	r0, r0, #12
    6034:	4204      	tst	r4, r0
    6036:	d007      	beq.n	6048 <__aeabi_dsub+0x558>
    6038:	08cd      	lsrs	r5, r1, #3
    603a:	4205      	tst	r5, r0
    603c:	d104      	bne.n	6048 <__aeabi_dsub+0x558>
    603e:	002c      	movs	r4, r5
    6040:	4698      	mov	r8, r3
    6042:	08d7      	lsrs	r7, r2, #3
    6044:	0749      	lsls	r1, r1, #29
    6046:	430f      	orrs	r7, r1
    6048:	0f7b      	lsrs	r3, r7, #29
    604a:	00e4      	lsls	r4, r4, #3
    604c:	431c      	orrs	r4, r3
    604e:	00ff      	lsls	r7, r7, #3
    6050:	4e30      	ldr	r6, [pc, #192]	; (6114 <__aeabi_dsub+0x624>)
    6052:	e5d3      	b.n	5bfc <__aeabi_dsub+0x10c>
    6054:	4e2f      	ldr	r6, [pc, #188]	; (6114 <__aeabi_dsub+0x624>)
    6056:	45b4      	cmp	ip, r6
    6058:	d1b4      	bne.n	5fc4 <__aeabi_dsub+0x4d4>
    605a:	000c      	movs	r4, r1
    605c:	0017      	movs	r7, r2
    605e:	4666      	mov	r6, ip
    6060:	e5cc      	b.n	5bfc <__aeabi_dsub+0x10c>
    6062:	2700      	movs	r7, #0
    6064:	2400      	movs	r4, #0
    6066:	e5e8      	b.n	5c3a <__aeabi_dsub+0x14a>
    6068:	2b00      	cmp	r3, #0
    606a:	d039      	beq.n	60e0 <__aeabi_dsub+0x5f0>
    606c:	000b      	movs	r3, r1
    606e:	4313      	orrs	r3, r2
    6070:	d100      	bne.n	6074 <__aeabi_dsub+0x584>
    6072:	e744      	b.n	5efe <__aeabi_dsub+0x40e>
    6074:	08c0      	lsrs	r0, r0, #3
    6076:	0767      	lsls	r7, r4, #29
    6078:	4307      	orrs	r7, r0
    607a:	2080      	movs	r0, #128	; 0x80
    607c:	08e4      	lsrs	r4, r4, #3
    607e:	0300      	lsls	r0, r0, #12
    6080:	4204      	tst	r4, r0
    6082:	d0e1      	beq.n	6048 <__aeabi_dsub+0x558>
    6084:	08cb      	lsrs	r3, r1, #3
    6086:	4203      	tst	r3, r0
    6088:	d1de      	bne.n	6048 <__aeabi_dsub+0x558>
    608a:	08d7      	lsrs	r7, r2, #3
    608c:	0749      	lsls	r1, r1, #29
    608e:	430f      	orrs	r7, r1
    6090:	001c      	movs	r4, r3
    6092:	e7d9      	b.n	6048 <__aeabi_dsub+0x558>
    6094:	2100      	movs	r1, #0
    6096:	e771      	b.n	5f7c <__aeabi_dsub+0x48c>
    6098:	2500      	movs	r5, #0
    609a:	2700      	movs	r7, #0
    609c:	e5e9      	b.n	5c72 <__aeabi_dsub+0x182>
    609e:	002e      	movs	r6, r5
    60a0:	0027      	movs	r7, r4
    60a2:	3e20      	subs	r6, #32
    60a4:	40f7      	lsrs	r7, r6
    60a6:	2d20      	cmp	r5, #32
    60a8:	d02f      	beq.n	610a <__aeabi_dsub+0x61a>
    60aa:	2640      	movs	r6, #64	; 0x40
    60ac:	1b75      	subs	r5, r6, r5
    60ae:	40ac      	lsls	r4, r5
    60b0:	4650      	mov	r0, sl
    60b2:	4320      	orrs	r0, r4
    60b4:	1e44      	subs	r4, r0, #1
    60b6:	41a0      	sbcs	r0, r4
    60b8:	2400      	movs	r4, #0
    60ba:	4338      	orrs	r0, r7
    60bc:	e6dc      	b.n	5e78 <__aeabi_dsub+0x388>
    60be:	2480      	movs	r4, #128	; 0x80
    60c0:	2500      	movs	r5, #0
    60c2:	0324      	lsls	r4, r4, #12
    60c4:	4e13      	ldr	r6, [pc, #76]	; (6114 <__aeabi_dsub+0x624>)
    60c6:	2700      	movs	r7, #0
    60c8:	e5d3      	b.n	5c72 <__aeabi_dsub+0x182>
    60ca:	4650      	mov	r0, sl
    60cc:	4320      	orrs	r0, r4
    60ce:	0007      	movs	r7, r0
    60d0:	1e78      	subs	r0, r7, #1
    60d2:	4187      	sbcs	r7, r0
    60d4:	2400      	movs	r4, #0
    60d6:	18bf      	adds	r7, r7, r2
    60d8:	e760      	b.n	5f9c <__aeabi_dsub+0x4ac>
    60da:	000c      	movs	r4, r1
    60dc:	0017      	movs	r7, r2
    60de:	e58d      	b.n	5bfc <__aeabi_dsub+0x10c>
    60e0:	000c      	movs	r4, r1
    60e2:	0017      	movs	r7, r2
    60e4:	4e0b      	ldr	r6, [pc, #44]	; (6114 <__aeabi_dsub+0x624>)
    60e6:	e589      	b.n	5bfc <__aeabi_dsub+0x10c>
    60e8:	001e      	movs	r6, r3
    60ea:	0027      	movs	r7, r4
    60ec:	3e20      	subs	r6, #32
    60ee:	40f7      	lsrs	r7, r6
    60f0:	2b20      	cmp	r3, #32
    60f2:	d00c      	beq.n	610e <__aeabi_dsub+0x61e>
    60f4:	2640      	movs	r6, #64	; 0x40
    60f6:	1af3      	subs	r3, r6, r3
    60f8:	409c      	lsls	r4, r3
    60fa:	4650      	mov	r0, sl
    60fc:	4320      	orrs	r0, r4
    60fe:	1e44      	subs	r4, r0, #1
    6100:	41a0      	sbcs	r0, r4
    6102:	4307      	orrs	r7, r0
    6104:	2400      	movs	r4, #0
    6106:	18bf      	adds	r7, r7, r2
    6108:	e748      	b.n	5f9c <__aeabi_dsub+0x4ac>
    610a:	2400      	movs	r4, #0
    610c:	e7d0      	b.n	60b0 <__aeabi_dsub+0x5c0>
    610e:	2400      	movs	r4, #0
    6110:	e7f3      	b.n	60fa <__aeabi_dsub+0x60a>
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	000007ff 	.word	0x000007ff
    6118:	ff7fffff 	.word	0xff7fffff

0000611c <__aeabi_d2iz>:
    611c:	b530      	push	{r4, r5, lr}
    611e:	4d13      	ldr	r5, [pc, #76]	; (616c <__aeabi_d2iz+0x50>)
    6120:	030a      	lsls	r2, r1, #12
    6122:	004b      	lsls	r3, r1, #1
    6124:	0b12      	lsrs	r2, r2, #12
    6126:	0d5b      	lsrs	r3, r3, #21
    6128:	0fc9      	lsrs	r1, r1, #31
    612a:	2400      	movs	r4, #0
    612c:	42ab      	cmp	r3, r5
    612e:	dd10      	ble.n	6152 <__aeabi_d2iz+0x36>
    6130:	4c0f      	ldr	r4, [pc, #60]	; (6170 <__aeabi_d2iz+0x54>)
    6132:	42a3      	cmp	r3, r4
    6134:	dc0f      	bgt.n	6156 <__aeabi_d2iz+0x3a>
    6136:	2480      	movs	r4, #128	; 0x80
    6138:	4d0e      	ldr	r5, [pc, #56]	; (6174 <__aeabi_d2iz+0x58>)
    613a:	0364      	lsls	r4, r4, #13
    613c:	4322      	orrs	r2, r4
    613e:	1aed      	subs	r5, r5, r3
    6140:	2d1f      	cmp	r5, #31
    6142:	dd0b      	ble.n	615c <__aeabi_d2iz+0x40>
    6144:	480c      	ldr	r0, [pc, #48]	; (6178 <__aeabi_d2iz+0x5c>)
    6146:	1ac3      	subs	r3, r0, r3
    6148:	40da      	lsrs	r2, r3
    614a:	4254      	negs	r4, r2
    614c:	2900      	cmp	r1, #0
    614e:	d100      	bne.n	6152 <__aeabi_d2iz+0x36>
    6150:	0014      	movs	r4, r2
    6152:	0020      	movs	r0, r4
    6154:	bd30      	pop	{r4, r5, pc}
    6156:	4b09      	ldr	r3, [pc, #36]	; (617c <__aeabi_d2iz+0x60>)
    6158:	18cc      	adds	r4, r1, r3
    615a:	e7fa      	b.n	6152 <__aeabi_d2iz+0x36>
    615c:	4c08      	ldr	r4, [pc, #32]	; (6180 <__aeabi_d2iz+0x64>)
    615e:	40e8      	lsrs	r0, r5
    6160:	46a4      	mov	ip, r4
    6162:	4463      	add	r3, ip
    6164:	409a      	lsls	r2, r3
    6166:	4302      	orrs	r2, r0
    6168:	e7ef      	b.n	614a <__aeabi_d2iz+0x2e>
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	000003fe 	.word	0x000003fe
    6170:	0000041d 	.word	0x0000041d
    6174:	00000433 	.word	0x00000433
    6178:	00000413 	.word	0x00000413
    617c:	7fffffff 	.word	0x7fffffff
    6180:	fffffbed 	.word	0xfffffbed

00006184 <__aeabi_i2d>:
    6184:	b570      	push	{r4, r5, r6, lr}
    6186:	2800      	cmp	r0, #0
    6188:	d030      	beq.n	61ec <__aeabi_i2d+0x68>
    618a:	17c3      	asrs	r3, r0, #31
    618c:	18c4      	adds	r4, r0, r3
    618e:	405c      	eors	r4, r3
    6190:	0fc5      	lsrs	r5, r0, #31
    6192:	0020      	movs	r0, r4
    6194:	f7fe fe9c 	bl	4ed0 <__clzsi2>
    6198:	4b17      	ldr	r3, [pc, #92]	; (61f8 <__aeabi_i2d+0x74>)
    619a:	4a18      	ldr	r2, [pc, #96]	; (61fc <__aeabi_i2d+0x78>)
    619c:	1a1b      	subs	r3, r3, r0
    619e:	1ad2      	subs	r2, r2, r3
    61a0:	2a1f      	cmp	r2, #31
    61a2:	dd18      	ble.n	61d6 <__aeabi_i2d+0x52>
    61a4:	4a16      	ldr	r2, [pc, #88]	; (6200 <__aeabi_i2d+0x7c>)
    61a6:	1ad2      	subs	r2, r2, r3
    61a8:	4094      	lsls	r4, r2
    61aa:	2200      	movs	r2, #0
    61ac:	0324      	lsls	r4, r4, #12
    61ae:	055b      	lsls	r3, r3, #21
    61b0:	0b24      	lsrs	r4, r4, #12
    61b2:	0d5b      	lsrs	r3, r3, #21
    61b4:	2100      	movs	r1, #0
    61b6:	0010      	movs	r0, r2
    61b8:	0324      	lsls	r4, r4, #12
    61ba:	0d0a      	lsrs	r2, r1, #20
    61bc:	0b24      	lsrs	r4, r4, #12
    61be:	0512      	lsls	r2, r2, #20
    61c0:	4322      	orrs	r2, r4
    61c2:	4c10      	ldr	r4, [pc, #64]	; (6204 <__aeabi_i2d+0x80>)
    61c4:	051b      	lsls	r3, r3, #20
    61c6:	4022      	ands	r2, r4
    61c8:	4313      	orrs	r3, r2
    61ca:	005b      	lsls	r3, r3, #1
    61cc:	07ed      	lsls	r5, r5, #31
    61ce:	085b      	lsrs	r3, r3, #1
    61d0:	432b      	orrs	r3, r5
    61d2:	0019      	movs	r1, r3
    61d4:	bd70      	pop	{r4, r5, r6, pc}
    61d6:	0021      	movs	r1, r4
    61d8:	4091      	lsls	r1, r2
    61da:	000a      	movs	r2, r1
    61dc:	210b      	movs	r1, #11
    61de:	1a08      	subs	r0, r1, r0
    61e0:	40c4      	lsrs	r4, r0
    61e2:	055b      	lsls	r3, r3, #21
    61e4:	0324      	lsls	r4, r4, #12
    61e6:	0b24      	lsrs	r4, r4, #12
    61e8:	0d5b      	lsrs	r3, r3, #21
    61ea:	e7e3      	b.n	61b4 <__aeabi_i2d+0x30>
    61ec:	2500      	movs	r5, #0
    61ee:	2300      	movs	r3, #0
    61f0:	2400      	movs	r4, #0
    61f2:	2200      	movs	r2, #0
    61f4:	e7de      	b.n	61b4 <__aeabi_i2d+0x30>
    61f6:	46c0      	nop			; (mov r8, r8)
    61f8:	0000041e 	.word	0x0000041e
    61fc:	00000433 	.word	0x00000433
    6200:	00000413 	.word	0x00000413
    6204:	800fffff 	.word	0x800fffff

00006208 <__aeabi_cdrcmple>:
    6208:	4684      	mov	ip, r0
    620a:	1c10      	adds	r0, r2, #0
    620c:	4662      	mov	r2, ip
    620e:	468c      	mov	ip, r1
    6210:	1c19      	adds	r1, r3, #0
    6212:	4663      	mov	r3, ip
    6214:	e000      	b.n	6218 <__aeabi_cdcmpeq>
    6216:	46c0      	nop			; (mov r8, r8)

00006218 <__aeabi_cdcmpeq>:
    6218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    621a:	f000 f8d1 	bl	63c0 <__ledf2>
    621e:	2800      	cmp	r0, #0
    6220:	d401      	bmi.n	6226 <__aeabi_cdcmpeq+0xe>
    6222:	2100      	movs	r1, #0
    6224:	42c8      	cmn	r0, r1
    6226:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006228 <__aeabi_dcmpeq>:
    6228:	b510      	push	{r4, lr}
    622a:	f000 f82b 	bl	6284 <__eqdf2>
    622e:	4240      	negs	r0, r0
    6230:	3001      	adds	r0, #1
    6232:	bd10      	pop	{r4, pc}

00006234 <__aeabi_dcmplt>:
    6234:	b510      	push	{r4, lr}
    6236:	f000 f8c3 	bl	63c0 <__ledf2>
    623a:	2800      	cmp	r0, #0
    623c:	db01      	blt.n	6242 <__aeabi_dcmplt+0xe>
    623e:	2000      	movs	r0, #0
    6240:	bd10      	pop	{r4, pc}
    6242:	2001      	movs	r0, #1
    6244:	bd10      	pop	{r4, pc}
    6246:	46c0      	nop			; (mov r8, r8)

00006248 <__aeabi_dcmple>:
    6248:	b510      	push	{r4, lr}
    624a:	f000 f8b9 	bl	63c0 <__ledf2>
    624e:	2800      	cmp	r0, #0
    6250:	dd01      	ble.n	6256 <__aeabi_dcmple+0xe>
    6252:	2000      	movs	r0, #0
    6254:	bd10      	pop	{r4, pc}
    6256:	2001      	movs	r0, #1
    6258:	bd10      	pop	{r4, pc}
    625a:	46c0      	nop			; (mov r8, r8)

0000625c <__aeabi_dcmpgt>:
    625c:	b510      	push	{r4, lr}
    625e:	f000 f84b 	bl	62f8 <__gedf2>
    6262:	2800      	cmp	r0, #0
    6264:	dc01      	bgt.n	626a <__aeabi_dcmpgt+0xe>
    6266:	2000      	movs	r0, #0
    6268:	bd10      	pop	{r4, pc}
    626a:	2001      	movs	r0, #1
    626c:	bd10      	pop	{r4, pc}
    626e:	46c0      	nop			; (mov r8, r8)

00006270 <__aeabi_dcmpge>:
    6270:	b510      	push	{r4, lr}
    6272:	f000 f841 	bl	62f8 <__gedf2>
    6276:	2800      	cmp	r0, #0
    6278:	da01      	bge.n	627e <__aeabi_dcmpge+0xe>
    627a:	2000      	movs	r0, #0
    627c:	bd10      	pop	{r4, pc}
    627e:	2001      	movs	r0, #1
    6280:	bd10      	pop	{r4, pc}
    6282:	46c0      	nop			; (mov r8, r8)

00006284 <__eqdf2>:
    6284:	b5f0      	push	{r4, r5, r6, r7, lr}
    6286:	464f      	mov	r7, r9
    6288:	4646      	mov	r6, r8
    628a:	46d6      	mov	lr, sl
    628c:	005c      	lsls	r4, r3, #1
    628e:	b5c0      	push	{r6, r7, lr}
    6290:	031f      	lsls	r7, r3, #12
    6292:	0fdb      	lsrs	r3, r3, #31
    6294:	469a      	mov	sl, r3
    6296:	4b17      	ldr	r3, [pc, #92]	; (62f4 <__eqdf2+0x70>)
    6298:	030e      	lsls	r6, r1, #12
    629a:	004d      	lsls	r5, r1, #1
    629c:	4684      	mov	ip, r0
    629e:	4680      	mov	r8, r0
    62a0:	0b36      	lsrs	r6, r6, #12
    62a2:	0d6d      	lsrs	r5, r5, #21
    62a4:	0fc9      	lsrs	r1, r1, #31
    62a6:	4691      	mov	r9, r2
    62a8:	0b3f      	lsrs	r7, r7, #12
    62aa:	0d64      	lsrs	r4, r4, #21
    62ac:	2001      	movs	r0, #1
    62ae:	429d      	cmp	r5, r3
    62b0:	d008      	beq.n	62c4 <__eqdf2+0x40>
    62b2:	429c      	cmp	r4, r3
    62b4:	d001      	beq.n	62ba <__eqdf2+0x36>
    62b6:	42a5      	cmp	r5, r4
    62b8:	d00b      	beq.n	62d2 <__eqdf2+0x4e>
    62ba:	bc1c      	pop	{r2, r3, r4}
    62bc:	4690      	mov	r8, r2
    62be:	4699      	mov	r9, r3
    62c0:	46a2      	mov	sl, r4
    62c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c4:	4663      	mov	r3, ip
    62c6:	4333      	orrs	r3, r6
    62c8:	d1f7      	bne.n	62ba <__eqdf2+0x36>
    62ca:	42ac      	cmp	r4, r5
    62cc:	d1f5      	bne.n	62ba <__eqdf2+0x36>
    62ce:	433a      	orrs	r2, r7
    62d0:	d1f3      	bne.n	62ba <__eqdf2+0x36>
    62d2:	2001      	movs	r0, #1
    62d4:	42be      	cmp	r6, r7
    62d6:	d1f0      	bne.n	62ba <__eqdf2+0x36>
    62d8:	45c8      	cmp	r8, r9
    62da:	d1ee      	bne.n	62ba <__eqdf2+0x36>
    62dc:	4551      	cmp	r1, sl
    62de:	d007      	beq.n	62f0 <__eqdf2+0x6c>
    62e0:	2d00      	cmp	r5, #0
    62e2:	d1ea      	bne.n	62ba <__eqdf2+0x36>
    62e4:	4663      	mov	r3, ip
    62e6:	431e      	orrs	r6, r3
    62e8:	0030      	movs	r0, r6
    62ea:	1e46      	subs	r6, r0, #1
    62ec:	41b0      	sbcs	r0, r6
    62ee:	e7e4      	b.n	62ba <__eqdf2+0x36>
    62f0:	2000      	movs	r0, #0
    62f2:	e7e2      	b.n	62ba <__eqdf2+0x36>
    62f4:	000007ff 	.word	0x000007ff

000062f8 <__gedf2>:
    62f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    62fa:	4645      	mov	r5, r8
    62fc:	46de      	mov	lr, fp
    62fe:	4657      	mov	r7, sl
    6300:	464e      	mov	r6, r9
    6302:	b5e0      	push	{r5, r6, r7, lr}
    6304:	031f      	lsls	r7, r3, #12
    6306:	0b3d      	lsrs	r5, r7, #12
    6308:	4f2c      	ldr	r7, [pc, #176]	; (63bc <__gedf2+0xc4>)
    630a:	030e      	lsls	r6, r1, #12
    630c:	004c      	lsls	r4, r1, #1
    630e:	46ab      	mov	fp, r5
    6310:	005d      	lsls	r5, r3, #1
    6312:	4684      	mov	ip, r0
    6314:	0b36      	lsrs	r6, r6, #12
    6316:	0d64      	lsrs	r4, r4, #21
    6318:	0fc9      	lsrs	r1, r1, #31
    631a:	4690      	mov	r8, r2
    631c:	0d6d      	lsrs	r5, r5, #21
    631e:	0fdb      	lsrs	r3, r3, #31
    6320:	42bc      	cmp	r4, r7
    6322:	d02a      	beq.n	637a <__gedf2+0x82>
    6324:	4f25      	ldr	r7, [pc, #148]	; (63bc <__gedf2+0xc4>)
    6326:	42bd      	cmp	r5, r7
    6328:	d02d      	beq.n	6386 <__gedf2+0x8e>
    632a:	2c00      	cmp	r4, #0
    632c:	d10f      	bne.n	634e <__gedf2+0x56>
    632e:	4330      	orrs	r0, r6
    6330:	0007      	movs	r7, r0
    6332:	4681      	mov	r9, r0
    6334:	4278      	negs	r0, r7
    6336:	4178      	adcs	r0, r7
    6338:	b2c0      	uxtb	r0, r0
    633a:	2d00      	cmp	r5, #0
    633c:	d117      	bne.n	636e <__gedf2+0x76>
    633e:	465f      	mov	r7, fp
    6340:	433a      	orrs	r2, r7
    6342:	d114      	bne.n	636e <__gedf2+0x76>
    6344:	464b      	mov	r3, r9
    6346:	2000      	movs	r0, #0
    6348:	2b00      	cmp	r3, #0
    634a:	d00a      	beq.n	6362 <__gedf2+0x6a>
    634c:	e006      	b.n	635c <__gedf2+0x64>
    634e:	2d00      	cmp	r5, #0
    6350:	d102      	bne.n	6358 <__gedf2+0x60>
    6352:	4658      	mov	r0, fp
    6354:	4302      	orrs	r2, r0
    6356:	d001      	beq.n	635c <__gedf2+0x64>
    6358:	4299      	cmp	r1, r3
    635a:	d018      	beq.n	638e <__gedf2+0x96>
    635c:	4248      	negs	r0, r1
    635e:	2101      	movs	r1, #1
    6360:	4308      	orrs	r0, r1
    6362:	bc3c      	pop	{r2, r3, r4, r5}
    6364:	4690      	mov	r8, r2
    6366:	4699      	mov	r9, r3
    6368:	46a2      	mov	sl, r4
    636a:	46ab      	mov	fp, r5
    636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    636e:	2800      	cmp	r0, #0
    6370:	d0f2      	beq.n	6358 <__gedf2+0x60>
    6372:	2001      	movs	r0, #1
    6374:	3b01      	subs	r3, #1
    6376:	4318      	orrs	r0, r3
    6378:	e7f3      	b.n	6362 <__gedf2+0x6a>
    637a:	0037      	movs	r7, r6
    637c:	4307      	orrs	r7, r0
    637e:	d0d1      	beq.n	6324 <__gedf2+0x2c>
    6380:	2002      	movs	r0, #2
    6382:	4240      	negs	r0, r0
    6384:	e7ed      	b.n	6362 <__gedf2+0x6a>
    6386:	465f      	mov	r7, fp
    6388:	4317      	orrs	r7, r2
    638a:	d0ce      	beq.n	632a <__gedf2+0x32>
    638c:	e7f8      	b.n	6380 <__gedf2+0x88>
    638e:	42ac      	cmp	r4, r5
    6390:	dce4      	bgt.n	635c <__gedf2+0x64>
    6392:	da03      	bge.n	639c <__gedf2+0xa4>
    6394:	1e48      	subs	r0, r1, #1
    6396:	2101      	movs	r1, #1
    6398:	4308      	orrs	r0, r1
    639a:	e7e2      	b.n	6362 <__gedf2+0x6a>
    639c:	455e      	cmp	r6, fp
    639e:	d8dd      	bhi.n	635c <__gedf2+0x64>
    63a0:	d006      	beq.n	63b0 <__gedf2+0xb8>
    63a2:	2000      	movs	r0, #0
    63a4:	455e      	cmp	r6, fp
    63a6:	d2dc      	bcs.n	6362 <__gedf2+0x6a>
    63a8:	2301      	movs	r3, #1
    63aa:	1e48      	subs	r0, r1, #1
    63ac:	4318      	orrs	r0, r3
    63ae:	e7d8      	b.n	6362 <__gedf2+0x6a>
    63b0:	45c4      	cmp	ip, r8
    63b2:	d8d3      	bhi.n	635c <__gedf2+0x64>
    63b4:	2000      	movs	r0, #0
    63b6:	45c4      	cmp	ip, r8
    63b8:	d3f6      	bcc.n	63a8 <__gedf2+0xb0>
    63ba:	e7d2      	b.n	6362 <__gedf2+0x6a>
    63bc:	000007ff 	.word	0x000007ff

000063c0 <__ledf2>:
    63c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63c2:	464e      	mov	r6, r9
    63c4:	4645      	mov	r5, r8
    63c6:	46de      	mov	lr, fp
    63c8:	4657      	mov	r7, sl
    63ca:	005c      	lsls	r4, r3, #1
    63cc:	b5e0      	push	{r5, r6, r7, lr}
    63ce:	031f      	lsls	r7, r3, #12
    63d0:	0fdb      	lsrs	r3, r3, #31
    63d2:	4699      	mov	r9, r3
    63d4:	4b2a      	ldr	r3, [pc, #168]	; (6480 <__ledf2+0xc0>)
    63d6:	030e      	lsls	r6, r1, #12
    63d8:	004d      	lsls	r5, r1, #1
    63da:	0fc9      	lsrs	r1, r1, #31
    63dc:	4684      	mov	ip, r0
    63de:	0b36      	lsrs	r6, r6, #12
    63e0:	0d6d      	lsrs	r5, r5, #21
    63e2:	468b      	mov	fp, r1
    63e4:	4690      	mov	r8, r2
    63e6:	0b3f      	lsrs	r7, r7, #12
    63e8:	0d64      	lsrs	r4, r4, #21
    63ea:	429d      	cmp	r5, r3
    63ec:	d020      	beq.n	6430 <__ledf2+0x70>
    63ee:	4b24      	ldr	r3, [pc, #144]	; (6480 <__ledf2+0xc0>)
    63f0:	429c      	cmp	r4, r3
    63f2:	d022      	beq.n	643a <__ledf2+0x7a>
    63f4:	2d00      	cmp	r5, #0
    63f6:	d112      	bne.n	641e <__ledf2+0x5e>
    63f8:	4330      	orrs	r0, r6
    63fa:	4243      	negs	r3, r0
    63fc:	4143      	adcs	r3, r0
    63fe:	b2db      	uxtb	r3, r3
    6400:	2c00      	cmp	r4, #0
    6402:	d01f      	beq.n	6444 <__ledf2+0x84>
    6404:	2b00      	cmp	r3, #0
    6406:	d00c      	beq.n	6422 <__ledf2+0x62>
    6408:	464b      	mov	r3, r9
    640a:	2001      	movs	r0, #1
    640c:	3b01      	subs	r3, #1
    640e:	4303      	orrs	r3, r0
    6410:	0018      	movs	r0, r3
    6412:	bc3c      	pop	{r2, r3, r4, r5}
    6414:	4690      	mov	r8, r2
    6416:	4699      	mov	r9, r3
    6418:	46a2      	mov	sl, r4
    641a:	46ab      	mov	fp, r5
    641c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    641e:	2c00      	cmp	r4, #0
    6420:	d016      	beq.n	6450 <__ledf2+0x90>
    6422:	45cb      	cmp	fp, r9
    6424:	d017      	beq.n	6456 <__ledf2+0x96>
    6426:	465b      	mov	r3, fp
    6428:	4259      	negs	r1, r3
    642a:	2301      	movs	r3, #1
    642c:	430b      	orrs	r3, r1
    642e:	e7ef      	b.n	6410 <__ledf2+0x50>
    6430:	0031      	movs	r1, r6
    6432:	2302      	movs	r3, #2
    6434:	4301      	orrs	r1, r0
    6436:	d1eb      	bne.n	6410 <__ledf2+0x50>
    6438:	e7d9      	b.n	63ee <__ledf2+0x2e>
    643a:	0039      	movs	r1, r7
    643c:	2302      	movs	r3, #2
    643e:	4311      	orrs	r1, r2
    6440:	d1e6      	bne.n	6410 <__ledf2+0x50>
    6442:	e7d7      	b.n	63f4 <__ledf2+0x34>
    6444:	433a      	orrs	r2, r7
    6446:	d1dd      	bne.n	6404 <__ledf2+0x44>
    6448:	2300      	movs	r3, #0
    644a:	2800      	cmp	r0, #0
    644c:	d0e0      	beq.n	6410 <__ledf2+0x50>
    644e:	e7ea      	b.n	6426 <__ledf2+0x66>
    6450:	433a      	orrs	r2, r7
    6452:	d1e6      	bne.n	6422 <__ledf2+0x62>
    6454:	e7e7      	b.n	6426 <__ledf2+0x66>
    6456:	42a5      	cmp	r5, r4
    6458:	dce5      	bgt.n	6426 <__ledf2+0x66>
    645a:	db05      	blt.n	6468 <__ledf2+0xa8>
    645c:	42be      	cmp	r6, r7
    645e:	d8e2      	bhi.n	6426 <__ledf2+0x66>
    6460:	d007      	beq.n	6472 <__ledf2+0xb2>
    6462:	2300      	movs	r3, #0
    6464:	42be      	cmp	r6, r7
    6466:	d2d3      	bcs.n	6410 <__ledf2+0x50>
    6468:	4659      	mov	r1, fp
    646a:	2301      	movs	r3, #1
    646c:	3901      	subs	r1, #1
    646e:	430b      	orrs	r3, r1
    6470:	e7ce      	b.n	6410 <__ledf2+0x50>
    6472:	45c4      	cmp	ip, r8
    6474:	d8d7      	bhi.n	6426 <__ledf2+0x66>
    6476:	2300      	movs	r3, #0
    6478:	45c4      	cmp	ip, r8
    647a:	d3f5      	bcc.n	6468 <__ledf2+0xa8>
    647c:	e7c8      	b.n	6410 <__ledf2+0x50>
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	000007ff 	.word	0x000007ff

00006484 <__libc_init_array>:
    6484:	b570      	push	{r4, r5, r6, lr}
    6486:	2600      	movs	r6, #0
    6488:	4d0c      	ldr	r5, [pc, #48]	; (64bc <__libc_init_array+0x38>)
    648a:	4c0d      	ldr	r4, [pc, #52]	; (64c0 <__libc_init_array+0x3c>)
    648c:	1b64      	subs	r4, r4, r5
    648e:	10a4      	asrs	r4, r4, #2
    6490:	42a6      	cmp	r6, r4
    6492:	d109      	bne.n	64a8 <__libc_init_array+0x24>
    6494:	2600      	movs	r6, #0
    6496:	f000 fdc9 	bl	702c <_init>
    649a:	4d0a      	ldr	r5, [pc, #40]	; (64c4 <__libc_init_array+0x40>)
    649c:	4c0a      	ldr	r4, [pc, #40]	; (64c8 <__libc_init_array+0x44>)
    649e:	1b64      	subs	r4, r4, r5
    64a0:	10a4      	asrs	r4, r4, #2
    64a2:	42a6      	cmp	r6, r4
    64a4:	d105      	bne.n	64b2 <__libc_init_array+0x2e>
    64a6:	bd70      	pop	{r4, r5, r6, pc}
    64a8:	00b3      	lsls	r3, r6, #2
    64aa:	58eb      	ldr	r3, [r5, r3]
    64ac:	4798      	blx	r3
    64ae:	3601      	adds	r6, #1
    64b0:	e7ee      	b.n	6490 <__libc_init_array+0xc>
    64b2:	00b3      	lsls	r3, r6, #2
    64b4:	58eb      	ldr	r3, [r5, r3]
    64b6:	4798      	blx	r3
    64b8:	3601      	adds	r6, #1
    64ba:	e7f2      	b.n	64a2 <__libc_init_array+0x1e>
    64bc:	00007038 	.word	0x00007038
    64c0:	00007038 	.word	0x00007038
    64c4:	00007038 	.word	0x00007038
    64c8:	0000703c 	.word	0x0000703c

000064cc <memcpy>:
    64cc:	2300      	movs	r3, #0
    64ce:	b510      	push	{r4, lr}
    64d0:	429a      	cmp	r2, r3
    64d2:	d100      	bne.n	64d6 <memcpy+0xa>
    64d4:	bd10      	pop	{r4, pc}
    64d6:	5ccc      	ldrb	r4, [r1, r3]
    64d8:	54c4      	strb	r4, [r0, r3]
    64da:	3301      	adds	r3, #1
    64dc:	e7f8      	b.n	64d0 <memcpy+0x4>

000064de <memset>:
    64de:	0003      	movs	r3, r0
    64e0:	1882      	adds	r2, r0, r2
    64e2:	4293      	cmp	r3, r2
    64e4:	d100      	bne.n	64e8 <memset+0xa>
    64e6:	4770      	bx	lr
    64e8:	7019      	strb	r1, [r3, #0]
    64ea:	3301      	adds	r3, #1
    64ec:	e7f9      	b.n	64e2 <memset+0x4>
	...

000064f0 <siprintf>:
    64f0:	b40e      	push	{r1, r2, r3}
    64f2:	b510      	push	{r4, lr}
    64f4:	b09d      	sub	sp, #116	; 0x74
    64f6:	a902      	add	r1, sp, #8
    64f8:	9002      	str	r0, [sp, #8]
    64fa:	6108      	str	r0, [r1, #16]
    64fc:	480b      	ldr	r0, [pc, #44]	; (652c <siprintf+0x3c>)
    64fe:	2482      	movs	r4, #130	; 0x82
    6500:	6088      	str	r0, [r1, #8]
    6502:	6148      	str	r0, [r1, #20]
    6504:	2001      	movs	r0, #1
    6506:	4240      	negs	r0, r0
    6508:	ab1f      	add	r3, sp, #124	; 0x7c
    650a:	81c8      	strh	r0, [r1, #14]
    650c:	4808      	ldr	r0, [pc, #32]	; (6530 <siprintf+0x40>)
    650e:	cb04      	ldmia	r3!, {r2}
    6510:	00a4      	lsls	r4, r4, #2
    6512:	6800      	ldr	r0, [r0, #0]
    6514:	9301      	str	r3, [sp, #4]
    6516:	818c      	strh	r4, [r1, #12]
    6518:	f000 f86e 	bl	65f8 <_svfiprintf_r>
    651c:	2300      	movs	r3, #0
    651e:	9a02      	ldr	r2, [sp, #8]
    6520:	7013      	strb	r3, [r2, #0]
    6522:	b01d      	add	sp, #116	; 0x74
    6524:	bc10      	pop	{r4}
    6526:	bc08      	pop	{r3}
    6528:	b003      	add	sp, #12
    652a:	4718      	bx	r3
    652c:	7fffffff 	.word	0x7fffffff
    6530:	20000110 	.word	0x20000110

00006534 <__ssputs_r>:
    6534:	b5f0      	push	{r4, r5, r6, r7, lr}
    6536:	688e      	ldr	r6, [r1, #8]
    6538:	b085      	sub	sp, #20
    653a:	0007      	movs	r7, r0
    653c:	000c      	movs	r4, r1
    653e:	9203      	str	r2, [sp, #12]
    6540:	9301      	str	r3, [sp, #4]
    6542:	429e      	cmp	r6, r3
    6544:	d839      	bhi.n	65ba <__ssputs_r+0x86>
    6546:	2390      	movs	r3, #144	; 0x90
    6548:	898a      	ldrh	r2, [r1, #12]
    654a:	00db      	lsls	r3, r3, #3
    654c:	421a      	tst	r2, r3
    654e:	d034      	beq.n	65ba <__ssputs_r+0x86>
    6550:	2503      	movs	r5, #3
    6552:	6909      	ldr	r1, [r1, #16]
    6554:	6823      	ldr	r3, [r4, #0]
    6556:	1a5b      	subs	r3, r3, r1
    6558:	9302      	str	r3, [sp, #8]
    655a:	6963      	ldr	r3, [r4, #20]
    655c:	9802      	ldr	r0, [sp, #8]
    655e:	435d      	muls	r5, r3
    6560:	0feb      	lsrs	r3, r5, #31
    6562:	195d      	adds	r5, r3, r5
    6564:	9b01      	ldr	r3, [sp, #4]
    6566:	106d      	asrs	r5, r5, #1
    6568:	3301      	adds	r3, #1
    656a:	181b      	adds	r3, r3, r0
    656c:	42ab      	cmp	r3, r5
    656e:	d900      	bls.n	6572 <__ssputs_r+0x3e>
    6570:	001d      	movs	r5, r3
    6572:	0553      	lsls	r3, r2, #21
    6574:	d532      	bpl.n	65dc <__ssputs_r+0xa8>
    6576:	0029      	movs	r1, r5
    6578:	0038      	movs	r0, r7
    657a:	f000 fb31 	bl	6be0 <_malloc_r>
    657e:	1e06      	subs	r6, r0, #0
    6580:	d109      	bne.n	6596 <__ssputs_r+0x62>
    6582:	230c      	movs	r3, #12
    6584:	603b      	str	r3, [r7, #0]
    6586:	2340      	movs	r3, #64	; 0x40
    6588:	2001      	movs	r0, #1
    658a:	89a2      	ldrh	r2, [r4, #12]
    658c:	4240      	negs	r0, r0
    658e:	4313      	orrs	r3, r2
    6590:	81a3      	strh	r3, [r4, #12]
    6592:	b005      	add	sp, #20
    6594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6596:	9a02      	ldr	r2, [sp, #8]
    6598:	6921      	ldr	r1, [r4, #16]
    659a:	f7ff ff97 	bl	64cc <memcpy>
    659e:	89a3      	ldrh	r3, [r4, #12]
    65a0:	4a14      	ldr	r2, [pc, #80]	; (65f4 <__ssputs_r+0xc0>)
    65a2:	401a      	ands	r2, r3
    65a4:	2380      	movs	r3, #128	; 0x80
    65a6:	4313      	orrs	r3, r2
    65a8:	81a3      	strh	r3, [r4, #12]
    65aa:	9b02      	ldr	r3, [sp, #8]
    65ac:	6126      	str	r6, [r4, #16]
    65ae:	18f6      	adds	r6, r6, r3
    65b0:	6026      	str	r6, [r4, #0]
    65b2:	6165      	str	r5, [r4, #20]
    65b4:	9e01      	ldr	r6, [sp, #4]
    65b6:	1aed      	subs	r5, r5, r3
    65b8:	60a5      	str	r5, [r4, #8]
    65ba:	9b01      	ldr	r3, [sp, #4]
    65bc:	42b3      	cmp	r3, r6
    65be:	d200      	bcs.n	65c2 <__ssputs_r+0x8e>
    65c0:	001e      	movs	r6, r3
    65c2:	0032      	movs	r2, r6
    65c4:	9903      	ldr	r1, [sp, #12]
    65c6:	6820      	ldr	r0, [r4, #0]
    65c8:	f000 faad 	bl	6b26 <memmove>
    65cc:	68a3      	ldr	r3, [r4, #8]
    65ce:	2000      	movs	r0, #0
    65d0:	1b9b      	subs	r3, r3, r6
    65d2:	60a3      	str	r3, [r4, #8]
    65d4:	6823      	ldr	r3, [r4, #0]
    65d6:	199e      	adds	r6, r3, r6
    65d8:	6026      	str	r6, [r4, #0]
    65da:	e7da      	b.n	6592 <__ssputs_r+0x5e>
    65dc:	002a      	movs	r2, r5
    65de:	0038      	movs	r0, r7
    65e0:	f000 fb5c 	bl	6c9c <_realloc_r>
    65e4:	1e06      	subs	r6, r0, #0
    65e6:	d1e0      	bne.n	65aa <__ssputs_r+0x76>
    65e8:	6921      	ldr	r1, [r4, #16]
    65ea:	0038      	movs	r0, r7
    65ec:	f000 faae 	bl	6b4c <_free_r>
    65f0:	e7c7      	b.n	6582 <__ssputs_r+0x4e>
    65f2:	46c0      	nop			; (mov r8, r8)
    65f4:	fffffb7f 	.word	0xfffffb7f

000065f8 <_svfiprintf_r>:
    65f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    65fa:	b09f      	sub	sp, #124	; 0x7c
    65fc:	9002      	str	r0, [sp, #8]
    65fe:	9305      	str	r3, [sp, #20]
    6600:	898b      	ldrh	r3, [r1, #12]
    6602:	000f      	movs	r7, r1
    6604:	0016      	movs	r6, r2
    6606:	061b      	lsls	r3, r3, #24
    6608:	d511      	bpl.n	662e <_svfiprintf_r+0x36>
    660a:	690b      	ldr	r3, [r1, #16]
    660c:	2b00      	cmp	r3, #0
    660e:	d10e      	bne.n	662e <_svfiprintf_r+0x36>
    6610:	2140      	movs	r1, #64	; 0x40
    6612:	f000 fae5 	bl	6be0 <_malloc_r>
    6616:	6038      	str	r0, [r7, #0]
    6618:	6138      	str	r0, [r7, #16]
    661a:	2800      	cmp	r0, #0
    661c:	d105      	bne.n	662a <_svfiprintf_r+0x32>
    661e:	230c      	movs	r3, #12
    6620:	9a02      	ldr	r2, [sp, #8]
    6622:	3801      	subs	r0, #1
    6624:	6013      	str	r3, [r2, #0]
    6626:	b01f      	add	sp, #124	; 0x7c
    6628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    662a:	2340      	movs	r3, #64	; 0x40
    662c:	617b      	str	r3, [r7, #20]
    662e:	2300      	movs	r3, #0
    6630:	ad06      	add	r5, sp, #24
    6632:	616b      	str	r3, [r5, #20]
    6634:	3320      	adds	r3, #32
    6636:	766b      	strb	r3, [r5, #25]
    6638:	3310      	adds	r3, #16
    663a:	76ab      	strb	r3, [r5, #26]
    663c:	0034      	movs	r4, r6
    663e:	7823      	ldrb	r3, [r4, #0]
    6640:	2b00      	cmp	r3, #0
    6642:	d147      	bne.n	66d4 <_svfiprintf_r+0xdc>
    6644:	1ba3      	subs	r3, r4, r6
    6646:	9304      	str	r3, [sp, #16]
    6648:	d00d      	beq.n	6666 <_svfiprintf_r+0x6e>
    664a:	1ba3      	subs	r3, r4, r6
    664c:	0032      	movs	r2, r6
    664e:	0039      	movs	r1, r7
    6650:	9802      	ldr	r0, [sp, #8]
    6652:	f7ff ff6f 	bl	6534 <__ssputs_r>
    6656:	1c43      	adds	r3, r0, #1
    6658:	d100      	bne.n	665c <_svfiprintf_r+0x64>
    665a:	e0b5      	b.n	67c8 <_svfiprintf_r+0x1d0>
    665c:	696a      	ldr	r2, [r5, #20]
    665e:	9b04      	ldr	r3, [sp, #16]
    6660:	4694      	mov	ip, r2
    6662:	4463      	add	r3, ip
    6664:	616b      	str	r3, [r5, #20]
    6666:	7823      	ldrb	r3, [r4, #0]
    6668:	2b00      	cmp	r3, #0
    666a:	d100      	bne.n	666e <_svfiprintf_r+0x76>
    666c:	e0ac      	b.n	67c8 <_svfiprintf_r+0x1d0>
    666e:	2201      	movs	r2, #1
    6670:	2300      	movs	r3, #0
    6672:	4252      	negs	r2, r2
    6674:	606a      	str	r2, [r5, #4]
    6676:	a902      	add	r1, sp, #8
    6678:	3254      	adds	r2, #84	; 0x54
    667a:	1852      	adds	r2, r2, r1
    667c:	3401      	adds	r4, #1
    667e:	602b      	str	r3, [r5, #0]
    6680:	60eb      	str	r3, [r5, #12]
    6682:	60ab      	str	r3, [r5, #8]
    6684:	7013      	strb	r3, [r2, #0]
    6686:	65ab      	str	r3, [r5, #88]	; 0x58
    6688:	4e58      	ldr	r6, [pc, #352]	; (67ec <_svfiprintf_r+0x1f4>)
    668a:	2205      	movs	r2, #5
    668c:	7821      	ldrb	r1, [r4, #0]
    668e:	0030      	movs	r0, r6
    6690:	f000 fa3e 	bl	6b10 <memchr>
    6694:	1c62      	adds	r2, r4, #1
    6696:	2800      	cmp	r0, #0
    6698:	d120      	bne.n	66dc <_svfiprintf_r+0xe4>
    669a:	6829      	ldr	r1, [r5, #0]
    669c:	06cb      	lsls	r3, r1, #27
    669e:	d504      	bpl.n	66aa <_svfiprintf_r+0xb2>
    66a0:	2353      	movs	r3, #83	; 0x53
    66a2:	ae02      	add	r6, sp, #8
    66a4:	3020      	adds	r0, #32
    66a6:	199b      	adds	r3, r3, r6
    66a8:	7018      	strb	r0, [r3, #0]
    66aa:	070b      	lsls	r3, r1, #28
    66ac:	d504      	bpl.n	66b8 <_svfiprintf_r+0xc0>
    66ae:	2353      	movs	r3, #83	; 0x53
    66b0:	202b      	movs	r0, #43	; 0x2b
    66b2:	ae02      	add	r6, sp, #8
    66b4:	199b      	adds	r3, r3, r6
    66b6:	7018      	strb	r0, [r3, #0]
    66b8:	7823      	ldrb	r3, [r4, #0]
    66ba:	2b2a      	cmp	r3, #42	; 0x2a
    66bc:	d016      	beq.n	66ec <_svfiprintf_r+0xf4>
    66be:	2000      	movs	r0, #0
    66c0:	210a      	movs	r1, #10
    66c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    66c4:	7822      	ldrb	r2, [r4, #0]
    66c6:	3a30      	subs	r2, #48	; 0x30
    66c8:	2a09      	cmp	r2, #9
    66ca:	d955      	bls.n	6778 <_svfiprintf_r+0x180>
    66cc:	2800      	cmp	r0, #0
    66ce:	d015      	beq.n	66fc <_svfiprintf_r+0x104>
    66d0:	9309      	str	r3, [sp, #36]	; 0x24
    66d2:	e013      	b.n	66fc <_svfiprintf_r+0x104>
    66d4:	2b25      	cmp	r3, #37	; 0x25
    66d6:	d0b5      	beq.n	6644 <_svfiprintf_r+0x4c>
    66d8:	3401      	adds	r4, #1
    66da:	e7b0      	b.n	663e <_svfiprintf_r+0x46>
    66dc:	2301      	movs	r3, #1
    66de:	1b80      	subs	r0, r0, r6
    66e0:	4083      	lsls	r3, r0
    66e2:	6829      	ldr	r1, [r5, #0]
    66e4:	0014      	movs	r4, r2
    66e6:	430b      	orrs	r3, r1
    66e8:	602b      	str	r3, [r5, #0]
    66ea:	e7cd      	b.n	6688 <_svfiprintf_r+0x90>
    66ec:	9b05      	ldr	r3, [sp, #20]
    66ee:	1d18      	adds	r0, r3, #4
    66f0:	681b      	ldr	r3, [r3, #0]
    66f2:	9005      	str	r0, [sp, #20]
    66f4:	2b00      	cmp	r3, #0
    66f6:	db39      	blt.n	676c <_svfiprintf_r+0x174>
    66f8:	9309      	str	r3, [sp, #36]	; 0x24
    66fa:	0014      	movs	r4, r2
    66fc:	7823      	ldrb	r3, [r4, #0]
    66fe:	2b2e      	cmp	r3, #46	; 0x2e
    6700:	d10b      	bne.n	671a <_svfiprintf_r+0x122>
    6702:	7863      	ldrb	r3, [r4, #1]
    6704:	1c62      	adds	r2, r4, #1
    6706:	2b2a      	cmp	r3, #42	; 0x2a
    6708:	d13e      	bne.n	6788 <_svfiprintf_r+0x190>
    670a:	9b05      	ldr	r3, [sp, #20]
    670c:	3402      	adds	r4, #2
    670e:	1d1a      	adds	r2, r3, #4
    6710:	681b      	ldr	r3, [r3, #0]
    6712:	9205      	str	r2, [sp, #20]
    6714:	2b00      	cmp	r3, #0
    6716:	db34      	blt.n	6782 <_svfiprintf_r+0x18a>
    6718:	9307      	str	r3, [sp, #28]
    671a:	4e35      	ldr	r6, [pc, #212]	; (67f0 <_svfiprintf_r+0x1f8>)
    671c:	7821      	ldrb	r1, [r4, #0]
    671e:	2203      	movs	r2, #3
    6720:	0030      	movs	r0, r6
    6722:	f000 f9f5 	bl	6b10 <memchr>
    6726:	2800      	cmp	r0, #0
    6728:	d006      	beq.n	6738 <_svfiprintf_r+0x140>
    672a:	2340      	movs	r3, #64	; 0x40
    672c:	1b80      	subs	r0, r0, r6
    672e:	4083      	lsls	r3, r0
    6730:	682a      	ldr	r2, [r5, #0]
    6732:	3401      	adds	r4, #1
    6734:	4313      	orrs	r3, r2
    6736:	602b      	str	r3, [r5, #0]
    6738:	7821      	ldrb	r1, [r4, #0]
    673a:	2206      	movs	r2, #6
    673c:	482d      	ldr	r0, [pc, #180]	; (67f4 <_svfiprintf_r+0x1fc>)
    673e:	1c66      	adds	r6, r4, #1
    6740:	7629      	strb	r1, [r5, #24]
    6742:	f000 f9e5 	bl	6b10 <memchr>
    6746:	2800      	cmp	r0, #0
    6748:	d046      	beq.n	67d8 <_svfiprintf_r+0x1e0>
    674a:	4b2b      	ldr	r3, [pc, #172]	; (67f8 <_svfiprintf_r+0x200>)
    674c:	2b00      	cmp	r3, #0
    674e:	d12f      	bne.n	67b0 <_svfiprintf_r+0x1b8>
    6750:	6829      	ldr	r1, [r5, #0]
    6752:	9b05      	ldr	r3, [sp, #20]
    6754:	2207      	movs	r2, #7
    6756:	05c9      	lsls	r1, r1, #23
    6758:	d528      	bpl.n	67ac <_svfiprintf_r+0x1b4>
    675a:	189b      	adds	r3, r3, r2
    675c:	4393      	bics	r3, r2
    675e:	3308      	adds	r3, #8
    6760:	9305      	str	r3, [sp, #20]
    6762:	696b      	ldr	r3, [r5, #20]
    6764:	9a03      	ldr	r2, [sp, #12]
    6766:	189b      	adds	r3, r3, r2
    6768:	616b      	str	r3, [r5, #20]
    676a:	e767      	b.n	663c <_svfiprintf_r+0x44>
    676c:	425b      	negs	r3, r3
    676e:	60eb      	str	r3, [r5, #12]
    6770:	2302      	movs	r3, #2
    6772:	430b      	orrs	r3, r1
    6774:	602b      	str	r3, [r5, #0]
    6776:	e7c0      	b.n	66fa <_svfiprintf_r+0x102>
    6778:	434b      	muls	r3, r1
    677a:	3401      	adds	r4, #1
    677c:	189b      	adds	r3, r3, r2
    677e:	2001      	movs	r0, #1
    6780:	e7a0      	b.n	66c4 <_svfiprintf_r+0xcc>
    6782:	2301      	movs	r3, #1
    6784:	425b      	negs	r3, r3
    6786:	e7c7      	b.n	6718 <_svfiprintf_r+0x120>
    6788:	2300      	movs	r3, #0
    678a:	0014      	movs	r4, r2
    678c:	200a      	movs	r0, #10
    678e:	001a      	movs	r2, r3
    6790:	606b      	str	r3, [r5, #4]
    6792:	7821      	ldrb	r1, [r4, #0]
    6794:	3930      	subs	r1, #48	; 0x30
    6796:	2909      	cmp	r1, #9
    6798:	d903      	bls.n	67a2 <_svfiprintf_r+0x1aa>
    679a:	2b00      	cmp	r3, #0
    679c:	d0bd      	beq.n	671a <_svfiprintf_r+0x122>
    679e:	9207      	str	r2, [sp, #28]
    67a0:	e7bb      	b.n	671a <_svfiprintf_r+0x122>
    67a2:	4342      	muls	r2, r0
    67a4:	3401      	adds	r4, #1
    67a6:	1852      	adds	r2, r2, r1
    67a8:	2301      	movs	r3, #1
    67aa:	e7f2      	b.n	6792 <_svfiprintf_r+0x19a>
    67ac:	3307      	adds	r3, #7
    67ae:	e7d5      	b.n	675c <_svfiprintf_r+0x164>
    67b0:	ab05      	add	r3, sp, #20
    67b2:	9300      	str	r3, [sp, #0]
    67b4:	003a      	movs	r2, r7
    67b6:	4b11      	ldr	r3, [pc, #68]	; (67fc <_svfiprintf_r+0x204>)
    67b8:	0029      	movs	r1, r5
    67ba:	9802      	ldr	r0, [sp, #8]
    67bc:	e000      	b.n	67c0 <_svfiprintf_r+0x1c8>
    67be:	bf00      	nop
    67c0:	9003      	str	r0, [sp, #12]
    67c2:	9b03      	ldr	r3, [sp, #12]
    67c4:	3301      	adds	r3, #1
    67c6:	d1cc      	bne.n	6762 <_svfiprintf_r+0x16a>
    67c8:	89bb      	ldrh	r3, [r7, #12]
    67ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    67cc:	065b      	lsls	r3, r3, #25
    67ce:	d400      	bmi.n	67d2 <_svfiprintf_r+0x1da>
    67d0:	e729      	b.n	6626 <_svfiprintf_r+0x2e>
    67d2:	2001      	movs	r0, #1
    67d4:	4240      	negs	r0, r0
    67d6:	e726      	b.n	6626 <_svfiprintf_r+0x2e>
    67d8:	ab05      	add	r3, sp, #20
    67da:	9300      	str	r3, [sp, #0]
    67dc:	003a      	movs	r2, r7
    67de:	4b07      	ldr	r3, [pc, #28]	; (67fc <_svfiprintf_r+0x204>)
    67e0:	0029      	movs	r1, r5
    67e2:	9802      	ldr	r0, [sp, #8]
    67e4:	f000 f87a 	bl	68dc <_printf_i>
    67e8:	e7ea      	b.n	67c0 <_svfiprintf_r+0x1c8>
    67ea:	46c0      	nop			; (mov r8, r8)
    67ec:	00006ff8 	.word	0x00006ff8
    67f0:	00006ffe 	.word	0x00006ffe
    67f4:	00007002 	.word	0x00007002
    67f8:	00000000 	.word	0x00000000
    67fc:	00006535 	.word	0x00006535

00006800 <_printf_common>:
    6800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6802:	0015      	movs	r5, r2
    6804:	9301      	str	r3, [sp, #4]
    6806:	688a      	ldr	r2, [r1, #8]
    6808:	690b      	ldr	r3, [r1, #16]
    680a:	9000      	str	r0, [sp, #0]
    680c:	000c      	movs	r4, r1
    680e:	4293      	cmp	r3, r2
    6810:	da00      	bge.n	6814 <_printf_common+0x14>
    6812:	0013      	movs	r3, r2
    6814:	0022      	movs	r2, r4
    6816:	602b      	str	r3, [r5, #0]
    6818:	3243      	adds	r2, #67	; 0x43
    681a:	7812      	ldrb	r2, [r2, #0]
    681c:	2a00      	cmp	r2, #0
    681e:	d001      	beq.n	6824 <_printf_common+0x24>
    6820:	3301      	adds	r3, #1
    6822:	602b      	str	r3, [r5, #0]
    6824:	6823      	ldr	r3, [r4, #0]
    6826:	069b      	lsls	r3, r3, #26
    6828:	d502      	bpl.n	6830 <_printf_common+0x30>
    682a:	682b      	ldr	r3, [r5, #0]
    682c:	3302      	adds	r3, #2
    682e:	602b      	str	r3, [r5, #0]
    6830:	2706      	movs	r7, #6
    6832:	6823      	ldr	r3, [r4, #0]
    6834:	401f      	ands	r7, r3
    6836:	d027      	beq.n	6888 <_printf_common+0x88>
    6838:	0023      	movs	r3, r4
    683a:	3343      	adds	r3, #67	; 0x43
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	1e5a      	subs	r2, r3, #1
    6840:	4193      	sbcs	r3, r2
    6842:	6822      	ldr	r2, [r4, #0]
    6844:	0692      	lsls	r2, r2, #26
    6846:	d430      	bmi.n	68aa <_printf_common+0xaa>
    6848:	0022      	movs	r2, r4
    684a:	9901      	ldr	r1, [sp, #4]
    684c:	3243      	adds	r2, #67	; 0x43
    684e:	9800      	ldr	r0, [sp, #0]
    6850:	9e08      	ldr	r6, [sp, #32]
    6852:	47b0      	blx	r6
    6854:	1c43      	adds	r3, r0, #1
    6856:	d025      	beq.n	68a4 <_printf_common+0xa4>
    6858:	2306      	movs	r3, #6
    685a:	6820      	ldr	r0, [r4, #0]
    685c:	682a      	ldr	r2, [r5, #0]
    685e:	68e1      	ldr	r1, [r4, #12]
    6860:	4003      	ands	r3, r0
    6862:	2500      	movs	r5, #0
    6864:	2b04      	cmp	r3, #4
    6866:	d103      	bne.n	6870 <_printf_common+0x70>
    6868:	1a8d      	subs	r5, r1, r2
    686a:	43eb      	mvns	r3, r5
    686c:	17db      	asrs	r3, r3, #31
    686e:	401d      	ands	r5, r3
    6870:	68a3      	ldr	r3, [r4, #8]
    6872:	6922      	ldr	r2, [r4, #16]
    6874:	4293      	cmp	r3, r2
    6876:	dd01      	ble.n	687c <_printf_common+0x7c>
    6878:	1a9b      	subs	r3, r3, r2
    687a:	18ed      	adds	r5, r5, r3
    687c:	2700      	movs	r7, #0
    687e:	42bd      	cmp	r5, r7
    6880:	d120      	bne.n	68c4 <_printf_common+0xc4>
    6882:	2000      	movs	r0, #0
    6884:	e010      	b.n	68a8 <_printf_common+0xa8>
    6886:	3701      	adds	r7, #1
    6888:	68e3      	ldr	r3, [r4, #12]
    688a:	682a      	ldr	r2, [r5, #0]
    688c:	1a9b      	subs	r3, r3, r2
    688e:	429f      	cmp	r7, r3
    6890:	dad2      	bge.n	6838 <_printf_common+0x38>
    6892:	0022      	movs	r2, r4
    6894:	2301      	movs	r3, #1
    6896:	3219      	adds	r2, #25
    6898:	9901      	ldr	r1, [sp, #4]
    689a:	9800      	ldr	r0, [sp, #0]
    689c:	9e08      	ldr	r6, [sp, #32]
    689e:	47b0      	blx	r6
    68a0:	1c43      	adds	r3, r0, #1
    68a2:	d1f0      	bne.n	6886 <_printf_common+0x86>
    68a4:	2001      	movs	r0, #1
    68a6:	4240      	negs	r0, r0
    68a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    68aa:	2030      	movs	r0, #48	; 0x30
    68ac:	18e1      	adds	r1, r4, r3
    68ae:	3143      	adds	r1, #67	; 0x43
    68b0:	7008      	strb	r0, [r1, #0]
    68b2:	0021      	movs	r1, r4
    68b4:	1c5a      	adds	r2, r3, #1
    68b6:	3145      	adds	r1, #69	; 0x45
    68b8:	7809      	ldrb	r1, [r1, #0]
    68ba:	18a2      	adds	r2, r4, r2
    68bc:	3243      	adds	r2, #67	; 0x43
    68be:	3302      	adds	r3, #2
    68c0:	7011      	strb	r1, [r2, #0]
    68c2:	e7c1      	b.n	6848 <_printf_common+0x48>
    68c4:	0022      	movs	r2, r4
    68c6:	2301      	movs	r3, #1
    68c8:	321a      	adds	r2, #26
    68ca:	9901      	ldr	r1, [sp, #4]
    68cc:	9800      	ldr	r0, [sp, #0]
    68ce:	9e08      	ldr	r6, [sp, #32]
    68d0:	47b0      	blx	r6
    68d2:	1c43      	adds	r3, r0, #1
    68d4:	d0e6      	beq.n	68a4 <_printf_common+0xa4>
    68d6:	3701      	adds	r7, #1
    68d8:	e7d1      	b.n	687e <_printf_common+0x7e>
	...

000068dc <_printf_i>:
    68dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68de:	b08b      	sub	sp, #44	; 0x2c
    68e0:	9206      	str	r2, [sp, #24]
    68e2:	000a      	movs	r2, r1
    68e4:	3243      	adds	r2, #67	; 0x43
    68e6:	9307      	str	r3, [sp, #28]
    68e8:	9005      	str	r0, [sp, #20]
    68ea:	9204      	str	r2, [sp, #16]
    68ec:	7e0a      	ldrb	r2, [r1, #24]
    68ee:	000c      	movs	r4, r1
    68f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    68f2:	2a6e      	cmp	r2, #110	; 0x6e
    68f4:	d100      	bne.n	68f8 <_printf_i+0x1c>
    68f6:	e08f      	b.n	6a18 <_printf_i+0x13c>
    68f8:	d817      	bhi.n	692a <_printf_i+0x4e>
    68fa:	2a63      	cmp	r2, #99	; 0x63
    68fc:	d02c      	beq.n	6958 <_printf_i+0x7c>
    68fe:	d808      	bhi.n	6912 <_printf_i+0x36>
    6900:	2a00      	cmp	r2, #0
    6902:	d100      	bne.n	6906 <_printf_i+0x2a>
    6904:	e099      	b.n	6a3a <_printf_i+0x15e>
    6906:	2a58      	cmp	r2, #88	; 0x58
    6908:	d054      	beq.n	69b4 <_printf_i+0xd8>
    690a:	0026      	movs	r6, r4
    690c:	3642      	adds	r6, #66	; 0x42
    690e:	7032      	strb	r2, [r6, #0]
    6910:	e029      	b.n	6966 <_printf_i+0x8a>
    6912:	2a64      	cmp	r2, #100	; 0x64
    6914:	d001      	beq.n	691a <_printf_i+0x3e>
    6916:	2a69      	cmp	r2, #105	; 0x69
    6918:	d1f7      	bne.n	690a <_printf_i+0x2e>
    691a:	6821      	ldr	r1, [r4, #0]
    691c:	681a      	ldr	r2, [r3, #0]
    691e:	0608      	lsls	r0, r1, #24
    6920:	d523      	bpl.n	696a <_printf_i+0x8e>
    6922:	1d11      	adds	r1, r2, #4
    6924:	6019      	str	r1, [r3, #0]
    6926:	6815      	ldr	r5, [r2, #0]
    6928:	e025      	b.n	6976 <_printf_i+0x9a>
    692a:	2a73      	cmp	r2, #115	; 0x73
    692c:	d100      	bne.n	6930 <_printf_i+0x54>
    692e:	e088      	b.n	6a42 <_printf_i+0x166>
    6930:	d808      	bhi.n	6944 <_printf_i+0x68>
    6932:	2a6f      	cmp	r2, #111	; 0x6f
    6934:	d029      	beq.n	698a <_printf_i+0xae>
    6936:	2a70      	cmp	r2, #112	; 0x70
    6938:	d1e7      	bne.n	690a <_printf_i+0x2e>
    693a:	2220      	movs	r2, #32
    693c:	6809      	ldr	r1, [r1, #0]
    693e:	430a      	orrs	r2, r1
    6940:	6022      	str	r2, [r4, #0]
    6942:	e003      	b.n	694c <_printf_i+0x70>
    6944:	2a75      	cmp	r2, #117	; 0x75
    6946:	d020      	beq.n	698a <_printf_i+0xae>
    6948:	2a78      	cmp	r2, #120	; 0x78
    694a:	d1de      	bne.n	690a <_printf_i+0x2e>
    694c:	0022      	movs	r2, r4
    694e:	2178      	movs	r1, #120	; 0x78
    6950:	3245      	adds	r2, #69	; 0x45
    6952:	7011      	strb	r1, [r2, #0]
    6954:	4a6c      	ldr	r2, [pc, #432]	; (6b08 <_printf_i+0x22c>)
    6956:	e030      	b.n	69ba <_printf_i+0xde>
    6958:	000e      	movs	r6, r1
    695a:	681a      	ldr	r2, [r3, #0]
    695c:	3642      	adds	r6, #66	; 0x42
    695e:	1d11      	adds	r1, r2, #4
    6960:	6019      	str	r1, [r3, #0]
    6962:	6813      	ldr	r3, [r2, #0]
    6964:	7033      	strb	r3, [r6, #0]
    6966:	2301      	movs	r3, #1
    6968:	e079      	b.n	6a5e <_printf_i+0x182>
    696a:	0649      	lsls	r1, r1, #25
    696c:	d5d9      	bpl.n	6922 <_printf_i+0x46>
    696e:	1d11      	adds	r1, r2, #4
    6970:	6019      	str	r1, [r3, #0]
    6972:	2300      	movs	r3, #0
    6974:	5ed5      	ldrsh	r5, [r2, r3]
    6976:	2d00      	cmp	r5, #0
    6978:	da03      	bge.n	6982 <_printf_i+0xa6>
    697a:	232d      	movs	r3, #45	; 0x2d
    697c:	9a04      	ldr	r2, [sp, #16]
    697e:	426d      	negs	r5, r5
    6980:	7013      	strb	r3, [r2, #0]
    6982:	4b62      	ldr	r3, [pc, #392]	; (6b0c <_printf_i+0x230>)
    6984:	270a      	movs	r7, #10
    6986:	9303      	str	r3, [sp, #12]
    6988:	e02f      	b.n	69ea <_printf_i+0x10e>
    698a:	6820      	ldr	r0, [r4, #0]
    698c:	6819      	ldr	r1, [r3, #0]
    698e:	0605      	lsls	r5, r0, #24
    6990:	d503      	bpl.n	699a <_printf_i+0xbe>
    6992:	1d08      	adds	r0, r1, #4
    6994:	6018      	str	r0, [r3, #0]
    6996:	680d      	ldr	r5, [r1, #0]
    6998:	e005      	b.n	69a6 <_printf_i+0xca>
    699a:	0640      	lsls	r0, r0, #25
    699c:	d5f9      	bpl.n	6992 <_printf_i+0xb6>
    699e:	680d      	ldr	r5, [r1, #0]
    69a0:	1d08      	adds	r0, r1, #4
    69a2:	6018      	str	r0, [r3, #0]
    69a4:	b2ad      	uxth	r5, r5
    69a6:	4b59      	ldr	r3, [pc, #356]	; (6b0c <_printf_i+0x230>)
    69a8:	2708      	movs	r7, #8
    69aa:	9303      	str	r3, [sp, #12]
    69ac:	2a6f      	cmp	r2, #111	; 0x6f
    69ae:	d018      	beq.n	69e2 <_printf_i+0x106>
    69b0:	270a      	movs	r7, #10
    69b2:	e016      	b.n	69e2 <_printf_i+0x106>
    69b4:	3145      	adds	r1, #69	; 0x45
    69b6:	700a      	strb	r2, [r1, #0]
    69b8:	4a54      	ldr	r2, [pc, #336]	; (6b0c <_printf_i+0x230>)
    69ba:	9203      	str	r2, [sp, #12]
    69bc:	681a      	ldr	r2, [r3, #0]
    69be:	6821      	ldr	r1, [r4, #0]
    69c0:	1d10      	adds	r0, r2, #4
    69c2:	6018      	str	r0, [r3, #0]
    69c4:	6815      	ldr	r5, [r2, #0]
    69c6:	0608      	lsls	r0, r1, #24
    69c8:	d522      	bpl.n	6a10 <_printf_i+0x134>
    69ca:	07cb      	lsls	r3, r1, #31
    69cc:	d502      	bpl.n	69d4 <_printf_i+0xf8>
    69ce:	2320      	movs	r3, #32
    69d0:	4319      	orrs	r1, r3
    69d2:	6021      	str	r1, [r4, #0]
    69d4:	2710      	movs	r7, #16
    69d6:	2d00      	cmp	r5, #0
    69d8:	d103      	bne.n	69e2 <_printf_i+0x106>
    69da:	2320      	movs	r3, #32
    69dc:	6822      	ldr	r2, [r4, #0]
    69de:	439a      	bics	r2, r3
    69e0:	6022      	str	r2, [r4, #0]
    69e2:	0023      	movs	r3, r4
    69e4:	2200      	movs	r2, #0
    69e6:	3343      	adds	r3, #67	; 0x43
    69e8:	701a      	strb	r2, [r3, #0]
    69ea:	6863      	ldr	r3, [r4, #4]
    69ec:	60a3      	str	r3, [r4, #8]
    69ee:	2b00      	cmp	r3, #0
    69f0:	db5c      	blt.n	6aac <_printf_i+0x1d0>
    69f2:	2204      	movs	r2, #4
    69f4:	6821      	ldr	r1, [r4, #0]
    69f6:	4391      	bics	r1, r2
    69f8:	6021      	str	r1, [r4, #0]
    69fa:	2d00      	cmp	r5, #0
    69fc:	d158      	bne.n	6ab0 <_printf_i+0x1d4>
    69fe:	9e04      	ldr	r6, [sp, #16]
    6a00:	2b00      	cmp	r3, #0
    6a02:	d064      	beq.n	6ace <_printf_i+0x1f2>
    6a04:	0026      	movs	r6, r4
    6a06:	9b03      	ldr	r3, [sp, #12]
    6a08:	3642      	adds	r6, #66	; 0x42
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	7033      	strb	r3, [r6, #0]
    6a0e:	e05e      	b.n	6ace <_printf_i+0x1f2>
    6a10:	0648      	lsls	r0, r1, #25
    6a12:	d5da      	bpl.n	69ca <_printf_i+0xee>
    6a14:	b2ad      	uxth	r5, r5
    6a16:	e7d8      	b.n	69ca <_printf_i+0xee>
    6a18:	6809      	ldr	r1, [r1, #0]
    6a1a:	681a      	ldr	r2, [r3, #0]
    6a1c:	0608      	lsls	r0, r1, #24
    6a1e:	d505      	bpl.n	6a2c <_printf_i+0x150>
    6a20:	1d11      	adds	r1, r2, #4
    6a22:	6019      	str	r1, [r3, #0]
    6a24:	6813      	ldr	r3, [r2, #0]
    6a26:	6962      	ldr	r2, [r4, #20]
    6a28:	601a      	str	r2, [r3, #0]
    6a2a:	e006      	b.n	6a3a <_printf_i+0x15e>
    6a2c:	0649      	lsls	r1, r1, #25
    6a2e:	d5f7      	bpl.n	6a20 <_printf_i+0x144>
    6a30:	1d11      	adds	r1, r2, #4
    6a32:	6019      	str	r1, [r3, #0]
    6a34:	6813      	ldr	r3, [r2, #0]
    6a36:	8aa2      	ldrh	r2, [r4, #20]
    6a38:	801a      	strh	r2, [r3, #0]
    6a3a:	2300      	movs	r3, #0
    6a3c:	9e04      	ldr	r6, [sp, #16]
    6a3e:	6123      	str	r3, [r4, #16]
    6a40:	e054      	b.n	6aec <_printf_i+0x210>
    6a42:	681a      	ldr	r2, [r3, #0]
    6a44:	1d11      	adds	r1, r2, #4
    6a46:	6019      	str	r1, [r3, #0]
    6a48:	6816      	ldr	r6, [r2, #0]
    6a4a:	2100      	movs	r1, #0
    6a4c:	6862      	ldr	r2, [r4, #4]
    6a4e:	0030      	movs	r0, r6
    6a50:	f000 f85e 	bl	6b10 <memchr>
    6a54:	2800      	cmp	r0, #0
    6a56:	d001      	beq.n	6a5c <_printf_i+0x180>
    6a58:	1b80      	subs	r0, r0, r6
    6a5a:	6060      	str	r0, [r4, #4]
    6a5c:	6863      	ldr	r3, [r4, #4]
    6a5e:	6123      	str	r3, [r4, #16]
    6a60:	2300      	movs	r3, #0
    6a62:	9a04      	ldr	r2, [sp, #16]
    6a64:	7013      	strb	r3, [r2, #0]
    6a66:	e041      	b.n	6aec <_printf_i+0x210>
    6a68:	6923      	ldr	r3, [r4, #16]
    6a6a:	0032      	movs	r2, r6
    6a6c:	9906      	ldr	r1, [sp, #24]
    6a6e:	9805      	ldr	r0, [sp, #20]
    6a70:	9d07      	ldr	r5, [sp, #28]
    6a72:	47a8      	blx	r5
    6a74:	1c43      	adds	r3, r0, #1
    6a76:	d043      	beq.n	6b00 <_printf_i+0x224>
    6a78:	6823      	ldr	r3, [r4, #0]
    6a7a:	2500      	movs	r5, #0
    6a7c:	079b      	lsls	r3, r3, #30
    6a7e:	d40f      	bmi.n	6aa0 <_printf_i+0x1c4>
    6a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a82:	68e0      	ldr	r0, [r4, #12]
    6a84:	4298      	cmp	r0, r3
    6a86:	da3d      	bge.n	6b04 <_printf_i+0x228>
    6a88:	0018      	movs	r0, r3
    6a8a:	e03b      	b.n	6b04 <_printf_i+0x228>
    6a8c:	0022      	movs	r2, r4
    6a8e:	2301      	movs	r3, #1
    6a90:	3219      	adds	r2, #25
    6a92:	9906      	ldr	r1, [sp, #24]
    6a94:	9805      	ldr	r0, [sp, #20]
    6a96:	9e07      	ldr	r6, [sp, #28]
    6a98:	47b0      	blx	r6
    6a9a:	1c43      	adds	r3, r0, #1
    6a9c:	d030      	beq.n	6b00 <_printf_i+0x224>
    6a9e:	3501      	adds	r5, #1
    6aa0:	68e3      	ldr	r3, [r4, #12]
    6aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6aa4:	1a9b      	subs	r3, r3, r2
    6aa6:	429d      	cmp	r5, r3
    6aa8:	dbf0      	blt.n	6a8c <_printf_i+0x1b0>
    6aaa:	e7e9      	b.n	6a80 <_printf_i+0x1a4>
    6aac:	2d00      	cmp	r5, #0
    6aae:	d0a9      	beq.n	6a04 <_printf_i+0x128>
    6ab0:	9e04      	ldr	r6, [sp, #16]
    6ab2:	0028      	movs	r0, r5
    6ab4:	0039      	movs	r1, r7
    6ab6:	f7fe f91b 	bl	4cf0 <__aeabi_uidivmod>
    6aba:	9b03      	ldr	r3, [sp, #12]
    6abc:	3e01      	subs	r6, #1
    6abe:	5c5b      	ldrb	r3, [r3, r1]
    6ac0:	0028      	movs	r0, r5
    6ac2:	7033      	strb	r3, [r6, #0]
    6ac4:	0039      	movs	r1, r7
    6ac6:	f7fe f88d 	bl	4be4 <__udivsi3>
    6aca:	1e05      	subs	r5, r0, #0
    6acc:	d1f1      	bne.n	6ab2 <_printf_i+0x1d6>
    6ace:	2f08      	cmp	r7, #8
    6ad0:	d109      	bne.n	6ae6 <_printf_i+0x20a>
    6ad2:	6823      	ldr	r3, [r4, #0]
    6ad4:	07db      	lsls	r3, r3, #31
    6ad6:	d506      	bpl.n	6ae6 <_printf_i+0x20a>
    6ad8:	6863      	ldr	r3, [r4, #4]
    6ada:	6922      	ldr	r2, [r4, #16]
    6adc:	4293      	cmp	r3, r2
    6ade:	dc02      	bgt.n	6ae6 <_printf_i+0x20a>
    6ae0:	2330      	movs	r3, #48	; 0x30
    6ae2:	3e01      	subs	r6, #1
    6ae4:	7033      	strb	r3, [r6, #0]
    6ae6:	9b04      	ldr	r3, [sp, #16]
    6ae8:	1b9b      	subs	r3, r3, r6
    6aea:	6123      	str	r3, [r4, #16]
    6aec:	9b07      	ldr	r3, [sp, #28]
    6aee:	aa09      	add	r2, sp, #36	; 0x24
    6af0:	9300      	str	r3, [sp, #0]
    6af2:	0021      	movs	r1, r4
    6af4:	9b06      	ldr	r3, [sp, #24]
    6af6:	9805      	ldr	r0, [sp, #20]
    6af8:	f7ff fe82 	bl	6800 <_printf_common>
    6afc:	1c43      	adds	r3, r0, #1
    6afe:	d1b3      	bne.n	6a68 <_printf_i+0x18c>
    6b00:	2001      	movs	r0, #1
    6b02:	4240      	negs	r0, r0
    6b04:	b00b      	add	sp, #44	; 0x2c
    6b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b08:	0000701a 	.word	0x0000701a
    6b0c:	00007009 	.word	0x00007009

00006b10 <memchr>:
    6b10:	b2c9      	uxtb	r1, r1
    6b12:	1882      	adds	r2, r0, r2
    6b14:	4290      	cmp	r0, r2
    6b16:	d101      	bne.n	6b1c <memchr+0xc>
    6b18:	2000      	movs	r0, #0
    6b1a:	4770      	bx	lr
    6b1c:	7803      	ldrb	r3, [r0, #0]
    6b1e:	428b      	cmp	r3, r1
    6b20:	d0fb      	beq.n	6b1a <memchr+0xa>
    6b22:	3001      	adds	r0, #1
    6b24:	e7f6      	b.n	6b14 <memchr+0x4>

00006b26 <memmove>:
    6b26:	b510      	push	{r4, lr}
    6b28:	4288      	cmp	r0, r1
    6b2a:	d902      	bls.n	6b32 <memmove+0xc>
    6b2c:	188b      	adds	r3, r1, r2
    6b2e:	4298      	cmp	r0, r3
    6b30:	d308      	bcc.n	6b44 <memmove+0x1e>
    6b32:	2300      	movs	r3, #0
    6b34:	429a      	cmp	r2, r3
    6b36:	d007      	beq.n	6b48 <memmove+0x22>
    6b38:	5ccc      	ldrb	r4, [r1, r3]
    6b3a:	54c4      	strb	r4, [r0, r3]
    6b3c:	3301      	adds	r3, #1
    6b3e:	e7f9      	b.n	6b34 <memmove+0xe>
    6b40:	5c8b      	ldrb	r3, [r1, r2]
    6b42:	5483      	strb	r3, [r0, r2]
    6b44:	3a01      	subs	r2, #1
    6b46:	d2fb      	bcs.n	6b40 <memmove+0x1a>
    6b48:	bd10      	pop	{r4, pc}
	...

00006b4c <_free_r>:
    6b4c:	b570      	push	{r4, r5, r6, lr}
    6b4e:	0005      	movs	r5, r0
    6b50:	2900      	cmp	r1, #0
    6b52:	d010      	beq.n	6b76 <_free_r+0x2a>
    6b54:	1f0c      	subs	r4, r1, #4
    6b56:	6823      	ldr	r3, [r4, #0]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	da00      	bge.n	6b5e <_free_r+0x12>
    6b5c:	18e4      	adds	r4, r4, r3
    6b5e:	0028      	movs	r0, r5
    6b60:	f000 f8d4 	bl	6d0c <__malloc_lock>
    6b64:	4a1d      	ldr	r2, [pc, #116]	; (6bdc <_free_r+0x90>)
    6b66:	6813      	ldr	r3, [r2, #0]
    6b68:	2b00      	cmp	r3, #0
    6b6a:	d105      	bne.n	6b78 <_free_r+0x2c>
    6b6c:	6063      	str	r3, [r4, #4]
    6b6e:	6014      	str	r4, [r2, #0]
    6b70:	0028      	movs	r0, r5
    6b72:	f000 f8cc 	bl	6d0e <__malloc_unlock>
    6b76:	bd70      	pop	{r4, r5, r6, pc}
    6b78:	42a3      	cmp	r3, r4
    6b7a:	d909      	bls.n	6b90 <_free_r+0x44>
    6b7c:	6821      	ldr	r1, [r4, #0]
    6b7e:	1860      	adds	r0, r4, r1
    6b80:	4283      	cmp	r3, r0
    6b82:	d1f3      	bne.n	6b6c <_free_r+0x20>
    6b84:	6818      	ldr	r0, [r3, #0]
    6b86:	685b      	ldr	r3, [r3, #4]
    6b88:	1841      	adds	r1, r0, r1
    6b8a:	6021      	str	r1, [r4, #0]
    6b8c:	e7ee      	b.n	6b6c <_free_r+0x20>
    6b8e:	0013      	movs	r3, r2
    6b90:	685a      	ldr	r2, [r3, #4]
    6b92:	2a00      	cmp	r2, #0
    6b94:	d001      	beq.n	6b9a <_free_r+0x4e>
    6b96:	42a2      	cmp	r2, r4
    6b98:	d9f9      	bls.n	6b8e <_free_r+0x42>
    6b9a:	6819      	ldr	r1, [r3, #0]
    6b9c:	1858      	adds	r0, r3, r1
    6b9e:	42a0      	cmp	r0, r4
    6ba0:	d10b      	bne.n	6bba <_free_r+0x6e>
    6ba2:	6820      	ldr	r0, [r4, #0]
    6ba4:	1809      	adds	r1, r1, r0
    6ba6:	1858      	adds	r0, r3, r1
    6ba8:	6019      	str	r1, [r3, #0]
    6baa:	4282      	cmp	r2, r0
    6bac:	d1e0      	bne.n	6b70 <_free_r+0x24>
    6bae:	6810      	ldr	r0, [r2, #0]
    6bb0:	6852      	ldr	r2, [r2, #4]
    6bb2:	1841      	adds	r1, r0, r1
    6bb4:	6019      	str	r1, [r3, #0]
    6bb6:	605a      	str	r2, [r3, #4]
    6bb8:	e7da      	b.n	6b70 <_free_r+0x24>
    6bba:	42a0      	cmp	r0, r4
    6bbc:	d902      	bls.n	6bc4 <_free_r+0x78>
    6bbe:	230c      	movs	r3, #12
    6bc0:	602b      	str	r3, [r5, #0]
    6bc2:	e7d5      	b.n	6b70 <_free_r+0x24>
    6bc4:	6821      	ldr	r1, [r4, #0]
    6bc6:	1860      	adds	r0, r4, r1
    6bc8:	4282      	cmp	r2, r0
    6bca:	d103      	bne.n	6bd4 <_free_r+0x88>
    6bcc:	6810      	ldr	r0, [r2, #0]
    6bce:	6852      	ldr	r2, [r2, #4]
    6bd0:	1841      	adds	r1, r0, r1
    6bd2:	6021      	str	r1, [r4, #0]
    6bd4:	6062      	str	r2, [r4, #4]
    6bd6:	605c      	str	r4, [r3, #4]
    6bd8:	e7ca      	b.n	6b70 <_free_r+0x24>
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	20000408 	.word	0x20000408

00006be0 <_malloc_r>:
    6be0:	2303      	movs	r3, #3
    6be2:	b570      	push	{r4, r5, r6, lr}
    6be4:	1ccd      	adds	r5, r1, #3
    6be6:	439d      	bics	r5, r3
    6be8:	3508      	adds	r5, #8
    6bea:	0006      	movs	r6, r0
    6bec:	2d0c      	cmp	r5, #12
    6bee:	d21e      	bcs.n	6c2e <_malloc_r+0x4e>
    6bf0:	250c      	movs	r5, #12
    6bf2:	42a9      	cmp	r1, r5
    6bf4:	d81d      	bhi.n	6c32 <_malloc_r+0x52>
    6bf6:	0030      	movs	r0, r6
    6bf8:	f000 f888 	bl	6d0c <__malloc_lock>
    6bfc:	4a25      	ldr	r2, [pc, #148]	; (6c94 <_malloc_r+0xb4>)
    6bfe:	6814      	ldr	r4, [r2, #0]
    6c00:	0021      	movs	r1, r4
    6c02:	2900      	cmp	r1, #0
    6c04:	d119      	bne.n	6c3a <_malloc_r+0x5a>
    6c06:	4c24      	ldr	r4, [pc, #144]	; (6c98 <_malloc_r+0xb8>)
    6c08:	6823      	ldr	r3, [r4, #0]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d103      	bne.n	6c16 <_malloc_r+0x36>
    6c0e:	0030      	movs	r0, r6
    6c10:	f000 f86a 	bl	6ce8 <_sbrk_r>
    6c14:	6020      	str	r0, [r4, #0]
    6c16:	0029      	movs	r1, r5
    6c18:	0030      	movs	r0, r6
    6c1a:	f000 f865 	bl	6ce8 <_sbrk_r>
    6c1e:	1c43      	adds	r3, r0, #1
    6c20:	d12c      	bne.n	6c7c <_malloc_r+0x9c>
    6c22:	230c      	movs	r3, #12
    6c24:	0030      	movs	r0, r6
    6c26:	6033      	str	r3, [r6, #0]
    6c28:	f000 f871 	bl	6d0e <__malloc_unlock>
    6c2c:	e003      	b.n	6c36 <_malloc_r+0x56>
    6c2e:	2d00      	cmp	r5, #0
    6c30:	dadf      	bge.n	6bf2 <_malloc_r+0x12>
    6c32:	230c      	movs	r3, #12
    6c34:	6033      	str	r3, [r6, #0]
    6c36:	2000      	movs	r0, #0
    6c38:	bd70      	pop	{r4, r5, r6, pc}
    6c3a:	680b      	ldr	r3, [r1, #0]
    6c3c:	1b5b      	subs	r3, r3, r5
    6c3e:	d41a      	bmi.n	6c76 <_malloc_r+0x96>
    6c40:	2b0b      	cmp	r3, #11
    6c42:	d903      	bls.n	6c4c <_malloc_r+0x6c>
    6c44:	600b      	str	r3, [r1, #0]
    6c46:	18cc      	adds	r4, r1, r3
    6c48:	6025      	str	r5, [r4, #0]
    6c4a:	e003      	b.n	6c54 <_malloc_r+0x74>
    6c4c:	428c      	cmp	r4, r1
    6c4e:	d10e      	bne.n	6c6e <_malloc_r+0x8e>
    6c50:	6863      	ldr	r3, [r4, #4]
    6c52:	6013      	str	r3, [r2, #0]
    6c54:	0030      	movs	r0, r6
    6c56:	f000 f85a 	bl	6d0e <__malloc_unlock>
    6c5a:	0020      	movs	r0, r4
    6c5c:	2207      	movs	r2, #7
    6c5e:	300b      	adds	r0, #11
    6c60:	1d23      	adds	r3, r4, #4
    6c62:	4390      	bics	r0, r2
    6c64:	1ac3      	subs	r3, r0, r3
    6c66:	d0e7      	beq.n	6c38 <_malloc_r+0x58>
    6c68:	425a      	negs	r2, r3
    6c6a:	50e2      	str	r2, [r4, r3]
    6c6c:	e7e4      	b.n	6c38 <_malloc_r+0x58>
    6c6e:	684b      	ldr	r3, [r1, #4]
    6c70:	6063      	str	r3, [r4, #4]
    6c72:	000c      	movs	r4, r1
    6c74:	e7ee      	b.n	6c54 <_malloc_r+0x74>
    6c76:	000c      	movs	r4, r1
    6c78:	6849      	ldr	r1, [r1, #4]
    6c7a:	e7c2      	b.n	6c02 <_malloc_r+0x22>
    6c7c:	2303      	movs	r3, #3
    6c7e:	1cc4      	adds	r4, r0, #3
    6c80:	439c      	bics	r4, r3
    6c82:	42a0      	cmp	r0, r4
    6c84:	d0e0      	beq.n	6c48 <_malloc_r+0x68>
    6c86:	1a21      	subs	r1, r4, r0
    6c88:	0030      	movs	r0, r6
    6c8a:	f000 f82d 	bl	6ce8 <_sbrk_r>
    6c8e:	1c43      	adds	r3, r0, #1
    6c90:	d1da      	bne.n	6c48 <_malloc_r+0x68>
    6c92:	e7c6      	b.n	6c22 <_malloc_r+0x42>
    6c94:	20000408 	.word	0x20000408
    6c98:	2000040c 	.word	0x2000040c

00006c9c <_realloc_r>:
    6c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c9e:	0007      	movs	r7, r0
    6ca0:	000d      	movs	r5, r1
    6ca2:	0016      	movs	r6, r2
    6ca4:	2900      	cmp	r1, #0
    6ca6:	d105      	bne.n	6cb4 <_realloc_r+0x18>
    6ca8:	0011      	movs	r1, r2
    6caa:	f7ff ff99 	bl	6be0 <_malloc_r>
    6cae:	0004      	movs	r4, r0
    6cb0:	0020      	movs	r0, r4
    6cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cb4:	2a00      	cmp	r2, #0
    6cb6:	d103      	bne.n	6cc0 <_realloc_r+0x24>
    6cb8:	f7ff ff48 	bl	6b4c <_free_r>
    6cbc:	0034      	movs	r4, r6
    6cbe:	e7f7      	b.n	6cb0 <_realloc_r+0x14>
    6cc0:	f000 f826 	bl	6d10 <_malloc_usable_size_r>
    6cc4:	002c      	movs	r4, r5
    6cc6:	4286      	cmp	r6, r0
    6cc8:	d9f2      	bls.n	6cb0 <_realloc_r+0x14>
    6cca:	0031      	movs	r1, r6
    6ccc:	0038      	movs	r0, r7
    6cce:	f7ff ff87 	bl	6be0 <_malloc_r>
    6cd2:	1e04      	subs	r4, r0, #0
    6cd4:	d0ec      	beq.n	6cb0 <_realloc_r+0x14>
    6cd6:	0029      	movs	r1, r5
    6cd8:	0032      	movs	r2, r6
    6cda:	f7ff fbf7 	bl	64cc <memcpy>
    6cde:	0029      	movs	r1, r5
    6ce0:	0038      	movs	r0, r7
    6ce2:	f7ff ff33 	bl	6b4c <_free_r>
    6ce6:	e7e3      	b.n	6cb0 <_realloc_r+0x14>

00006ce8 <_sbrk_r>:
    6ce8:	2300      	movs	r3, #0
    6cea:	b570      	push	{r4, r5, r6, lr}
    6cec:	4c06      	ldr	r4, [pc, #24]	; (6d08 <_sbrk_r+0x20>)
    6cee:	0005      	movs	r5, r0
    6cf0:	0008      	movs	r0, r1
    6cf2:	6023      	str	r3, [r4, #0]
    6cf4:	f7fd fcb8 	bl	4668 <_sbrk>
    6cf8:	1c43      	adds	r3, r0, #1
    6cfa:	d103      	bne.n	6d04 <_sbrk_r+0x1c>
    6cfc:	6823      	ldr	r3, [r4, #0]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d000      	beq.n	6d04 <_sbrk_r+0x1c>
    6d02:	602b      	str	r3, [r5, #0]
    6d04:	bd70      	pop	{r4, r5, r6, pc}
    6d06:	46c0      	nop			; (mov r8, r8)
    6d08:	2000093c 	.word	0x2000093c

00006d0c <__malloc_lock>:
    6d0c:	4770      	bx	lr

00006d0e <__malloc_unlock>:
    6d0e:	4770      	bx	lr

00006d10 <_malloc_usable_size_r>:
    6d10:	1f0b      	subs	r3, r1, #4
    6d12:	681b      	ldr	r3, [r3, #0]
    6d14:	1f18      	subs	r0, r3, #4
    6d16:	2b00      	cmp	r3, #0
    6d18:	da01      	bge.n	6d1e <_malloc_usable_size_r+0xe>
    6d1a:	580b      	ldr	r3, [r1, r0]
    6d1c:	18c0      	adds	r0, r0, r3
    6d1e:	4770      	bx	lr
    6d20:	000001a0 	.word	0x000001a0
    6d24:	000001a4 	.word	0x000001a4
    6d28:	00000184 	.word	0x00000184
    6d2c:	000001a8 	.word	0x000001a8
    6d30:	00000188 	.word	0x00000188
    6d34:	0000018c 	.word	0x0000018c
    6d38:	00000190 	.word	0x00000190
    6d3c:	00000194 	.word	0x00000194
    6d40:	00000198 	.word	0x00000198
    6d44:	0000019c 	.word	0x0000019c
    6d48:	776f7247 	.word	0x776f7247
    6d4c:	20786f62 	.word	0x20786f62
    6d50:	302e3156 	.word	0x302e3156
    6d54:	0000000a 	.word	0x0000000a
    6d58:	706d6554 	.word	0x706d6554
    6d5c:	0000203a 	.word	0x0000203a
    6d60:	00006425 	.word	0x00006425
    6d64:	000a4320 	.word	0x000a4320
    6d68:	203a4852 	.word	0x203a4852
    6d6c:	00000000 	.word	0x00000000
    6d70:	000a2520 	.word	0x000a2520
    6d74:	000013c6 	.word	0x000013c6
    6d78:	00001324 	.word	0x00001324
    6d7c:	00001324 	.word	0x00001324
    6d80:	00001324 	.word	0x00001324
    6d84:	000013d0 	.word	0x000013d0
    6d88:	00001324 	.word	0x00001324
    6d8c:	00001324 	.word	0x00001324
    6d90:	00001324 	.word	0x00001324
    6d94:	00001324 	.word	0x00001324
    6d98:	00001324 	.word	0x00001324
    6d9c:	00001324 	.word	0x00001324
    6da0:	00001324 	.word	0x00001324
    6da4:	00001324 	.word	0x00001324
    6da8:	00001324 	.word	0x00001324
    6dac:	00001324 	.word	0x00001324
    6db0:	00001324 	.word	0x00001324
    6db4:	00001324 	.word	0x00001324
    6db8:	00001324 	.word	0x00001324
    6dbc:	00001324 	.word	0x00001324
    6dc0:	00001420 	.word	0x00001420
    6dc4:	00001324 	.word	0x00001324
    6dc8:	000013b2 	.word	0x000013b2
    6dcc:	00001324 	.word	0x00001324
    6dd0:	00001324 	.word	0x00001324
    6dd4:	0000133e 	.word	0x0000133e
    6dd8:	00001324 	.word	0x00001324
    6ddc:	00001324 	.word	0x00001324
    6de0:	00001324 	.word	0x00001324
    6de4:	00001314 	.word	0x00001314
    6de8:	00001324 	.word	0x00001324
    6dec:	00001324 	.word	0x00001324
    6df0:	00001324 	.word	0x00001324
    6df4:	00001324 	.word	0x00001324
    6df8:	00001324 	.word	0x00001324
    6dfc:	00001350 	.word	0x00001350
    6e00:	00001324 	.word	0x00001324
    6e04:	0000132c 	.word	0x0000132c
    6e08:	00001324 	.word	0x00001324
    6e0c:	00001324 	.word	0x00001324
    6e10:	0000137c 	.word	0x0000137c
    6e14:	00002068 	.word	0x00002068
    6e18:	00002068 	.word	0x00002068
    6e1c:	00002044 	.word	0x00002044
    6e20:	00002068 	.word	0x00002068
    6e24:	00002044 	.word	0x00002044
    6e28:	0000202a 	.word	0x0000202a
    6e2c:	0000202a 	.word	0x0000202a
    6e30:	00002068 	.word	0x00002068
    6e34:	00002068 	.word	0x00002068
    6e38:	00002068 	.word	0x00002068
    6e3c:	00002068 	.word	0x00002068
    6e40:	00002068 	.word	0x00002068
    6e44:	00002068 	.word	0x00002068
    6e48:	00002068 	.word	0x00002068
    6e4c:	00002068 	.word	0x00002068
    6e50:	00002068 	.word	0x00002068
    6e54:	00002068 	.word	0x00002068
    6e58:	00002068 	.word	0x00002068
    6e5c:	00002068 	.word	0x00002068
    6e60:	00002068 	.word	0x00002068
    6e64:	00002068 	.word	0x00002068
    6e68:	00002068 	.word	0x00002068
    6e6c:	00002068 	.word	0x00002068
    6e70:	00002068 	.word	0x00002068
    6e74:	00002068 	.word	0x00002068
    6e78:	00002068 	.word	0x00002068
    6e7c:	00002068 	.word	0x00002068
    6e80:	00002068 	.word	0x00002068
    6e84:	00002068 	.word	0x00002068
    6e88:	00002068 	.word	0x00002068
    6e8c:	00002068 	.word	0x00002068
    6e90:	00002068 	.word	0x00002068
    6e94:	00002068 	.word	0x00002068
    6e98:	00002068 	.word	0x00002068
    6e9c:	00002068 	.word	0x00002068
    6ea0:	00002068 	.word	0x00002068
    6ea4:	00002068 	.word	0x00002068
    6ea8:	00002068 	.word	0x00002068
    6eac:	00002068 	.word	0x00002068
    6eb0:	00002068 	.word	0x00002068
    6eb4:	00002068 	.word	0x00002068
    6eb8:	00002068 	.word	0x00002068
    6ebc:	00002068 	.word	0x00002068
    6ec0:	00002068 	.word	0x00002068
    6ec4:	00002068 	.word	0x00002068
    6ec8:	00002068 	.word	0x00002068
    6ecc:	00002068 	.word	0x00002068
    6ed0:	00002068 	.word	0x00002068
    6ed4:	00002068 	.word	0x00002068
    6ed8:	00002068 	.word	0x00002068
    6edc:	00002068 	.word	0x00002068
    6ee0:	00002068 	.word	0x00002068
    6ee4:	00002068 	.word	0x00002068
    6ee8:	00002068 	.word	0x00002068
    6eec:	00002068 	.word	0x00002068
    6ef0:	00002068 	.word	0x00002068
    6ef4:	00002068 	.word	0x00002068
    6ef8:	00002068 	.word	0x00002068
    6efc:	00002068 	.word	0x00002068
    6f00:	00002068 	.word	0x00002068
    6f04:	00002068 	.word	0x00002068
    6f08:	00002068 	.word	0x00002068
    6f0c:	00002068 	.word	0x00002068
    6f10:	00002068 	.word	0x00002068
    6f14:	00002044 	.word	0x00002044
    6f18:	00002044 	.word	0x00002044
    6f1c:	0000204c 	.word	0x0000204c
    6f20:	0000204c 	.word	0x0000204c
    6f24:	0000204c 	.word	0x0000204c
    6f28:	0000204c 	.word	0x0000204c
    6f2c:	00002430 	.word	0x00002430
    6f30:	00002410 	.word	0x00002410
    6f34:	00002410 	.word	0x00002410
    6f38:	0000249c 	.word	0x0000249c
    6f3c:	00002422 	.word	0x00002422
    6f40:	0000243e 	.word	0x0000243e
    6f44:	00002414 	.word	0x00002414
    6f48:	0000244c 	.word	0x0000244c
    6f4c:	0000248c 	.word	0x0000248c
    6f50:	00003988 	.word	0x00003988
    6f54:	00003996 	.word	0x00003996
    6f58:	00003a30 	.word	0x00003a30
    6f5c:	00003ad0 	.word	0x00003ad0
    6f60:	00003b34 	.word	0x00003b34

00006f64 <_usb_device_irq_bits>:
    6f64:	00080004 00800070 01000001 00000200     ....p...........

00006f74 <_usb_endpoint_irq_bits>:
    6f74:	60100c03 00005180 00005162 0000511c     ...`.Q..bQ...Q..
    6f84:	0000503a 0000511c 00005154 0000511c     :P...Q..TQ...Q..
    6f94:	0000503a 00005162 00005162 00005154     :P..bQ..bQ..TQ..
    6fa4:	0000503a 00005032 00005032 00005032     :P..2P..2P..2P..
    6fb4:	00005398 000057e0 000056a0 000056a0     .S...W...V...V..
    6fc4:	0000569c 000057b8 000057b8 000057aa     .V...W...W...W..
    6fd4:	0000569c 000057b8 000057aa 000057b8     .V...W...W...W..
    6fe4:	0000569c 000057c0 000057c0 000057c0     .V...W...W...W..
    6ff4:	000059c4 2b302d23 6c680020 6665004c     .Y..#-0+ .hlL.ef
    7004:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    7014:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    7024:	64636261 00006665                       abcdef..

0000702c <_init>:
    702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    702e:	46c0      	nop			; (mov r8, r8)
    7030:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7032:	bc08      	pop	{r3}
    7034:	469e      	mov	lr, r3
    7036:	4770      	bx	lr

00007038 <__init_array_start>:
    7038:	000000dd 	.word	0x000000dd

0000703c <_fini>:
    703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    703e:	46c0      	nop			; (mov r8, r8)
    7040:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7042:	bc08      	pop	{r3}
    7044:	469e      	mov	lr, r3
    7046:	4770      	bx	lr

00007048 <__fini_array_start>:
    7048:	000000b5 	.word	0x000000b5
